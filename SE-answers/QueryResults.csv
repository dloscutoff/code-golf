Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate,ContentLicense
"207674","2","","200306","2020-07-27 11:36:19","","2","","<h1><a href=""http://javascript.com"" rel=""nofollow noreferrer"">JavaScript</a>, <s>25</s> 34 bytes</h1>

<pre class=""lang-js prettyprint-override""><code>for(;;){process.stdout.write('A')}
</code></pre>
<p>Prints 'A' to the console indefinitely.</p>
","80214","","80214","","2020-07-27 11:48:36","2020-07-27 11:48:36","","","","3","","","","CC BY-SA 4.0"
"208951","2","","206967","2020-08-02 10:49:09","","1","","<h1><a href=""https://www.ruby-lang.org/en/"" rel=""nofollow noreferrer"">Ruby</a>, <strike>46</strike> 19 bytes</h1>
<pre><code>-&gt;a,n{eval a*&quot;*n+&quot;}
</code></pre>
<p>Courtesy of <a href=""https://codegolf.stackexchange.com/users/96495/petstorm"">petStorm</a>.</p>
<p><strong>Old answer:</strong></p>
<pre><code>n,*A,l=gets.split(' ').map(&amp;:to_i)
p A.sum*n+l
</code></pre>
","80214","","80214","","2020-08-04 03:46:44","2020-08-04 03:46:44","","","","2","","","","CC BY-SA 4.0"
"208952","1","208965","","2020-08-02 11:46:45","","0","662","<h1>Task</h1>
<p>Take the (integer) number of human years that the dog has lived, <span class=""math-container"">\$n\$</span>, as input and return its age in dog years, <span class=""math-container"">\$d\$</span>, to two decimal places.<br />
The number of human years, <span class=""math-container"">\$n\$</span>, will be between <span class=""math-container"">\$1\$</span> and <span class=""math-container"">\$122\$</span> inclusive: <span class=""math-container"">\$n \in [1,122], n \in \Bbb{N}\$</span>.</p>
<p>According to <a href=""https://www.sciencefocus.com/news/new-trick-to-calculate-your-old-dogs-age/"" rel=""nofollow noreferrer"">BBC's Science Focus Magazine</a>, the correct function for determining your dog's age is:
<span class=""math-container"">$$
n = 16 \times \ln(d) + 31
$$</span>
Where</p>
<p><em><span class=""math-container"">\$n\$</span> is the age in human years</em></p>
<p><em><span class=""math-container"">\$d\$</span> is the age in dog years</em></p>
<h1>Rules</h1>
<p>The final output in dog years must be a decimal, <strong>rounded to 2 decimal places.</strong></p>
","80214","","66833","","2021-04-19 21:01:46","2021-04-19 23:14:33","Find your dog's age","<code-golf><math><arithmetic>","18","12","","","","CC BY-SA 4.0"
"208998","2","","208982","2020-08-03 04:49:55","","1","","<h1><a href=""https://www.ruby-lang.org/en/"" rel=""nofollow noreferrer"">Ruby</a>, 40 bytes</h1>
<pre><code>-&gt;a{a==a.transpose.map{|r|r.map{|c|-c}}}
</code></pre>
<p><a href=""https://tio.run/##KypNqvyfZvtf1y6xOtHWNlGvpCgxr7ggvzhVLzexoLqmqKYIwkiu0U2ura39X6CQFh0dbagDhLE6aHRsLBdE2kDHACwMog2AtK4hmIEkr2sEFDYCi/0HAA"" rel=""nofollow noreferrer"">Try it online!</a></p>
","80214","","80214","","2020-08-04 13:42:25","2020-08-04 13:42:25","","","","2","","","","CC BY-SA 4.0"
"209013","2","","196312","2020-08-03 09:20:52","","0","","<h1><a href=""https://processing.org/"" rel=""nofollow noreferrer"">Processing</a>, 172 bytes</h1>
<pre><code>noStroke();background(255);fill(0);for(float i=-60;i&lt;=300;i+=120)arc(50,50,100,100,radians(i),radians(i+60),PIE);fill(255);circle(50,50,30);fill(0);circle(50,50,20);
</code></pre>
<p>Un-minified code:</p>
<pre><code>noStroke();
background(255);
fill(0);
for(float i=-60;i&lt;=300;i+=120)arc(50,50,100,100,radians(i),radians(i+60),PIE);
fill(255);
circle(50,50,30);
fill(0);
circle(50,50,20);
</code></pre>
<h2>Output</h2>
<p><a href=""https://i.stack.imgur.com/E8MRP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/E8MRP.png"" alt=""enter image description here"" /></a></p>
","80214","","","","","2020-08-03 09:20:52","","","","0","","","","CC BY-SA 4.0"
"209026","2","","209020","2020-08-03 16:08:48","","1","","<h1><a href=""https://www.ruby-lang.org/en/"" rel=""nofollow noreferrer"">Ruby</a>, 57 bytes</h1>
<pre><code>n=gets.to_i
$&gt;&lt;&lt;' '+?_*n+&quot; \n/&quot;+' '*n+&quot;\\\n|&quot;+' '*n+'|'
</code></pre>
<p><a href=""https://tio.run/##KypNqvz/P882PbWkWK8kPz6TS8XOxkZdQV3bPl4rT1tJISZPX0kbyAdxYmJi8mpgPPUa9f//DQ0MuAA"" rel=""nofollow noreferrer"">Try It Online!</a></p>
","80214","","","","","2020-08-03 16:08:48","","","","0","","","","CC BY-SA 4.0"
"209084","2","","147513","2020-08-04 15:48:20","","1","","<h1><a href=""https://www.ruby-lang.org"" rel=""nofollow noreferrer"">Ruby</a>, <strike>97</strike> 94 bytes</h1>
<pre><code>puts &quot;  &quot;*(a%2)+&quot; ^&quot;;f=-&gt;n{puts&quot;&quot;+[&quot;/!\\\n---^&quot;,&quot;  /!\\\n ^---&quot;][n%2];(n&gt;1)?f[n-1]:puts(&quot; -&quot;)}
</code></pre>
<p><a href=""https://tio.run/##JYtLCoQwEAWv0j4QktFG43JEPUg@EBdZNuKMCxHPHhWXr6reus17joNp87L9fwQifFQsO12BAvo08CjHo4DKoimcc8LMAfWdvpPCDeCtlJ3vlYxGT8kKG/99fgrE0GdONvp8AQ"" rel=""nofollow noreferrer"">Try It Online!</a></p>
<p>I was unable to find a way to fit the entire thing in one function, so <code>f</code> is set to the lambda.</p>
<p>Based on <a href=""https://codegolf.stackexchange.com/users/68615/totallyhuman"">TotallyHuman</a>'s Python answer.</p>
","80214","","80214","","2020-08-04 15:53:42","2020-08-04 15:53:42","","","","0","","","","CC BY-SA 4.0"
"209085","2","","64140","2020-08-04 16:17:55","","0","","<h1>Processing, 111 bytes</h1>
<pre><code>size(78,52);noStroke();fill(#0055a4);rect(0,0,26,52);fill(255);rect(26,0,26,52);fill(#ef4135);rect(52,0,26,52);
</code></pre>
<p><a href=""https://i.stack.imgur.com/btle5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/btle5.png"" alt=""enter image description here"" /></a></p>
","80214","","","","","2020-08-04 16:17:55","","","","0","","","","CC BY-SA 4.0"
"209106","2","","198288","2020-08-05 12:22:47","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 13 bytes</h1>
<pre><code>!~M1A?:?.[!:]
</code></pre>
<p><strong>Explanation:</strong></p>
<pre><code>               Stack starts with 1.
!              Duplicates 0 or 1  [1,0,0] or [1,1,1]
 ~             Reverses the stack [0,0,1] or [1,1,1]
  M            Adds top 2 elements[0,1]   or [1,2]
   1A          Subtract 1 from top[0,0]   or [1,1]
     ?:        If top of stack is 0, print it, otherwise do nothing
       ?.      If top of stack is 0, end program
         [!:]  Infinite loop which duplicates top of stack and prints it
</code></pre>
<p><a href=""https://8dion8.github.io/?code=0!%7EM1A%3F%3A%3F.%5B!%3A%5D%0A&amp;input=1"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-05 12:30:43","2020-08-05 12:30:43","","","","0","","","","CC BY-SA 4.0"
"209107","2","","62732","2020-08-05 12:39:30","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP v1.1</a>, <strike>18</strike> 14 bytes</h1>
<pre><code>@A{1A:.}1M[!:]
</code></pre>
<p>-4 bytes with integer input.</p>
<p><a href=""https://8dion8.github.io/?code=%40A%7B1A%3A.%7D1M%5B!%3A%5D&amp;input=0"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-07 04:48:33","2020-08-07 04:48:33","","","","2","","","","CC BY-SA 4.0"
"209113","2","","192979","2020-08-05 15:53:46","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP 0.1</a>, 18 bytes</h1>
<pre><code>?.:M?%?00?;W590?.?
</code></pre>
<p>Displays 1.
<a href=""https://8dion8.github.io/?code=%3F.%3AM%3F%25%3F00%3F%3BW590%3F.%3F&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<pre><code>?.?095W;?00?%?M:.?
</code></pre>
<p>Displays '-' and then 1, which shows -1.
<a href=""https://8dion8.github.io/?code=%3F.%3F095W%3B%3F00%3F%25%3FM%3A.%3F&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-05 15:53:46","","","","3","","","","CC BY-SA 4.0"
"209114","2","","183315","2020-08-05 17:39:26","","2","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 113 bytes (Ubuntu Terminal)</h1>

<pre class=""lang-ruby prettyprint-override""><code>a=[[91,93,95],[93,32,96],[95,96,34]]
for b,c,d in a do puts&quot;\e[#{b}m█\e[0m\e[#{c}m█\e[0m\e[#{d}m█\e[0m&quot; end
</code></pre>
<p>In Terminal.app, the colors do not display properly:</p>
<p><a href=""https://i.stack.imgur.com/0x4Tf.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0x4Tf.png"" alt=""enter image description here"" /></a></p>
<p>According to <a href=""https://en.wikipedia.org/wiki/ANSI_escape_code"" rel=""nofollow noreferrer"">Wikipedia</a>, this program should fit the spec if it's run on Ubuntu, which is the only terminal which has the colors as per specifications. Can someone help me out with this?</p>
<p><a href=""https://tio.run/##KypNqvz/P9E2OtrSUMfSWMfSNFYnGkgbG@lYmoGYpkBax9gkNpYrLb9IIUknWSdFITNPIVEhJV@hoLSkWCkmNVq5Oqk299G0DiDTIBfMT0bjpyD4SgqpeSn//wMA"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-05 17:39:26","","","","0","","","","CC BY-SA 4.0"
"209127","2","","17005","2020-08-06 02:25:06","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 16 bytes</h1>
<pre><code>!!M:!!A:!:!!M!M:
</code></pre>
<pre><code>chr:pos:stack
! : 1 : [1,1]
! : 2 : [1,1,1]
M : 3 : [1,2]
: : 4 : [1]
! : 5 : [1,1]
! : 6 : [1,1,1]
A : 7 : [1,0]
: : 8 : [1]
! : 9 : [1,1]
: : 10 : [1]
! : 11 : [1,1]
! : 12 : [1,1,1]
M : 13 : [1,2]
! : 14 : [1,2,2]
M : 15 : [1,4]
: : 16 : [1]
</code></pre>
<p><a href=""https://8dion8.github.io/?code=!!M%3A!!A%3A!%3A!!M!M%3A.&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-11-02 17:30:00","2020-11-02 17:30:00","","","","3","","","","CC BY-SA 4.0"
"209136","2","","209020","2020-08-06 06:41:29","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP v1.1</a>, 92 bytes</h1>
<pre><code>%@_1A84W;[1A~25WWM~]%!![1A92W1M5W;]%67M;85W7M;[1A84W;]%45W3M4W;67M;65W1M4W;[1A84W;]65W1M4W;.
</code></pre>
<p><a href=""https://8dion8.github.io/?code=%25%40_1A84W%3B%5B1A%7E25WWM%7E%5D%25!!%5B1A92W1M5W%3B%5D%2567M%3B85W7M%3B%5B1A84W%3B%5D%2545W3M4W%3B67M%3B65W1M4W%3B%5B1A84W%3B%5D65W1M4W%3B.&amp;input=0"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-06 06:41:29","","","","0","","","","CC BY-SA 4.0"
"209139","2","","207258","2020-08-06 07:59:58","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP v1.1</a>, 6 bytes</h1>
<pre><code>33W/:.
</code></pre>
<p>I tried a different approach from Dion's answer.</p>
<p><a href=""https://8dion8.github.io/?code=33W%2F%3A.&amp;input="" rel=""nofollow noreferrer"">Try it!</a>, <a href=""https://tio.run/##K6gsycjPM/7/v1jBViEzr6C0REOTqyS/JDEHyC8uzdXIL0rRSNZUSMsvUkgGKlAo1uQqKMrMK9FIzijSANEGeqYK2gpgLfo5qXkaxZpA8P@/sXG4vpUeAA"" rel=""nofollow noreferrer"">Verify</a></p>
","80214","","80214","","2020-08-08 12:07:03","2020-08-08 12:07:03","","","","2","","","","CC BY-SA 4.0"
"209140","2","","132428","2020-08-06 08:09:19","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 5624 bytes</h1>
<pre><code>88WM;269WW;1689MWA;358WW;1277WWA;19M29MW;455WW;1689MWA;67W89WM;159WA;48W;288WM;1277WWA;269WW;455WW;789MW;357WW;19M29MW;159WA;48W;288WM;1277WWA;67W89WM;67W89WM;1277WWA;2949MWA;2949MWA;1278WWA;159WA;48W;288WM;1689MWA;19M29MW;19M29MW;1689MWA;1949MWA;159WA;48W;288WM;269WW;949MW;1269WWM;1689MWA;19M29MW;1949MWA;849MW;1277WWA;269WW;159WA;48W;288WM;269WW;949MW;19M29MW;1949MWA;159WA;48W;288WM;1278WWA;1278WWA;1269WWA;1689MWA;67W89WM;159WA;48W;288WM;1278WWA;1278WWA;2279WAW;1269WWM;1277WWA;19M29MW;159WA;48W;288WM;67W89WM;1278WWA;789MW;19M29MW;159WA;48W;288WM;949MW;67W89WM;67W89WM;159WA;48W;388WM;1277WWA;19M29MW;1949MWA;789MW;1689MWA;269WW;269WW;159WA;48W;388WM;1277WWA;278WW;357WW;1949MWA;1278WWA;159WA;48W;388WM;1277WWA;67W89WM;455WW;357WW;19M29MW;159WA;48W;388WM;1277WWA;67W89WM;278WW;1689MWA;67W89WM;159WA;48W;388WM;1277WWA;2949MWA;1689MWA;1358WWM;159WA;48W;388WM;1277WWA;2949MWA;2949MWA;357WW;455WW;1358WWM;159WA;48W;388WM;1278WWA;929MW;849MW;67W89WM;1277WWA;19M29MW;159WA;48W;388WM;1278WWA;269WW;269WW;357WW;19M29MW;2949MWA;159WA;48W;388WM;1278WWA;1278WWA;19M29MW;2949MWA;159WA;48W;388WM;1278WWA;67W89WM;1269WWA;1689MWA;67W89WM;159WA;48W;388WM;1278WWA;67W89WM;19M29MW;1358WWM;19M29MW;159WA;48W;388WM;1278WWA;67W89WM;1949MWA;1689MWA;2279WAW;48W;499WA;1277WWA;2949MWA;1949MWA;1278WWA;159WA;48W;388WM;1278WWA;1949MWA;1949MWA;1278WWA;19M29MW;159WA;48W;388WM;67W89WM;1277WWA;278WW;1278WWA;159WA;48W;388WM;67W89WM;949MW;2279WAW;159WA;48W;488WM;1277WWA;357WW;19M29MW;1689MWA;2949MWA;159WA;48W;488WM;1278WWA;19M29MW;19M29MW;1689MWA;269WW;269WW;1358WWM;159WA;48W;488WM;949MW;929MW;1269WWA;789MW;1278WWA;67W89WM;1949MWA;849MW;159WA;48W;488WM;949MW;67W89WM;277WW;357WW;19M29MW;159WA;48W;389WA;19M29MW;2279WAW;357WW;159WA;48W;389WA;67W89WM;19M29MW;2949MWA;1949MWA;159WA;48W;257WW;1689MWA;357WW;19M29MW;2949MWA;1949MWA;1689MWA;357WW;19M29MW;159WA;48W;257WW;357WW;2949MWA;929MW;849MW;1689MWA;67W89WM;159WA;48W;257WW;269WW;1277WWA;1269WWA;1689MWA;159WA;48W;257WW;67W89WM;1277WWA;19M29MW;1269WWA;1689MWA;19M29MW;159WA;48W;189WA;1277WWA;67W89WM;455WW;19M29MW;1689MWA;67W89WM;159WA;48W;189WA;357WW;269WW;269WW;357WW;277WW;67W89WM;1277WWA;19M29MW;455WW;159WA;48W;189WA;67W89WM;1277WWA;849MW;1277WWA;1269WWM;159WA;48W;189WA;67W89WM;1277WWA;2949MWA;2949MWA;269WW;1689MWA;1358WWM;159WA;48W;89W;1277WWA;67W89WM;67W89WM;357WW;2949MWA;159WA;48W;89W;1277WWA;2949MWA;2949MWA;1277WWA;19M29MW;159WA;48W;89W;1277WWA;1949MWA;929MW;849MW;159WA;48W;89W;1689MWA;357WW;19M29MW;67W89WM;357WW;929MW;849MW;159WA;48W;89W;1689MWA;357WW;1949MWA;1269WWA;1277WWA;1269WWM;278WW;159WA;48W;89W;1689MWA;269WW;269WW;1689MWA;67W89WM;159WA;48W;89W;357WW;67W89WM;1278WWA;19M29MW;1278WWA;159WA;48W;89W;1278WWA;1689MWA;1949MWM;1689MWA;19M29MW;159WA;48W;189WM;19M29MW;849MW;1278WWA;689MW;1689MWA;159WA;48W;189WM;2949MWA;1277WWA;1269WWA;2949MWA;1278WWA;19M29MW;159WA;48W;289WM;1278WWA;849MW;19M29MW;2949MWA;1278WWA;19M29MW;159WA;48W;355WW;1277WWA;357WW;19M29MW;1689MWA;159WA;48W;355WW;1689MWA;19M29MW;19M29MW;1689MWA;455WW;1358WWM;159WA;48W;355WW;357WW;19M29MW;1849MWA;159WA;48W;355WW;269WW;1278WWA;277WW;949MW;929MW;849MW;1277WWA;67W89WM;159WA;48W;489WM;1277WWA;19M29MW;1269WWA;689MW;1278WWA;67W89WM;455WW;159WA;48W;489WM;1689MWA;1277WWA;849MW;1358WWM;159WA;48W;489WM;1689MWA;1689MWA;159WA;48W;499WA;1277WWA;19M29MW;929MW;849MW;357WW;19M29MW;159WA;48W;499WA;1277WWA;67W89WM;1269WWA;1689MWA;1358WWM;159WA;48W;499WA;929MW;388WM;1277WWA;357WW;19M29MW;159WA;48W;499WA;929MW;388WM;1277WWA;2949MWA;1269WWA;357WW;269WW;269WW;159WA;48W;499WA;929MW;388WM;1278WWA;19M29MW;19M29MW;1689MWA;269WW;269WW;159WA;48W;499WA;1689MWA;19M29MW;1689MWA;19M29MW;455WW;1689MWA;2279WAW;159WA;48W;499WA;1689MWA;67W89WM;1269WWA;269WW;1689MWA;1358WWM;159WA;48W;499WA;1278WWA;67W89WM;1277WWA;19M29MW;159WA;48W;499WA;949MW;67W89WM;1269WWA;1278WWA;789MW;2949MWA;1269WWA;357WW;159WA;48W;499WA;949MW;67W89WM;278WW;849MW;1358WWM;159WA;48W;499WA;949MW;67W89WM;67W89WM;1277WWA;1358WWM;159WA;48W;399WA;1689MWA;269WW;2949MWA;1278WWA;19M29MW;159WA;48W;199WA;1277WWA;949MW;269WW;159WA;48W;199WA;1689MWA;67W89WM;455WW;949MW;1689MWA;159WA;48W;199WA;1689MWA;1949MWA;1689MWA;67W89WM;2949MWA;159WA;48W;199WA;1278WWA;67W89WM;1949MWA;1269WWM;1277WWA;19M29MW;159WA;48W;199WM;1689MWA;1689MWA;455WW;159WA;48W;199WM;357WW;2949MWA;929MW;849MW;159WA;48W;199WM;1278WWA;277WW;1689MWA;67W89WM;1949MWA;2949MWA;159WA;48W;199WM;1278WWA;949MW;19M29MW;455WW;2949MWA;159WA;48W;199WM;949MW;277WW;357WW;1278WWA;159WA;48W;299WM;1277WWA;19M29MW;455WW;1689MWA;67W89WM;2949MWA;159WA;48W;299WM;1277WWA;2949MWA;2949MWA;1689MWA;159WA;48W;299WM;929MW;849MW;1277WWA;1949MWA;2279WAW;159WA;48W;299WM;929MW;849MW;949MW;1269WWM;1689MWA;67W89WM;159WA;48W;299WM;929MW;1278WWA;1949MWA;1949MWA;159WA;48W;299WM;849MW;1277WWA;849MW;1689MWA;1689MWA;19M29MW;159WA;48W;299WM;849MW;1689MWA;269WW;277WW;1358WWM;159WA;48W;299WM;1949MWA;1277WWA;277WW;1689MWA;19M29MW;1278WWA;789MW;159WA;48W;299WM;1949MWA;67W89WM;1277WWA;19M29MW;1849MWA;1689MWA;159WA;48W;299WM;949MW;269WW;269WW;357WW;1949MWM;1277WWA;19M29MW;159WA;48W;267WW;1689MWA;2949MWA;1949MWA;1689MWA;67W89WM;159WA;48W;267WW;849MW;949MW;19M29MW;1689MWA;159WA;48W;267WW;357WW;269WW;269WW;357WW;2949MWA;159WA;48W;267WW;1278WWA;1278WWA;1269WWM;1689MWA;1358WWM;159WA;48W;499WM;455WW;1277WWA;269WW;269WW;159WA;48W;599WM;1277WWA;19M29MW;48W;89W;1278WWA;269WW;269WW;1689MWA;19M29MW;159WA;48W;699WM;1277WWA;67W89WM;19M29MW;1689MWA;67W89WM;159WA;48W;699WM;1277WWA;67W89WM;67W89WM;1689MWA;19M29MW;159WA;48W;699WM;849MW;357WW;1949MWA;1689MWA;849MW;1278WWA;949MW;2949MWA;1689MWA;159WA;48W;699WM;357WW;929MW;1269WWA;1689MWA;67W89WM;159WA;48W;699WM;1358WWM;455WW;1689MWA;19M29MW;159WA;48W;899WM;1278WWA;949MW;19M29MW;1849MWA;

</code></pre>
<p><a href=""https://8dion8.github.io/?code=88WM%3B269WW%3B1689MWA%3B358WW%3B1277WWA%3B19M29MW%3B455WW%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B288WM%3B1277WWA%3B269WW%3B455WW%3B789MW%3B357WW%3B19M29MW%3B159WA%3B48W%3B288WM%3B1277WWA%3B67W89WM%3B67W89WM%3B1277WWA%3B2949MWA%3B2949MWA%3B1278WWA%3B159WA%3B48W%3B288WM%3B1689MWA%3B19M29MW%3B19M29MW%3B1689MWA%3B1949MWA%3B159WA%3B48W%3B288WM%3B269WW%3B949MW%3B1269WWM%3B1689MWA%3B19M29MW%3B1949MWA%3B849MW%3B1277WWA%3B269WW%3B159WA%3B48W%3B288WM%3B269WW%3B949MW%3B19M29MW%3B1949MWA%3B159WA%3B48W%3B288WM%3B1278WWA%3B1278WWA%3B1269WWA%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B288WM%3B1278WWA%3B1278WWA%3B2279WAW%3B1269WWM%3B1277WWA%3B19M29MW%3B159WA%3B48W%3B288WM%3B67W89WM%3B1278WWA%3B789MW%3B19M29MW%3B159WA%3B48W%3B288WM%3B949MW%3B67W89WM%3B67W89WM%3B159WA%3B48W%3B388WM%3B1277WWA%3B19M29MW%3B1949MWA%3B789MW%3B1689MWA%3B269WW%3B269WW%3B159WA%3B48W%3B388WM%3B1277WWA%3B278WW%3B357WW%3B1949MWA%3B1278WWA%3B159WA%3B48W%3B388WM%3B1277WWA%3B67W89WM%3B455WW%3B357WW%3B19M29MW%3B159WA%3B48W%3B388WM%3B1277WWA%3B67W89WM%3B278WW%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B388WM%3B1277WWA%3B2949MWA%3B1689MWA%3B1358WWM%3B159WA%3B48W%3B388WM%3B1277WWA%3B2949MWA%3B2949MWA%3B357WW%3B455WW%3B1358WWM%3B159WA%3B48W%3B388WM%3B1278WWA%3B929MW%3B849MW%3B67W89WM%3B1277WWA%3B19M29MW%3B159WA%3B48W%3B388WM%3B1278WWA%3B269WW%3B269WW%3B357WW%3B19M29MW%3B2949MWA%3B159WA%3B48W%3B388WM%3B1278WWA%3B1278WWA%3B19M29MW%3B2949MWA%3B159WA%3B48W%3B388WM%3B1278WWA%3B67W89WM%3B1269WWA%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B388WM%3B1278WWA%3B67W89WM%3B19M29MW%3B1358WWM%3B19M29MW%3B159WA%3B48W%3B388WM%3B1278WWA%3B67W89WM%3B1949MWA%3B1689MWA%3B2279WAW%3B48W%3B499WA%3B1277WWA%3B2949MWA%3B1949MWA%3B1278WWA%3B159WA%3B48W%3B388WM%3B1278WWA%3B1949MWA%3B1949MWA%3B1278WWA%3B19M29MW%3B159WA%3B48W%3B388WM%3B67W89WM%3B1277WWA%3B278WW%3B1278WWA%3B159WA%3B48W%3B388WM%3B67W89WM%3B949MW%3B2279WAW%3B159WA%3B48W%3B488WM%3B1277WWA%3B357WW%3B19M29MW%3B1689MWA%3B2949MWA%3B159WA%3B48W%3B488WM%3B1278WWA%3B19M29MW%3B19M29MW%3B1689MWA%3B269WW%3B269WW%3B1358WWM%3B159WA%3B48W%3B488WM%3B949MW%3B929MW%3B1269WWA%3B789MW%3B1278WWA%3B67W89WM%3B1949MWA%3B849MW%3B159WA%3B48W%3B488WM%3B949MW%3B67W89WM%3B277WW%3B357WW%3B19M29MW%3B159WA%3B48W%3B389WA%3B19M29MW%3B2279WAW%3B357WW%3B159WA%3B48W%3B389WA%3B67W89WM%3B19M29MW%3B2949MWA%3B1949MWA%3B159WA%3B48W%3B257WW%3B1689MWA%3B357WW%3B19M29MW%3B2949MWA%3B1949MWA%3B1689MWA%3B357WW%3B19M29MW%3B159WA%3B48W%3B257WW%3B357WW%3B2949MWA%3B929MW%3B849MW%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B257WW%3B269WW%3B1277WWA%3B1269WWA%3B1689MWA%3B159WA%3B48W%3B257WW%3B67W89WM%3B1277WWA%3B19M29MW%3B1269WWA%3B1689MWA%3B19M29MW%3B159WA%3B48W%3B189WA%3B1277WWA%3B67W89WM%3B455WW%3B19M29MW%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B189WA%3B357WW%3B269WW%3B269WW%3B357WW%3B277WW%3B67W89WM%3B1277WWA%3B19M29MW%3B455WW%3B159WA%3B48W%3B189WA%3B67W89WM%3B1277WWA%3B849MW%3B1277WWA%3B1269WWM%3B159WA%3B48W%3B189WA%3B67W89WM%3B1277WWA%3B2949MWA%3B2949MWA%3B269WW%3B1689MWA%3B1358WWM%3B159WA%3B48W%3B89W%3B1277WWA%3B67W89WM%3B67W89WM%3B357WW%3B2949MWA%3B159WA%3B48W%3B89W%3B1277WWA%3B2949MWA%3B2949MWA%3B1277WWA%3B19M29MW%3B159WA%3B48W%3B89W%3B1277WWA%3B1949MWA%3B929MW%3B849MW%3B159WA%3B48W%3B89W%3B1689MWA%3B357WW%3B19M29MW%3B67W89WM%3B357WW%3B929MW%3B849MW%3B159WA%3B48W%3B89W%3B1689MWA%3B357WW%3B1949MWA%3B1269WWA%3B1277WWA%3B1269WWM%3B278WW%3B159WA%3B48W%3B89W%3B1689MWA%3B269WW%3B269WW%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B89W%3B357WW%3B67W89WM%3B1278WWA%3B19M29MW%3B1278WWA%3B159WA%3B48W%3B89W%3B1278WWA%3B1689MWA%3B1949MWM%3B1689MWA%3B19M29MW%3B159WA%3B48W%3B189WM%3B19M29MW%3B849MW%3B1278WWA%3B689MW%3B1689MWA%3B159WA%3B48W%3B189WM%3B2949MWA%3B1277WWA%3B1269WWA%3B2949MWA%3B1278WWA%3B19M29MW%3B159WA%3B48W%3B289WM%3B1278WWA%3B849MW%3B19M29MW%3B2949MWA%3B1278WWA%3B19M29MW%3B159WA%3B48W%3B355WW%3B1277WWA%3B357WW%3B19M29MW%3B1689MWA%3B159WA%3B48W%3B355WW%3B1689MWA%3B19M29MW%3B19M29MW%3B1689MWA%3B455WW%3B1358WWM%3B159WA%3B48W%3B355WW%3B357WW%3B19M29MW%3B1849MWA%3B159WA%3B48W%3B355WW%3B269WW%3B1278WWA%3B277WW%3B949MW%3B929MW%3B849MW%3B1277WWA%3B67W89WM%3B159WA%3B48W%3B489WM%3B1277WWA%3B19M29MW%3B1269WWA%3B689MW%3B1278WWA%3B67W89WM%3B455WW%3B159WA%3B48W%3B489WM%3B1689MWA%3B1277WWA%3B849MW%3B1358WWM%3B159WA%3B48W%3B489WM%3B1689MWA%3B1689MWA%3B159WA%3B48W%3B499WA%3B1277WWA%3B19M29MW%3B929MW%3B849MW%3B357WW%3B19M29MW%3B159WA%3B48W%3B499WA%3B1277WWA%3B67W89WM%3B1269WWA%3B1689MWA%3B1358WWM%3B159WA%3B48W%3B499WA%3B929MW%3B388WM%3B1277WWA%3B357WW%3B19M29MW%3B159WA%3B48W%3B499WA%3B929MW%3B388WM%3B1277WWA%3B2949MWA%3B1269WWA%3B357WW%3B269WW%3B269WW%3B159WA%3B48W%3B499WA%3B929MW%3B388WM%3B1278WWA%3B19M29MW%3B19M29MW%3B1689MWA%3B269WW%3B269WW%3B159WA%3B48W%3B499WA%3B1689MWA%3B19M29MW%3B1689MWA%3B19M29MW%3B455WW%3B1689MWA%3B2279WAW%3B159WA%3B48W%3B499WA%3B1689MWA%3B67W89WM%3B1269WWA%3B269WW%3B1689MWA%3B1358WWM%3B159WA%3B48W%3B499WA%3B1278WWA%3B67W89WM%3B1277WWA%3B19M29MW%3B159WA%3B48W%3B499WA%3B949MW%3B67W89WM%3B1269WWA%3B1278WWA%3B789MW%3B2949MWA%3B1269WWA%3B357WW%3B159WA%3B48W%3B499WA%3B949MW%3B67W89WM%3B278WW%3B849MW%3B1358WWM%3B159WA%3B48W%3B499WA%3B949MW%3B67W89WM%3B67W89WM%3B1277WWA%3B1358WWM%3B159WA%3B48W%3B399WA%3B1689MWA%3B269WW%3B2949MWA%3B1278WWA%3B19M29MW%3B159WA%3B48W%3B199WA%3B1277WWA%3B949MW%3B269WW%3B159WA%3B48W%3B199WA%3B1689MWA%3B67W89WM%3B455WW%3B949MW%3B1689MWA%3B159WA%3B48W%3B199WA%3B1689MWA%3B1949MWA%3B1689MWA%3B67W89WM%3B2949MWA%3B159WA%3B48W%3B199WA%3B1278WWA%3B67W89WM%3B1949MWA%3B1269WWM%3B1277WWA%3B19M29MW%3B159WA%3B48W%3B199WM%3B1689MWA%3B1689MWA%3B455WW%3B159WA%3B48W%3B199WM%3B357WW%3B2949MWA%3B929MW%3B849MW%3B159WA%3B48W%3B199WM%3B1278WWA%3B277WW%3B1689MWA%3B67W89WM%3B1949MWA%3B2949MWA%3B159WA%3B48W%3B199WM%3B1278WWA%3B949MW%3B19M29MW%3B455WW%3B2949MWA%3B159WA%3B48W%3B199WM%3B949MW%3B277WW%3B357WW%3B1278WWA%3B159WA%3B48W%3B299WM%3B1277WWA%3B19M29MW%3B455WW%3B1689MWA%3B67W89WM%3B2949MWA%3B159WA%3B48W%3B299WM%3B1277WWA%3B2949MWA%3B2949MWA%3B1689MWA%3B159WA%3B48W%3B299WM%3B929MW%3B849MW%3B1277WWA%3B1949MWA%3B2279WAW%3B159WA%3B48W%3B299WM%3B929MW%3B849MW%3B949MW%3B1269WWM%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B299WM%3B929MW%3B1278WWA%3B1949MWA%3B1949MWA%3B159WA%3B48W%3B299WM%3B849MW%3B1277WWA%3B849MW%3B1689MWA%3B1689MWA%3B19M29MW%3B159WA%3B48W%3B299WM%3B849MW%3B1689MWA%3B269WW%3B277WW%3B1358WWM%3B159WA%3B48W%3B299WM%3B1949MWA%3B1277WWA%3B277WW%3B1689MWA%3B19M29MW%3B1278WWA%3B789MW%3B159WA%3B48W%3B299WM%3B1949MWA%3B67W89WM%3B1277WWA%3B19M29MW%3B1849MWA%3B1689MWA%3B159WA%3B48W%3B299WM%3B949MW%3B269WW%3B269WW%3B357WW%3B1949MWM%3B1277WWA%3B19M29MW%3B159WA%3B48W%3B267WW%3B1689MWA%3B2949MWA%3B1949MWA%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B267WW%3B849MW%3B949MW%3B19M29MW%3B1689MWA%3B159WA%3B48W%3B267WW%3B357WW%3B269WW%3B269WW%3B357WW%3B2949MWA%3B159WA%3B48W%3B267WW%3B1278WWA%3B1278WWA%3B1269WWM%3B1689MWA%3B1358WWM%3B159WA%3B48W%3B499WM%3B455WW%3B1277WWA%3B269WW%3B269WW%3B159WA%3B48W%3B599WM%3B1277WWA%3B19M29MW%3B48W%3B89W%3B1278WWA%3B269WW%3B269WW%3B1689MWA%3B19M29MW%3B159WA%3B48W%3B699WM%3B1277WWA%3B67W89WM%3B19M29MW%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B699WM%3B1277WWA%3B67W89WM%3B67W89WM%3B1689MWA%3B19M29MW%3B159WA%3B48W%3B699WM%3B849MW%3B357WW%3B1949MWA%3B1689MWA%3B849MW%3B1278WWA%3B949MW%3B2949MWA%3B1689MWA%3B159WA%3B48W%3B699WM%3B357WW%3B929MW%3B1269WWA%3B1689MWA%3B67W89WM%3B159WA%3B48W%3B699WM%3B1358WWM%3B455WW%3B1689MWA%3B19M29MW%3B159WA%3B48W%3B899WM%3B1278WWA%3B949MW%3B19M29MW%3B1849MWA%3B%0A&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<p>Made using <a href=""https://codegolf.stackexchange.com/a/204650/80214"">Arnauld's MAWP string printer.</a> Somehow it's not the biggest solution in here.</p>
","80214","","","","","2020-08-06 08:09:19","","","","0","","","","CC BY-SA 4.0"
"209160","2","","209146","2020-08-06 11:13:12","","4","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, <strike>62</strike> <strike>46</strike> 28 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;c,d{[*c..d].join.count ?1}
</code></pre>
<p>-18 bytes, courtesy of <a href=""https://codegolf.stackexchange.com/users/92901/dingus"">Dingus.</a></p>
<p><a href=""https://tio.run/##KypNqvyfZvtf1y5ZJ6U6WitZTy8lVi8rPzNPLzm/NK9Ewd6w9n@BQlq0oY6hgUEsF5hpqGMEZxsZ65iZW8T@BwA"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-06 11:44:03","2020-08-06 11:44:03","","","","1","","","","CC BY-SA 4.0"
"209164","2","","209149","2020-08-06 11:33:29","","1","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 32 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>10000.times{|i|puts$_+&quot; %04i&quot;%i}
</code></pre>
<p>Suggested by Dingus.
<a href=""https://tio.run/##KypNqvz/39AACPRKMnNTi6trMmsKSkuKVeK1lRRUDUwylVQza///D833jQwpSitycvOoDIzITTdLr0ouKXQs988tN/TMz4j6l19QkpmfV/xfNw8A"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a{(0..9999).to_a.map(&amp;:to_s).map{|x|a+"" ""+x.rjust(4,""0"")}.join(""\n"")};

</code></pre>
<p><a href=""https://tio.run/##KypNqvxfXFJkm55aUmzNlWb7X9cusVrDQE/PEgg09Ury4xP1chMLNNSsgMxiTRC7uqaiJlFbSUFJu0KvKKu0uETDREfJQEmzVi8rPzNPQykmD8i25vqvYmdjo5AWDTQ99n9ovm9kSFFakZObR2VgRG66WXpVckmhY7l/brmhZ35GFAA"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-06 12:02:21","2020-08-06 12:02:21","","","","2","","","","CC BY-SA 4.0"
"209172","2","","206883","2020-08-06 12:53:26","","2","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 317 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a{a&lt;31?&quot;Cenozoic/&quot;+(a&lt;4?&quot;Quaternary&quot;:(a&lt;24?&quot;Neogene&quot;:(a&lt;67?&quot;Paleogene&quot;:&quot;&quot;))):a&lt;253?&quot;Mesozoic/&quot;+(a&lt;146?&quot;Cretaceous&quot;:(a&lt;202?&quot;Jurassic&quot;:(a&lt;253?&quot;Triassic&quot;:&quot;&quot;))):a&lt;543?&quot;Paleozoic/&quot;+(a&lt;300===a ?&quot;Permian&quot;:(a&lt;360 ?&quot;Carboniferous&quot;:(a&lt;420?&quot;Devonian&quot;:(a&lt;445===a ?&quot;Silurian&quot;:(a&lt;486 ?&quot;Ordovician&quot;: (a&lt;543?&quot;Cambrian&quot;:&quot;&quot;)))))):&quot;&quot;}
</code></pre>
<p><a href=""https://tio.run/##TY5NT4QwEIbv/goypyXGWGhBs1nsAU8mfkVvZg8DDqbJLjUD3WQ1/nbsQkFv06fvPPOyq45DUwwXN/iNG5loKKm1X9bUl3C@wo3S8OywJ26Rj7D2JPXogewHtTS@8ysNT7ibCUAcx2sfy6SGe@r@uRKVez1TjzVZ1002kWq4c4xdZ@qJnBZf2QQy@zIlw50/oRSiKAqM/Afx3mA7CmQuPCmRK9uahng@pVKh4ZYOnoakUlnYfzE7xwu@zj165Hd7MPUIo1UoUOK@mnJjr1M1gJ/h0/Vd1LzJRG3PwiyWKVPpMidCbIdf"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-06 12:53:26","","","","0","","","","CC BY-SA 4.0"
"209211","2","","128496","2020-08-07 04:31:46","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 169 bytes</h1>
<pre><code>9/8/W/;/5/5/W/4/W/1/M/;/9/3/W/4/W/;/9/3/W/4/W/;/9/4/W/1/M/3/W/;/5/8/W/4/M/;/8/4/W/;/9/8/M/5/W/2/M/;/9/4/W/1/M/3/W/;/9/9/M/1/M/6/W/;/9/3/W/4/W/;/5/5/W/4/W/;/9/2/M/3/W/;/.
</code></pre>
<p><a href=""https://8dion8.github.io/?code=9%2F8%2FW%2F%3B%2F5%2F5%2FW%2F4%2FW%2F1%2FM%2F%3B%2F9%2F3%2FW%2F4%2FW%2F%3B%2F9%2F3%2FW%2F4%2FW%2F%3B%2F9%2F4%2FW%2F1%2FM%2F3%2FW%2F%3B%2F5%2F8%2FW%2F4%2FM%2F%3B%2F8%2F4%2FW%2F%3B%2F9%2F8%2FM%2F5%2FW%2F2%2FM%2F%3B%2F9%2F4%2FW%2F1%2FM%2F3%2FW%2F%3B%2F9%2F9%2FM%2F1%2FM%2F6%2FW%2F%3B%2F9%2F3%2FW%2F4%2FW%2F%3B%2F5%2F5%2FW%2F4%2FW%2F%3B%2F9%2F2%2FM%2F3%2FW%2F%3B%2F.&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<p>Code with every other character removed:</p>
<pre><code>98W;55W4W1M;93W4W;93W4W;94W1M3W;58W4M;84W;98M5W2M;94W1M3W;99M1M6W;93W4W;55W4W;92M3W;.
</code></pre>
<p><a href=""https://8dion8.github.io/?code=98W%3B55W4W1M%3B93W4W%3B93W4W%3B94W1M3W%3B58W4M%3B84W%3B98M5W2M%3B94W1M3W%3B99M1M6W%3B93W4W%3B55W4W%3B92M3W%3B.&amp;input="" rel=""nofollow noreferrer"">Try It!</a></p>
","80214","","80214","","2020-08-07 04:46:14","2020-08-07 04:46:14","","","","0","","","","CC BY-SA 4.0"
"209212","2","","59347","2020-08-07 04:36:06","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP v1.1</a>, 2 bytes</h1>
<pre><code>[]
</code></pre>
<p>Stack starts with 1, brackets loop as long as top of stack isn't 0.</p>
<p><a href=""https://8dion8.github.io/?code=%5B%5D&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-07 04:36:06","","","","1","","","","CC BY-SA 4.0"
"209216","2","","51471","2020-08-07 07:06:24","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP v1.02</a>, <strike>37</strike> 53 bytes</h1>
<pre><code>%|0~[;]25W3M;@~(%)~_1A[1A~25WWM~]~1A[1A84W;]85W7M2W;.
</code></pre>
<p>Takes input as <code>[S][a]</code>, with no spaces between S and n.
Since the online interpreter takes only one line of input, the string and number are printed together.</p>
<p><a href=""https://8dion8.github.io/?code=%25%7C0%7E%5B%3B%5D25W3M%3B%40%7E(%25)%7E_1A%5B1A%7E25WWM%7E%5D%7E1A%5B1A84W%3B%5D85W7M2W%3B.&amp;input=Hows%20it%20going13"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-07 08:17:28","2020-08-07 08:17:28","","","","3","","","","CC BY-SA 4.0"
"209219","2","","105121","2020-08-07 08:44:49","","2","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 55 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>IO.write(?l,&quot;Hello, World!&quot;);`lpr&lt;&lt;?l`
</code></pre>
<p>For Mac and Linux, your default printer must be set at <a href=""http://localhost:631"" rel=""nofollow noreferrer"">localhost:631</a>.</p>
<p>For Windows, you need to add an lpr port in your printer settings.</p>
","80214","","80214","","2020-08-14 03:33:12","2020-08-14 03:33:12","","","","3","","","","CC BY-SA 4.0"
"209227","2","","57845","2020-08-07 13:11:57","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, <strike>117</strike> 107 bytes</h1>
<pre><code>%|0_!!!3M[1A75W;]25W;%75W;1M[1A84W;]75W;25W;75W;84W;~[;]84W;75W;25W;%75W;1M[1A84W;]75W;25W;%3M[1A75W;]25W;.
</code></pre>
<p>-10 bytes from Dion.</p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%7C0_!!!3M%5B1A75W%3B%5D25W%3B%2575W%3B1M%5B1A84W%3B%5D75W%3B25W%3B75W%3B84W%3B%7E%5B%3B%5D84W%3B75W%3B25W%3B%2575W%3B1M%5B1A84W%3B%5D75W%3B25W%3B%253M%5B1A75W%3B%5D25W%3B.&amp;input=Hello%20World"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-12 10:38:44","2020-08-12 10:38:44","","","","4","","","","CC BY-SA 4.0"
"209245","2","","109858","2020-08-08 04:39:54","","0","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 96 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a{a.chars.permutation.map(&amp;:join).reject{|x|/^0+/.match(x)||x==a}.detect{|n|a.to_i%n.to_i==0}}
</code></pre>
<p>The permutation function gives a lot of duplicates, so a large part of this is weedng those out.</p>
<p><a href=""https://tio.run/##LVHbbsIwDH3vV@RlE2is2Lk0yaTuRxCbOiiiSLSoBImJ8u2d7ezFp46PfY7d8fbzOx/q@f2zeTTl7tiM1/LSjudbalI39OW5uSxeP05D1y/LsT21u/SY7tP6C97WVEu74@K@nKZ7XTfPct8mqfdTU6bhu3vpBeoans/5MIyqU12vNgbBrZRHHShaTd/BYEWRnlYqOjQUA@BKGRAqNwAB1Smz2luqWYue6NX/HLA8ghIIAs5kCWAwQsEooFEo2vIUGmV1tsFMW2VTkYV8iGzIR1EIIPYCBvGqvfs3DgIBGaLUrEN@dF52q3IfWxMwOYsCokA6ztLOYDQyyO4R0fE5qI3vYfJZLLDrSK5NPhUIRMkqobjACnxAEIjcECLgVu2H4nJLV3XYdPxnrtuiKNp@P/8B"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-08 04:39:54","","","","0","","","","CC BY-SA 4.0"
"209251","2","","121056","2020-08-08 09:33:57","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 13 bytes</h1>
<pre><code>43W2M[84W;1A]
</code></pre>
<p>Prints 14 space characters.</p>
<p><a href=""https://8dion8.github.io/MAWP/?code=43W2M%5B84W%3B1A%5D.&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-10 07:05:55","2020-08-10 07:05:55","","","","3","","","","CC BY-SA 4.0"
"209252","2","","67921","2020-08-08 09:46:15","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP 1.0</a>, 76543210</h1>
<pre><code>8[1A!:].
</code></pre>
<p>As suggested by <a href=""https://codegolf.stackexchange.com/users/76162/jo-king"">Jo King.</a></p>
<p><a href=""https://8dion8.github.io/MAWP/?code=8%5B1A!%3A%5D.&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP 1.0</a>, 152587890625</h1>
<pre><code>5!W!W!W!W:.
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/?code=5!W!W!W!W%3A.&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-08 13:00:14","2020-08-08 13:00:14","","","","1","","","","CC BY-SA 4.0"
"209259","2","","106799","2020-08-08 13:26:06","","5","","<h1><a href=""https://docs.python.org/3/"" rel=""nofollow noreferrer"">Python 3</a> + Turtle, 389 bytes</h1>

<pre class=""lang-python prettyprint-override""><code>from turtle import*
a='#2e6f6e','#FAD028','#E44834'
L=lt;F=fd;B=begin_fill;E=end_fill
Z=0,1,2
pu()
ht()
speed(0)
for m in Z:L(120);F(30);L(60);F(30);L(60);[[[[color(a[j-m]),B(),[F(20)==L((5-i%2)*60)for i in(1,)+Z],E(),L(120)]for j in Z],k%2and[L(180),F(30),L(180)]or[L(300),F(30),L(60)]]for k in Z]
L(120)
F(30)
L(60)
F(10)
for k in[2,1]:color(a[k]);B();[F(20)==L(240)for i in Z];E();L(60)
</code></pre>
<p>From Bubbler's golf of -131 bytes!
<a href=""https://tio.run/##XU/LboMwELz7K5CiCDt1JGMoQrF8aFQ48QUgq6LFNISHkUsO/Xq6mFap4sNqvLMzOzt9zxczhsvSWDN4883OvfbaYTJ2PqBK@juu4ybWPvV32csr48mK0ihKwshHuexnkcmmFmf5rj/b8a1p@16kUo@1g6iQjAaUo@mGCbrMUL4mrWvMCGqM9QavHb3ilOOAMyIyHELNcfyAS3gfpjcWV@X1OChCz5jQMsMgkjLH@PnY7jk5wOxq2oIpDih5KhRNYXBzVyt1dfsU7fa8GusSmIQR6nbR7aOMhXbI/rXBVjl1t6nRZogcjxwPOPg9aR0qOQ3U6S9yp4iAwOIemEf3pGAoIOV26rL8AA"" rel=""nofollow noreferrer"" title=""Python 3 – Try It Online"">Try it online!</a></p>
<h1><a href=""https://docs.python.org/3/"" rel=""nofollow noreferrer"">Python 3 + Turtle</a>, <strike>537</strike> 520 bytes</h1>

<pre class=""lang-python prettyprint-override""><code>from turtle import*
a=['#2e6f6e','#FAD028','#E44834']
pu()
ht()
speed(0)
for m in range(3):
&#9;lt(120);fd(30);lt(60);fd(30);lt(60)
&#9;for k in range(3):
&#9;&#9;for j in range(3):
&#9;&#9;&#9;color(a[j]);begin_fill()
&#9;&#9;&#9;for i in range(4):fd(20);rt(120 if i%2==0 else 60)
&#9;&#9;&#9;end_fill();lt(120)
&#9;&#9;if k==1:rt(180);fd(30);lt(180)
&#9;&#9;else:rt(60);fd(30);lt(60)
&#9;a=a[2:]+a[:2]
lt(120)
fd(30)
lt(60)
fd(10)
a=[a[2],a[1]]
for k in range(2):
&#9;color(a[k]);begin_fill()
&#9;for i in range(3):fd(20);rt(120)
&#9;end_fill();lt(60)
turtle.Screen().exitonclick()
</code></pre>
<p>-17 bytes from Dion, after removing unnecessary whitespace.</p>
<p><a href=""https://tio.run/##bVHLasMwEDxbXyEIxVIbgi2bEBx8KLT9gR6NKKqzThQrklEUaL/eXeVBiduLVrOa2d1ZDd9h52wxjp13BxpOPhig@jA4Hx6Jqpt0JmDZLSGdp7O355dMrOLttSxXRZlKMpwYJ7uAx3EA2LCMk855eqDaUq/sFljBK5KYwHKR8XW3YQUGhMspIkkU9hPhObmfJpPWGeeZavaSrz9hq@1Hp43BKZKLQv8qSl5hn9jcn4eguqP6QdR1RsEcgZ5bJwnYzbXG@josZpHa13VeReXqbuAIkRArxNd/3KhaNaKST6qphCS3mhcSuZIQ5RhwzciVc9XkUpLJGkR0fPPb//E7cVtM3CLj3llse/nlxXvrASzjC/jSwdnW6LZnfBx/AA"" rel=""nofollow noreferrer"" title=""Python 3 – Try It Online"">Try it online!</a></p>
<p><a href=""https://i.stack.imgur.com/BaG9g.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/BaG9g.gif"" alt=""enter image description here"" /></a></p>
<p>gif made from <a href=""https://stackoverflow.com/a/41353016/4568534"">cdlane's instructions!</a></p>
","80214","","80214","","2020-08-13 07:06:17","2020-08-13 07:06:17","","","","3","","","","CC BY-SA 4.0"
"209267","2","","78448","2020-08-08 15:56:01","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP 1.0</a>, 30 bytes</h1>
<pre><code>%@_1A[1A~25WWM~]~[!1A]%[:48W;]
</code></pre>
<p>Output takes a little while for larger numbers.</p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%40_1A%5B1A%7E25WWM%7E%5D%7E%5B!1A%5D%25%5B%3A48W%3B%5D&amp;input=12"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-08 15:56:01","","","","0","","","","CC BY-SA 4.0"
"209288","2","","190670","2020-08-09 04:39:04","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 41 bytes</h1>
<pre><code>%|0~59WA{59WM}&lt;59WM;&gt;[85W6MA?.{85W6MM;}]
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%7C0%7E59WA%3C59WM%3B0%3E%7B59WM%7D%3F%25%5B85W6MA%3C.%3E%7B85W6MM%3B%7D%5D&amp;input=123.456"" rel=""nofollow noreferrer"">-3 bytes</a> after rearranging the beginning conditionals.</p>
<p>-1 byte from Dion after replacing <code>&lt;&gt;</code> with <code>?</code></p>
<p>Checks for <code>-</code> in the first character, then prints number using ASCII values till a <code>.</code> is reached.</p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%7C0%7E59WA%7B59WM%7D%3C59WM%3B%3E%5B85W6MA%3C.%3E%7B85W6MM%3B%7D%5D&amp;input=123.456"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-10 11:06:07","2020-08-10 11:06:07","","","","1","","","","CC BY-SA 4.0"
"209304","2","","209299","2020-08-09 12:20:38","","3","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, <strike>46</strike> <strike>40</strike> <strike>39</strike> <strike>38</strike> 31 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a,b,c{~b.count{|i|i&lt;a}/c*-20}
</code></pre>
<p>-5 -1 byte from petStorm.</p>
<p>-1 byte from Rahul Verma.</p>
<p>-7 bytes from Dingus.</p>
<p><a href=""https://tio.run/##Rc5Na8MwDAbge3@F0aUw0vVj166wdLsUxmDZLewgu8pHm8TFdgYh7f56JscdMcK8CD1IppXdkD0Pix1GMlL9r3xUum1cfy2v5RZvS/Ww2Kxuw0VkqYAD1mQhEinEJzQNcYS3UhUg@HH@1Na2te@@HJGb35HY8D8LOnFozqNOHP0QePE13xdYVehNjE1DxqdEaeeA9dOk7QVrT1KQaCDsozy3/7szre/dShuqvV5P@iPPu6APqM4wzr0ScYX8zqeNAxBrGS5fr1jPhj8"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 83 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a,b,c{(b.push(a).sort.each_slice(c).map{|x|x.include?(a)}.find_index(true)+1)*20}
</code></pre>
<p><a href=""https://tio.run/##Rc7fT4MwEAfw9/0V5F4ExWbMZzWiviwxJuIbMctRjh8OKGmLYdn2t@MVNGva5pvLfXKnh@wwFffT7QOGWSiPfib6wVQ@BsIobQWhrHamqSX5MhAt9sfTeBpF3clmyOmR@86iqLt8x49G3@qBgpsouN6sz1PvFakHW2zJQOilEH@j7ogjvNayAo8P5w9lzNC66lOOXPwKvQ3/q0UnFvV@1omlHwInPq@eK2wadCbGriPtUiKVtcD67qJNj60jKWSoYZlHZWn@ZxdK/VUbpal1Orro97I8LHqLcg9z3wsR3yW/8WpzA8QqWzaP1qxX0y8"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-12 13:07:16","2020-08-12 13:07:16","","","","7","","","","CC BY-SA 4.0"
"209312","2","","110037","2020-08-09 14:53:14","","1","","<h1>Processing, 111 bytes</h1>
<pre><code>size(400,128);line(0,127,a,0),line(a,0,a+d,127-s),line(a+d,127-s,a+d+64,127-s),line(a+d+64,127-s,a+d+64+r,127);
</code></pre>
<p>Used a simpler method of input compared to user41805.</p>
<h2>Output (formatted)</h2>
<p><code>0,0,90,80</code></p>
<p><a href=""https://i.stack.imgur.com/VjKEi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VjKEi.png"" alt=""enter image description here"" /></a></p>
<p><code>0,10,50,80</code></p>
<p><a href=""https://i.stack.imgur.com/DpJsj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/DpJsj.png"" alt=""enter image description here"" /></a></p>
<p><code>5,50,0,0</code></p>
<p><a href=""https://i.stack.imgur.com/rNPTl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rNPTl.png"" alt=""enter image description here"" /></a></p>
<p><code>5,50,0,80</code></p>
<p><a href=""https://i.stack.imgur.com/1woH3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1woH3.png"" alt=""enter image description here"" /></a></p>
<p><code>15,30,70,40</code></p>
<p><a href=""https://i.stack.imgur.com/BTFrn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/BTFrn.png"" alt=""enter image description here"" /></a></p>
<p><code>24,32,127,48</code></p>
<p><a href=""https://i.stack.imgur.com/xVFYC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xVFYC.png"" alt=""enter image description here"" /></a></p>
<p><code>64,64,64,64</code></p>
<p><a href=""https://i.stack.imgur.com/3F5kW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3F5kW.png"" alt=""enter image description here"" /></a></p>
<h2>Ungolfed code with formatting</h2>
<pre><code>void settings() {
  //size adjusts according to params
  size(a+d+64+r, 129);
}
void setup() {
  translate(1,0);
  background(255); 
  strokeWeight(3);
  
  //axes
  line(0,127,600,127);
  line(0,0,0,127);
  
  //graph
  stroke(53,113,9);
  line(0,127,a,0);
  stroke(228,77,40);
  line(a,0,a+d,127-s);
  stroke(26,39,232);
  line(a+d,127-s,a+d+64,127-s);
  stroke(110,27,109);
  line(a+d+64,127-s,a+d+64+r,127);
  
  //save to file
  save(&quot;a&quot;+a+&quot;d&quot;+d+&quot;s&quot;+s+&quot;r&quot;+r+&quot;.png&quot;);
}
int a=24,d=32,s=127,r=48;
</code></pre>
<p>This program will save your images to disk in the same folder.</p>
","80214","","","","","2020-08-09 14:53:14","","","","0","","","","CC BY-SA 4.0"
"209313","2","","96641","2020-08-09 15:00:14","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 33 bytes</h1>
<pre><code>%|_!1A[1A~;85W;~]~;1A[1A~85W1M;~]
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%7C_!1A%5B1A%7E%3B85W%3B%7E%5D%7E%3B1A%5B1A%7E85W1M%3B%7E%5D&amp;input=ZA%20WARUDO"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-09 15:14:36","2020-08-09 15:14:36","","","","2","","","","CC BY-SA 4.0"
"209320","2","","209314","2020-08-09 16:52:49","","5","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, <strike>70</strike> <s>68</s> 58 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;s{(s=s.scan(/[a-z]+/i).map &amp;:size).max_by{|y|s.count y}}
</code></pre>
<p><a href=""https://tio.run/##VU7BasJAEL37FYMtNUF3vYcq3tpC7z0EkU26msBmN@yM6JrEa0@9Fbz0UP/Czyn@gJ8Q3YJgH8xjZt578Owyce181LIxVgGOkGMqdDCMBdtM@8M85IUo4SHCfCP9vp4lrqpdjTw1S03gmqaNO91nqZSBlbHqfQCU5QjCSiCJhN3BVb7gxsE5/2968fQqqYeQmDUEv4eP02HfY73T4Se8HF5@sznlegFoCgnH78/guPs67vYXDqG0ZmFF4W2USXYz2v@ezBULJcE31CDK0ktB@DgW/SFKTVKn8v5uEkxWOWVRVAjtGGMzdEViFFZNvd36hNCGZpm0f@1BpLQUSrluZ8qlSLMKaqqhhHlMU2jaMw"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
<p>-20 bytes from Dingus.</p>
<p>-2 bytes from Rahul Verma.</p>
<p>-10 bytes from Dingus(again) by removing a variable.</p>
<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 90 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a{a.split(/\W+/).map(&amp;:size).inject(Hash.new(0)){|h,v|h[v]+=1;h}.sort_by{|k,v|v}[-1][0]}
</code></pre>
<p><a href=""https://tio.run/##tVnLrhy3EV1HX0EoQXQvxDuyt3JsOMjLAhLHgSB7cSMYnG7ODJV@qUmOrqIrb7PKLoA3WcR/oc8J9AP@BKWeJFtJgCCABWjkme4mq06dOnXYXvP@5bvDx@@uPnGv3C4uQ0gXD/741f0Hl7vRLRc/fRjDn/3lLkzPfJcuPnPxtJv8i4sPLi9f3Z7s@fZ0fX56/@MPPzq93sV5TV/vX766/RP8fn59ffXh0@sPnr5@d333Mz8Ms3kxr0NvTTqFaNzqTfIxxbv2jlyGP80du91ue9Mj/PitT/ei2c835uKfb/7y/Zvv7l3d@/7NPy7hC17@ag0pTEcT59Gbt3//68Xbb//29tvv4PPSLOt8XN2It6WTv2r@Tvjbb2b9cxy8wQgn45YFL11c/uwTd/9B9FPyU@d/8uNPLz59EdLp4cPRTS@vrq6@ji/H/TzEV69vv/mGwpxXP5qwxDyafh7m1cSQjBt9sqabpwhQ@pRX4/qwhNhhyB6A35nfzes@wC3jOPezcblL8Kyfwrgzn@dhcObgujCEGPQ7RN@vHtLGdc9ugGvm4PHT53arnfm5nzzk5A@H0AXcfHBdBizDHpaAOId5D/WDB@Pcu8FH2MGN5nmGX0aXV0QkGb/ChxvC8wzXoh8Xv5rJd/L3efY78wUUE5GK8M2c3D4kNyUzUmIJlkkBLwCYEBns7xM8KP8x4r7Z9Zjm6GHDzkCgCyZzBBq4qACFCe5NGOwA4a/zznwJ18M@D5AIMKALfYZNOUNKwa1dhmduwohbDT4cIGsARVJxzVPRLcFPtqR5hlAnlwiH4@QE@dEcwgQ7RjPlqTNLXnO0GFgeIMsuQPgDsWCZY/ZA5DDtzK9z7LwCTKANjMIZUIILcBkIkfRGirzWlba3AF0PJc7HAKXAAJUK0R0DYmKVcnCfhxWASiVjq4AybiZgBfsA2M99mC2WuOXnGVlZapAUgC9W57EblGnrDJu6rstjBIblZM5uDZgV/WOh@AOWxwPMg5@b59fTPGGJyrNTiIOZZi3vzvxidXDZjIHR3Jnfr13Q9aEqM5Jpofrsc4kRgurh7@JWiD144h9S0sIjACymtoY@dMAXgDVHBVzh0kJIgk7xVv4BLmY5gTyl1UH9AX1MaobqB9hmxXYCbpwgbCulPazQ5AHLRBg2VIe1YFnuMNnfinQA/895WHJyycN9JwwYCODyEZIGZUBxgHLhN@S3ZcIkaEu4QLQcwhEewbJK6R4TKRhnKMuAdIEl@jACSkWtHOjUAtmFLCqGEfoOYI7l9y6vEdFzMUJMXDNpr5taUGT9I8DkCEKxQD@SgMC3wp1U9eZxjlBJKFz0jUwxXvxIAVGaSuuh9bIsQhSNxEd0hjaBaxAX0LA0JFaIOlb7UXkO99TtKUzGDfuVBRDYBQJQOz0iknh/j/lyTNhKHAJpwza9pskstV7p0I0IstYjbbGYnJviz6Wllu1BsYj9GJyUnKjgb4CXJxdBkhmKWmd5ZKZ2AjoD/QeYI5E0/HPcDvqYruroQr1XckHv4CoiW4BNoi2a1q7gLHk4h8mBmoSzX1dXp1yDASsNFnZNDsHgOC1V41mOaZZLyFyoWq8jQRibVyBJYV30LWMbhPocRFNKVrXUFINlStZ68hRpcXRlaMBkQ1GTkpQZW9bmTiXNQwIxXHXSTDTIm9FF63HvL2sYoYKw/wFsQK3VkHVsMsIIsBC6y3vgi0PaOf@RSBoxFXaw6iZKuEQRW3UMy4gBtKnmVBtIwn00NRNRxhc/9ssZO0S0mWuGP5BCqILinGj6WMZQkddfJWqsRMVOAePF7qBdhXPFsHC7woKG5nE3r@hGCEIdj7A9hCVTtHB/U12eoBy6Lm0lekREvZiibZlqOPMaHKjQlFu1OEzMouQjuhzmAfjQc@gdNRTkSlfqKLaNdFBHrzmtyK6Ns9LRyQ@XwUXehRmKK5FsaqewH2HXVkZOtRfCrBnSQ2V9klpN@DdBLhw/@JVx3SqcdJwlY4v9WmRAjablKQTrI9GaEqLftf@pQWmmkloCnq31gYmmhqYvMi6QaOF0xrsyFeFeqqVYSdYXnOE96W11h@d5yGlB4U/ST6n2/Jfh7HDqcR70aat0Y2iVJlgOW5eDvUiQilLpBNV/afcCcJPKhgoQr@ob9yNNteJE@PhQ9ijTrhD1vyxbxvWy2UxpqtjL4YBckG38Spj0gJAh55pErSu0EPdDlSCmbwDFHcjDtemz8y0az@ZeqiwjC1e9qdNDY6sS1prbEkj14SIWZRaL/yWn1Zh7r9XeDw7ojpOx5@OSdjbxikYwiqYeFRpS1ynPDVy@q5FUu8fAYrawRkG7wGwp@hIWjYhaT5lHaIeKpcXQtq1aG5LEs1U9rqDl4xN/8BSR8w6uXCqCo5paFDiPgZBqn6Df@BSIWwGnknci5TG9xzhZuxwCCP2CDBWglIZu2hxwWcPZ1IpX2sifxlkPkdIgLPYgxNgpon8b0rcTUU99qN044RGTMqzem24cRCNtjRdGsbHY/kyrqn56aCKEVcxaJUZR4LJXXvOs4UlbPCA3V7Ub1MxyoEcJr@OOcFJbQKNt62jlxFtPi2zeea3iSZRH71WVUdBTdZtqlYIbzMc2Sok@M0d130W81ANI3wF8TU/pAZhHRPEJuUjVRsjKPJKT0ZNUGVGusa1l5RFisO7UsYnYKfnQlsYkivtD@Tr2SAJQff@DZ02qo4LDbGjc5jwxI0K/sUNkT/@QmVxFeolQXpkl1l3sfx169T1EYRVkxrEpKEXd8ZjBQQU9nhUbwtaYDzB80OeHpeBtvDJiWzWm57QzXXl/wsZJOgmy1tcSKp5bGZS7K2DlCKPBNK8pUOWOXkGWQbdtGsWoMdDEQjxSsAGRx8TKNX6jtAGd@/hUz8f9@iKHftWx0JyQSrfS@x9UUMRdmrCREUkXTVDzYgdHz6ZNWPSbJNQWkLrXwYMtJ5X7Yd8ACv2bdfribPt622bACUr81rJiYBtvSXqebWE6sQzOitBze7qhquWknrMP@KophiYcK/OctpLDspwrAelqC/k61xTwl91kXkPW2sT@phG4tpPwLaHypby6bbSetnRKeSGciAw1GxsWXKvIFElIruqH/ku5z7lYDpy7tYTTdKfVrcSoCMXVQvGD29d9tCLqIWs9S3XNBEekHK@aIYW/qulFgX9M1lBVEQPnVOT2MbQznF/i0BszNv1ObYOjF/Ry4lPn97/4mEbsqTFVR0n02ScVPy0vyp9UyapWW08VjEIxgUxwfQGsfJAWFqir7aVjb2Uu@1AmLcbatoZQVMOFcpGyKrSsK80MwZXbwdaJE@bxXl9klr7CechjGo1@eQOIulRfEdUR7XTMCnCh9Zd0YGA6Uk6FqPz@ob7wQc3it9KaiCspQilsozNZx7XYbiLoxkbrS44yr4uzEDZLn0jzVu/A3U2nCypfPQNJd@/M//0/itoaVltGsNKcv/t05113gkXN7bPbOz9azOH62dM78Mi7fwE"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-04 02:37:47","2020-09-04 02:37:47","","","","5","","","","CC BY-SA 4.0"
"209355","2","","33150","2020-08-10 06:45:44","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 2x2 = 4</h1>
<pre><code>0:
23
</code></pre>
<p>-2 characters from Bubbler.</p>
<p>The position of the <code>:</code> operator determines when things are output, so we can abuse that and position the numbers around it.</p>
<p>Bubbler's modification pops the existing 1 from the stack, saving two bytes.
<a href=""https://8dion8.github.io/MAWP/?code=0%3A%0A23%0A%0A%25%25%20stack%20cleanup%0A%0A%3A3%0A02%0A%0A32%0A%3A0%0A%0A20%0A3%3A&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-10 06:53:05","2020-08-10 06:53:05","","","","0","","","","CC BY-SA 4.0"
"209361","2","","80062","2020-08-10 08:53:47","","0","","<h1>Processing, 193 bytes</h1>
<pre><code>byte a[]=loadBytes(&quot;s.pde&quot;);noStroke();int x=0,y=0;for(int k=0;k&lt;a.length%3;k++){append(a,byte(0));}for(int i=0;i&lt;a.length-2;i+=3,x++){if(x&gt;0){x=0;y+=1;}fill(a[i],a[i+1],a[i+2]);rect(x,y,1,1);}
</code></pre>
<h2>Original</h2>
<p><a href=""https://i.stack.imgur.com/qOTEm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qOTEm.png"" alt=""enter image description here"" /></a></p>
<h2>Resized</h2>
<p><a href=""https://i.stack.imgur.com/mFAXK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mFAXK.png"" alt=""enter image description here"" /></a></p>
<p>Even with Processing's builtins, this was very difficult.</p>
","80214","","","","","2020-08-10 08:53:47","","","","0","","","","CC BY-SA 4.0"
"209365","2","","193315","2020-08-10 10:52:32","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 12 bytes</h1>
<pre><code>%|0~[;]~0~|%
</code></pre>
<p>It would have been cute to have a palindromic solution.</p>
<p>The program inserts a zero at the end of the string and prints it normally, or it does the opposite.
<a href=""https://8dion8.github.io/MAWP/?code=%25%7C0%7E%5B%3B%5D%7E0%7E%7C%25&amp;input=hello%20there"" rel=""nofollow noreferrer"">Try it!</a></p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%7C%7E0%7E%5B%3B%5D%7E0%7C%25&amp;input=hello%20there"" rel=""nofollow noreferrer"">!ti yrT</a></p>
","80214","","92080","","2020-08-10 11:00:39","2020-08-10 11:00:39","","","","0","","","","CC BY-SA 4.0"
"209368","2","","203725","2020-08-10 12:56:42","","0","","<h1>Processing, 463 bytes</h1>
<pre><code>size(500,500);String u=&quot;&quot;;PImage p=loadImage(u);p.resize(p.width/2,p.height/2);noStroke();color[]c={#ff0000,#00ff00,#0000ff,#00ffff,#ff00ff,#ffff00,#ffffff,0};p.loadPixels();for(int i=0;i&lt;p.width;i++){for(int j=0;j&lt;p.height;j++){float[]d=new float[8];color x=p.get(i,j);for(int k=0;k&lt;8;k++)d[k]=sqrt(sq(red(x)-red(c[k]))+sq(blue(x)-blue(c[k]))+sq(green(x)-green(c[k])));int b=0;for(int l=0;l&lt;8;l++){if(d[l]&lt;=d[b]){b=l;}}fill(c[b]);rect(i,j,1,1);}}save(u+&quot;1.png&quot;);
</code></pre>
<p>Takes image location, saves pixel art as image1.png.
<a href=""https://i.stack.imgur.com/4564D.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4564D.png"" alt=""enter image description here"" /></a><a href=""https://i.stack.imgur.com/J1KAP.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/J1KAP.jpg"" alt=""enter image description here"" /></a>
Image from <a href=""https://www.beeple-crap.com/"" rel=""nofollow noreferrer"">beeple.</a></p>
","80214","","","","","2020-08-10 12:56:42","","","","0","","","","CC BY-SA 4.0"
"209372","2","","113448","2020-08-10 13:35:29","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 36 bytes</h1>
<pre><code>%@_1A[1A~25WWM~]%[{1A{1M}&lt;0:.&gt;}2A]1:
</code></pre>
<h2>Explanation</h2>
<p>It uses the same logic as all the other programs, but MAWP does not have a modulo operator.</p>
<p>The workaround is repeately deducting 2 from the number until we reach 0 or 1.</p>
<pre><code>%@_1A[1A~25WWM~]% snippet used for inputting multi digit numbers
[                 loop if top of stack != 0
 {1A{1M}&lt;0:.&gt;}    if number-1=0 print 0 and end program
2A]               subtract 2 from the number
1:                once loop ends, print 1
</code></pre>
<p>4 digit and higher numbers take <em>very</em> long to check in the online interpreter.</p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%40_1A%5B1A%7E25WWM%7E%5D%25%5B%7B1A%7B1M%7D%3C0%3A.%3E%7D2A%5D1%3A&amp;input=11"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-10 13:35:29","","","","2","","","","CC BY-SA 4.0"
"209405","2","","62686","2020-08-11 07:46:46","","1","","<h1>Java + Processing, 198 bytes</h1>
<pre><code>PImage p;void settings(){p=loadImage(&quot;peter-olexa-Ejgx4k3iryg-unsplash.jpg&quot;);size(p.width,p.height);}void setup(){p.loadPixels();p.pixels=sort(p.pixels);p.updatePixels();image(p,0,0);save(&quot;2.jpg&quot;);}
</code></pre>
<p>Outputs image as <code>1.jpg</code>.</p>
<p><a href=""https://i.stack.imgur.com/r0PuD.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/r0PuD.jpg"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/clCMd.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/clCMd.jpg"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/KwRhx.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KwRhx.jpg"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/5t1O7.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5t1O7.jpg"" alt=""enter image description here"" /></a></p>
","80214","","","","","2020-08-11 07:46:46","","","","0","","","","CC BY-SA 4.0"
"209411","2","","194299","2020-08-11 10:46:11","","0","","<h1>Java + Processing, 441 bytes</h1>
<pre><code>void star(float x,float y,float r1,float r2){float t=TWO_PI/5;beginShape();for(float a=0;a&lt;TWO_PI;a+=t){vertex(x+cos(a)*r2,y+sin(a)*r2);vertex(x+cos(a+t/2.0)*r1,y+sin(a+t/2.0)*r1);}endShape();}void setup(){size(166,100);background(#cc0000);stroke(255);fill(#002d65);strokeWeight(2.1);circle(77,50,50);rect(154,-3,13,103);noStroke();fill(255);for(int i=0;i&lt;3;i++){pushMatrix();translate(77,50);rotate(i*2*PI/3);star(-5,12,4,11);popMatrix();}}
</code></pre>
<p>5 pointed star function modified from Processing examples.</p>
<p><a href=""https://i.stack.imgur.com/FO1kg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FO1kg.png"" alt=""enter image description here"" /></a></p>
","80214","","","","","2020-08-11 10:46:11","","","","0","","","","CC BY-SA 4.0"
"209435","2","","91154","2020-08-12 04:20:40","","1","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 29 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>f=-&gt;a{a&lt;1?2:(b=f[a-1])*~-b+1}
</code></pre>
<p>+2 for adding <code>f=</code> to byte count.</p>
<p>-2 from Dingus's suggestion.</p>
<p><a href=""https://tio.run/##KypNqvz/P81W1y6xOtHG0N7ISiPJNi06UdcwVlOrTjdJ27D2f4FCWrRJ7H8A"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-12 06:27:32","2020-08-12 06:27:32","","","","1","","","","CC BY-SA 4.0"
"209437","2","","190223","2020-08-12 05:18:51","","3","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 18 bytes</h1>
<pre><code>%|092M3W!;~[;~!;~]
</code></pre>
<p><strong>Dion's solution.</strong></p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%7C092M3W!%3B%7E%5B%3B%7E!%3B%7E%5D&amp;input=Hello%20there"" rel=""nofollow noreferrer"">Try it!</a></p>
<h3>Older solution(19 bytes):</h3>
<pre><code>%|0~[65W3M;;]65W3M;
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%7C092M3W!%3B%7E%5B%3B%7E!%3B%7E%5D&amp;input=Hello%20there"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-12 05:42:51","2020-08-12 05:42:51","","","","4","","","","CC BY-SA 4.0"
"209438","2","","111380","2020-08-12 05:29:47","","2","","<h1><a href=""https://www.perl.org/"" rel=""nofollow noreferrer"">Perl 5</a> + <code>Win32::Clipboard</code>, 41 bytes</h1>

<pre class=""lang-perl prettyprint-override""><code>$CLIP=Win32::Clipboard();
$CLIP-&gt;Empty();
</code></pre>
<p><a href=""https://tio.run/##K0gtyjH9X1qcqhCemWdsZGXlnJNZkJSfWJRi/V/F2cczwBZdXEPTmgsso2vnmltQUgnk//8PAA"" rel=""nofollow noreferrer"" title=""Perl 5 – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-12 05:29:47","","","","2","","","","CC BY-SA 4.0"
"209442","2","","195268","2020-08-12 06:11:08","","2","","<h1><a href=""https://www.perl.org/"" rel=""nofollow noreferrer"">Perl 5</a>, 72 bytes</h1>

<pre class=""lang-perl prettyprint-override""><code>$n=1;print substr(Math::BigFloat-&gt;bpi()**(1/$n++),0,21).$/ while($n&lt;13);
</code></pre>
<p>Even using <span class=""math-container"">\$\pi\$</span> from BigFloat, it doesn't seem to exactly match the given outputs. I'm sure it's truncated properly, though.</p>
<p><a href=""https://tio.run/##K0gtyjH9X1qcquCbWJJhZRVSlJluzYXgO2Wmu@XkJ5ZYc/1XybM1tC4oyswrUSguTSouKdJAVaJrl1SQqaGppaVhqK@Sp62tqWOgY2Soqaeir1CekZmTqqGSZ2NorGn9/z8A"" rel=""nofollow noreferrer"" title=""Perl 5 – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-12 06:11:08","","","","1","","","","CC BY-SA 4.0"
"209446","2","","118444","2020-08-12 06:40:45","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, <strike> 4 </strike> 20 bytes</h1>
<pre><code>%@_1A[1A~25WWM~]~?1:
</code></pre>
<p>Responds to numbers which have more than 1 digit.</p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%3Cspan%20style%3D%22font-size%3A%2021.6px%3B%22%3E%25%40_1A%3C%2Fspan%3E%3Cspan%20style%3D%22font-size%3A%2021.6px%3B%22%3E%5B1A%7E25WWM%7E%5D%7E%3F1%3A%3C%2Fspan%3E&amp;input=2"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","78850","","2020-08-12 07:42:39","2020-08-12 07:42:39","","","","6","","","","CC BY-SA 4.0"
"209447","2","","86075","2020-08-12 06:54:38","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 13 bytes</h1>
<pre><code>25W[1A~!:1M~]
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/?code=25W%5B1A%7E!%3A1M%7E%5D&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-12 06:54:38","","","","2","","","","CC BY-SA 4.0"
"209461","2","","53015","2020-08-12 10:27:16","","2","","<h1>Java + Processing</h1>
<p>I saw this challenge and immediately had to try it.</p>
<p>My algorithm isn't too well optimized, so the output is a bit choppy.</p>
<pre><code>color[] palette={#000000,#FFFFFF,#C0C0C0,#808080,#7E0308,#FC0D1B,#FFFD38,#807F17,#0F7F12,#29FD2E,#2DFFFE,#11807F,#020C7E,#0B24FB,#FC28FC,#7F0F7E,#807F44,#FFFD88,#2AFD85,#044040,#1783FB,#85FFFE,#8184FC,#06427E,#7F25FB,#7F400D,#FD8049,#FC1681};
PImage p;
int currTime;
int sTime=0;
int yPix;
void settings() {
  p=loadImage(&quot;arun-clarke-V-bkeYsTflY-unsplash.jpg&quot;);
  yPix = 0;
  
  size(p.width,p.height);
}
void setup() {
  frameRate(p.width);
    noStroke();
  rectMode(CENTER);
  //image(p,0,0);
  //for(int i=0; i&lt;palette.length;i++) {
  //  fill(palette[i]);
  //  square(i*20,0, 20);
  //}
}

void draw() {

    
    int x =  int(random(p.width));
    int y = int(random(p.height));
    color randPix = p.get(x,y);
    float[] d = new float[palette.length];
    for(int k=0;k&lt;palette.length;k++) {
    d[k]=abs(red(randPix)-red(palette[k]))+abs(blue(randPix)-blue(palette[k]))+abs(green(randPix)-green(palette[k]));
    }int b=0;
    for(int l=0;l&lt;palette.length;l++){
      if(d[l]&lt;=d[b]){
        b=l;
      }
    }
    fill(palette[b]);
    rect(x,y,2,4);
    rect(x,y,4,2);
  

 
}
void mouseClicked() {
  noLoop();
  save(&quot;c.png&quot;);
}
</code></pre>
<h1>Examples</h1>
<p><a href=""https://i.stack.imgur.com/i3HQD.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/i3HQD.jpg"" alt=""enter image description here"" /></a><a href=""https://i.stack.imgur.com/hjxrp.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hjxrp.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/0ZV3o.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0ZV3o.jpg"" alt=""enter image description here"" /></a><a href=""https://i.stack.imgur.com/u7O1U.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/u7O1U.png"" alt=""enter image description here"" /></a></p>
","80214","","","","","2020-08-12 10:27:16","","","","0","","","","CC BY-SA 4.0"
"209462","2","","139824","2020-08-12 10:39:07","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 13 bytes</h1>
<pre><code>%@!1A[1A~!~]%
</code></pre>
<p>-15 bytes after integer input rework (Dion).</p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%40!1A%5B1A%7E!%7E%5D%25&amp;input=7"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-13 05:58:55","2020-08-13 05:58:55","","","","1","","","","CC BY-SA 4.0"
"209463","2","","119854","2020-08-12 10:50:40","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, <strike>40</strike> <s>25</s> 22 bytes</h1>
<pre><code>%@![~!~1A]%1A[1A~W~]%:
</code></pre>
<p>-15 from Dion's improved input methods.
-3 after modifying first loop to happen x+1 times.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%25%40!%5B%7E!%7E1A%5D%251A%5B1A%7EW%7E%5D%25%3A&amp;input=4"" rel=""nofollow noreferrer"">Try it!</a></p>
<h3>Explanation</h3>
<pre><code>%@                    Gets multi digit input
![~!~1A]%             x gets cloned x+1 times in the stack
1A[1A~W~]%:           multiplies top 2 numbers x-1 times
</code></pre>
","80214","","80214","","2020-08-13 13:02:24","2020-08-13 13:02:24","","","","10","","","","CC BY-SA 4.0"
"209465","2","","88653","2020-08-12 12:37:10","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 26 bytes</h1>
<pre><code>%25W[25W[~67W;~1A]%25W;1A]
</code></pre>
<p>This was interesting.</p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%2525W%5B25W%5B%7E67W%3B%7E1A%5D%2525W%3B1A%5D&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-12 12:37:10","","","","2","","","","CC BY-SA 4.0"
"209476","2","","105781","2020-08-12 16:16:47","","4","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 197 bytes</h1>
<p>Here's a funny solution.</p>
<pre><code>__________________________________________________________________________________________________________________________;;;;;;;;;;;;;;;;;;;;;;;;;;%%%%%%;;;;;;;;;;;;;;;;;;;;;;;;;;%%%%%%%;;;;;;;;;;
</code></pre>
<p>MAWP almost exclusively uses alphanumeric characters to print values, so instead we spam the <code>_</code>(stack length) operator to generate ASCII values till 122.</p>
<p>The rest is printing the required characters and removing the unnecessary ASCII values. The whole thing is printed in reverse to conserve bytes.</p>
<p><a href=""https://8dion8.github.io/MAWP/?code=__________________________________________________________________________________________________________________________%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%25%25%25%25%25%25%3Cspan%20style%3D%22font-size%3A%2021.6px%3B%22%3E%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%25%25%25%25%25%25%25%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3C%2Fspan%3E&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-12 16:16:47","","","","0","","","","CC BY-SA 4.0"
"209494","2","","91725","2020-08-13 04:15:35","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 38 bytes</h1>
<pre><code>%@!!2P2WA{~[67W5M;1A].}~[99W25W1MM;1A]
</code></pre>
<p>Made using Dion's modulus function from <a href=""https://codegolf.stackexchange.com/a/209401/80214"">here.</a></p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%3Cspan%20style%3D%22font-size%3A%2021.6px%3B%22%3E%25%40!!2P2WA%7B%7E%5B67W5M%3B1A%5D.%7D%7E%5B99W25W1MM%3B1A%5D%3C%2Fspan%3E&amp;input=5"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-13 04:15:35","","","","0","","","","CC BY-SA 4.0"
"209500","2","","118819","2020-08-13 06:27:23","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 18 bytes</h1>
<pre><code>%@!!2P2WA{M:}&lt;1A:&gt;
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%40!!2P2WA%7BM%3A%7D%3C1A%3A%3E&amp;input=3"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-13 06:27:23","","","","0","","","","CC BY-SA 4.0"
"209504","2","","607","2020-08-13 07:29:08","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 31 bytes</h1>
<pre><code>%@&lt;:.&gt;!!1A[1A~!1A~]%1A[1A~W~]%:
</code></pre>
<p>125! takes around 11 seconds, so it fulfills the criteria.</p>
<p><a href=""https://8dion8.github.io/MAWP/?code=%25%40%3C%3A.%3E!!1A%5B1A%7E!1A%7E%5D%251A%5B1A%7EW%7E%5D%25%3A&amp;input=0"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-13 07:29:08","","","","7","","","","CC BY-SA 4.0"
"209509","2","","187816","2020-08-13 08:50:15","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 59 bytes</h1>
<pre><code>%|~88W7MA{88W7M;99W65WM!;;25W25WW;}&lt;88W2M;99W44WM;25W25WW;&gt;
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%25%7C%7E88W7MA%7B88W7M%3B99W65WM!%3B%3B25W25WW%3B%7D%3C88W2M%3B99W44WM%3B25W25WW%3B%3E&amp;input=Bad"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-13 08:50:15","","","","0","","","","CC BY-SA 4.0"
"209511","2","","181627","2020-08-13 09:14:21","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 2 bytes</h1>
<pre><code>|;
</code></pre>
<p>Outputs top of stack.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%7C%3B&amp;input=Hello"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-13 09:14:21","","","","0","","","","CC BY-SA 4.0"
"209545","2","","188988","2020-08-14 04:48:28","","3","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 8 bytes</h1>
<pre><code>|0~[!;;]
</code></pre>
<p>Clones each character, pops from stack twice.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%7C0%7E%5B!%3B%3B%5D&amp;input=Hello"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-14 04:48:28","","","","0","","","","CC BY-SA 4.0"
"209548","2","","99913","2020-08-14 05:49:43","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 700 bytes</h1>
<p>It would've been <em>real</em> dandy if this question was about 4 characters.</p>
<pre><code>499WA;48W!!;;;499WA;48W!!!!!;;;;;;188WM!!;;;48W!!!!!!;;;;;;;299WA!!;;;48W!!!!!;;;;;;699WM;48W!!;;;699WM;48W!!!!;;;;;199WA!!!;;;;25W;499WA!;;48W;499WA!;;48W!!!!;;;;;188WM;48W!!;;;188WM;48W!!!!;;;;;299WA;48W!!;;;299WA;48W!!!!;;;;;699WM;48W!!;;;699WM;48W!!!!;;;;;199WA;48W!!;;;199WA;25W;499WA;48W;499WA;48W;499WA;48W!!!!;;;;;188WM!!!!;;;;;48W!!!!;;;;;299WA;48W!!;;;299WA;48W!!!!;;;;;699WM;48W!!;;;699WM;48W!!!!;;;;;199WA!!!;;;;25W;499WA;48W!!;;;499WA;48W!!!!;;;;;188WM;48W!!;;;188WM;48W!!!!;;;;;299WA;48W!!;;;299WA;48W!!!!;;;;;699WM;48W;699WM;48W;699WM;48W!!!!;;;;;199WA;25W;499WA;48W!!;;;499WA;48W!!!!;;;;;188WM;48W!!;;;188WM;48W!!!!!;;;;;;299WA!!;;;48W!!!!!!;;;;;;;699WM;48W;699WM;48W!!!!!;;;;;;199WA;
</code></pre>
<p>Made with the help of <a href=""https://tio.run/##yy9OTMpM/f//6L7Aw@3nth6eeLi1@NCO03OMHnX0uoQ8atjpZ2oJJDMDMg@tVA8/tOrw6oBD6wJ0D6171DAv3Nfr8OrDCzITLHVd0jMfNSyz9A33OrTSL/Tw6kPr/CJ01X0PrT60OtYr6FHDIpPDG00eNbUcWhN9eC6Qa3p4ydG9Zof3JYWAzXnUsBAocniHF1AqwuXoJCBlZH5h0/G557a6pJuY@ZmYAN1weAXIIRDzwx91LsgEW3J4jboj0BIlQ0tfI6D9SoZmx@d6Hm4/tjXg3MbDK9StD@81PLxVz/r/f4/UnJx8HYXw/KKcFEUA"" rel=""nofollow noreferrer"">Kevin Cruijssen's MAWP string generator</a> and a <em>lot</em> patience and exclamation marks.</p>
<h2>Output:</h2>
<pre><code>M   M      AAA       OOO      W   W     PPPP
MM MM     A   A     O   O     W   W     P   P
M M M     AAAAA     O   O     W   W     PPPP
M   M     A   A     O   O     W W W     P
M   M     A   A      OOO       W W      P
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=499WA%3B48W!!%3B%3B%3B499WA%3B48W!!!!!%3B%3B%3B%3B%3B%3B188WM!!%3B%3B%3B48W!!!!!!%3B%3B%3B%3B%3B%3B%3B299WA!!%3B%3B%3B48W!!!!!%3B%3B%3B%3B%3B%3B699WM%3B48W!!%3B%3B%3B699WM%3B48W!!!!%3B%3B%3B%3B%3B199WA!!!%3B%3B%3B%3B25W%3B499WA!%3B%3B48W%3B499WA!%3B%3B48W!!!!%3B%3B%3B%3B%3B188WM%3B48W!!%3B%3B%3B188WM%3B48W!!!!%3B%3B%3B%3B%3B299WA%3B48W!!%3B%3B%3B299WA%3B48W!!!!%3B%3B%3B%3B%3B699WM%3B48W!!%3B%3B%3B699WM%3B48W!!!!%3B%3B%3B%3B%3B199WA%3B48W!!%3B%3B%3B199WA%3B25W%3B499WA%3B48W%3B499WA%3B48W%3B499WA%3B48W!!!!%3B%3B%3B%3B%3B188WM!!!!%3B%3B%3B%3B%3B48W!!!!%3B%3B%3B%3B%3B299WA%3B48W!!%3B%3B%3B299WA%3B48W!!!!%3B%3B%3B%3B%3B699WM%3B48W!!%3B%3B%3B699WM%3B48W!!!!%3B%3B%3B%3B%3B199WA!!!%3B%3B%3B%3B25W%3B499WA%3B48W!!%3B%3B%3B499WA%3B48W!!!!%3B%3B%3B%3B%3B188WM%3B48W!!%3B%3B%3B188WM%3B48W!!!!%3B%3B%3B%3B%3B299WA%3B48W!!%3B%3B%3B299WA%3B48W!!!!%3B%3B%3B%3B%3B699WM%3B48W%3B699WM%3B48W%3B699WM%3B48W!!!!%3B%3B%3B%3B%3B199WA%3B25W%3B499WA%3B48W!!%3B%3B%3B499WA%3B48W!!!!%3B%3B%3B%3B%3B188WM%3B48W!!%3B%3B%3B188WM%3B48W!!!!!%3B%3B%3B%3B%3B%3B299WA!!%3B%3B%3B48W!!!!!!%3B%3B%3B%3B%3B%3B%3B699WM%3B48W%3B699WM%3B48W!!!!!%3B%3B%3B%3B%3B%3B199WA%3B&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-14 05:49:43","","","","2","","","","CC BY-SA 4.0"
"209555","2","","209529","2020-08-14 08:48:18","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 173.69 + ? + ? + ? points</h1>
<pre><code>%[25W|]%%0~%[{![1A1:]%1A[1A76W1M;]%69W5M;}]
</code></pre>
<p>This submission only uses the <code>1</code> and <code>+</code> and <code>;</code> instructions. Not very efficient, but works reliably.</p>
<p><code>Hello, World!</code> all by itself took 10 minutes to run and give output. The result was 2258 bytes, and the rest of the strings are way bigger.</p>
<p>I think it's better for my computer not to run any more of the test cases.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%25%5B25W%7C%5D%25%250%7E%25%5B%7B!%5B1A1%3A%5D%251A%5B1A76W1M%3B%5D%2569W5M%3B%7D%5D&amp;input=Hello%2C%20World!"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-16 10:37:34","2020-08-16 10:37:34","","","","8","","","","CC BY-SA 4.0"
"209594","2","","120052","2020-08-15 07:45:44","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 29 bytes</h1>
<pre><code>|!;!;!;25W;!;84W;!;25W;!;!;;.
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%7C!%3B!%3B!%3B25W%3B!%3B84W%3B!%3B25W%3B!%3B!%3B%3B.&amp;input=E"" rel=""nofollow noreferrer"">Try it!</a></p>
<p>-6 bytes from Dion's straightformard solution.</p>
<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 35 bytes</h1>
<pre><code>%|7[1A~!~]////25W//84W//25W////~[;]
</code></pre>
<p>Manually shifting the stack was more practical than trying to loop through it and make a box.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%7C!%3B!%3B!%3B25W%3B!%3B84W%3B!%3B25W%3B!%3B!%3B%3B.&amp;input=E"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-09-30 09:21:21","2020-09-30 09:21:21","","","","4","","","","CC BY-SA 4.0"
"209598","2","","209579","2020-08-15 08:46:21","","1","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, <s>44</s> 40 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a,b{a.to_s.chars.rotate(-b).join.to_i}
</code></pre>
<p>-4 from Dingus.</p>
<p><a href=""https://tio.run/##KypNqvyfZvtf1y5RJ6k6Ua8kP75YLzkjsahYryi/JLEkVUM3SVMvKz8zDySVWfu/oLSkWCEt2tDIWMcwlguJZ4TCM0bhmSB4OmbG5gieAbIhBgbIhqBwUHlAEw1iubi4/gMA"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-15 09:27:16","2020-08-15 09:27:16","","","","0","","","","CC BY-SA 4.0"
"209624","2","","186548","2020-08-16 06:30:02","","3","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 69 bytes</h1>
<pre><code>%@!0//[!1A]%[1A[1A84W;]%99W25WM1M;25W;]%[!1A]~[1A[1A84W;]%67W5M;25W;]
</code></pre>
<p>I am not going to golf this further bcause funny number. Sorry, guys.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%25%40!0%2F%2F%5B!1A%5D%25%5B1A%5B1A84W%3B%5D%2599W25WM1M%3B25W%3B%5D%25%5B!1A%5D%7E%5B1A%5B1A84W%3B%5D%2567W5M%3B25W%3B%5D&amp;input=5"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-16 06:30:02","","","","1","","","","CC BY-SA 4.0"
"209625","2","","175277","2020-08-16 07:46:33","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 24 bytes</h1>
<pre><code>4!:2W!:2W!1A!::7M!:2W4A:
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=4!%3A2W!%3A2W!1A!%3A%3A7M!%3A2W4A%3A&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-16 07:46:33","","","","1","","","","CC BY-SA 4.0"
"209633","2","","35177","2020-08-17 02:03:34","","3","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 7 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⌊2⍟.5∘⌈
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT////1FPl9Gj3vl6po86Zjzq6fif9qhtwqPevkddzY961zzq3XJovfGjtomP@qYGBzkDyRAPz@D/aQpmJlxpCgZAbGZqamwKpc0A"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 13 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍵=0:¯1⋄⌊2⍟⍵}
</code></pre>
<p>My first APL answer!</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v/pR71ZbA6tD6w0fdbc86ukyetQ7HyhU@z/tUduER719j7qaH/WuedS75dB640dtEx/1TQ0OcgaSIR6ewf/TFMxMuNIUDIDYzNTU2BRKmwEA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a> (Courtesy of <a href=""https://codegolf.stackexchange.com/users/43319/ad%C3%A1m"">Adám</a>.)</p>
","80214","","80214","","2020-09-20 10:31:35","2020-09-20 10:31:35","","","","5","","","","CC BY-SA 4.0"
"209634","2","","195592","2020-08-17 02:14:07","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 5 bytes</h1>
<pre><code>|M2P;
</code></pre>
<p>Input must be given without any separator.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%7CM2P%3B&amp;input=az"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-17 02:14:07","","","","3","","","","CC BY-SA 4.0"
"209638","2","","138286","2020-08-17 08:22:17","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP / 1+</a>, 71 bytes</h1>
<pre><code>1%(|&quot;+1%+)1%()&quot;+&quot;+&quot;+()();1%()&quot;+&quot;+&quot;+()&quot;+;1%()&quot;+&quot;+&quot;+&quot;+();77W2W1A!!;1M;2M;
</code></pre>
<p>Uses the % operator to remove all the stray 1's from the 1+ program. Rounded brackets are immediately skipped since there is no 0 in the stack for MAWP.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=1%25(%7C%22%2B1%25%2B)1%25()%22%2B%22%2B%22%2B()()%3B1%25()%22%2B%22%2B%22%2B()%22%2B%3B1%25()%22%2B%22%2B%22%2B%22%2B()%3B77W2W1A!!%3B1M%3B2M%3B&amp;input="" rel=""nofollow noreferrer"">Try it!</a> (MAWP)</p>
<p><a href=""https://tio.run/##jVVtb5tIEP7uXzHGqoAa8@KkSg/HH5JKra5KrShtVZ0oRRjWNTpYuN0lL2r7291ZMAbs2FcnQruzzzzzurPFk1jndLrZjGAtRMFdyypCFqVPInwkqSnKbJkyM8ozq8i5sF5f2K9fXTjnZ85fVkIFYQUj@J2scjZxJgmdFBXfYDAaWiVn1jKhFqH3sBWPwBlDRw/XcNsc3VZ24ZM0DBa8J4xkcksNmNrOOSJukojQiEDC4c0buP5n8vEKzk0bwW@vbsAxz3D1bvEZ3t3e3J8NVizPIAhWpSgZCQJIsiJnAgqGDqCURiJBu1spf@K1QpSnKamOeKMRk/9KMhhwA3gM83qr6Qb8@DUYxGQFOSVFWnKNI3YOC9zq7gDwl6yA5sjNRL3fylJCNbRnhuz7vQ7DOUzbY/mrPNSUzzz8TlxQYAwN2rN93CngrZKUgMhhSYA8kqgUJPYVvccidchjIjSnlSe0QA/zouOA5/gGqExtQSx8QBBCTUbCWOtpm1Gac7KVkZSjfzUcY6xk1WedGXBnwJILA64NWOC558t8GW3ybPyvwNg6EMlGQKJemiKYz0HV1H5yrmE8B6cnQjtmWGBQsbbQDxn0A4bJPsOdJzmKvNB0X5awd4hE13AJdp@lU6i/s2WYhtiYMSxZGP1LBB/uFaNXkOkzTo5UCGmMhnBju5jBZyJatKFXPg3nXaf@zJl9J6rPwoAok72LRXkbYlUr6cNaNtkCQ5cNi9XRW2O57CMUeQu/G4vsdmRy9/Mn4Riko7rAm8CcfoZI2uLGXRyv6yJvQb06rvfyOb2X/6@n9PS8ieMfx1oVluUiFORUDF@/doGTE8hvFZA8Cmnd2zprNF6fcOWy67Yt89zEfLlbyTsKJ4yPkEPez3XWWPaPYs2uvXDJNdlw2AQBDoZSaCrFx4IwF2@cfiLZRpclZ3GXIVqH2LOiJsFhd4LGRZqq5UHbpQwZMRRFOa41k8bxCnAR56UwH1iCxSlpEq1ZQ3PCpofa9UX5xEpyFLY/sqqhKmhzY7CTHfcOb45v4lMrEvnWaOpP9XBiICXq4YRGp2NPLm1fzie5mvoH8N07tMMeUspa33Vv7b7zsQrbxGq8Va9G/ZFb7e@y0s6OzrhCYBDQMJNPMMKVIMjChAaBUvM1TuubjfNC@6mMnRdjHVe6MpZ/mq7ps@5WGXe2UjC7uPgy/eJcDYcz58Ns@mG2MatuMjGvvwE"" rel=""nofollow noreferrer"">Try it Online!</a> (1+)</p>
","80214","","","","","2020-08-17 08:22:17","","","","0","","","","CC BY-SA 4.0"
"209640","2","","138286","2020-08-17 08:53:58","","1","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby / C</a>, <s>26</s> 20 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>puts(0?&quot;abc&quot;:&quot;cba&quot;);
</code></pre>
<p>-6 from Dom Hastings.</p>
<p><a href=""https://tio.run/##KypNqvz/v6C0pFjDwF4pMSlZyUopOSlRSdP6/38A"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online! (Ruby)</a></p>
<p><a href=""https://tio.run/##S9ZNzknMS/@vnJmXnFOakqpgU1ySkpmvl2HHlZlXopCbmJmnoVn9v6C0pFjDwF4pMSlZyUopOSlRSdP6f@1/AA"" rel=""nofollow noreferrer"">Try it online! (C)</a></p>
<p>0 is a truthy value in Ruby, so it prints &quot;abc&quot;, and C prints &quot;cba&quot;.</p>
<p><code>puts</code> is a function that works in both languages.</p>
","80214","","80214","","2020-08-17 11:35:24","2020-08-17 11:35:24","","","","2","","","","CC BY-SA 4.0"
"209710","2","","242","2020-08-18 07:01:57","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 16 bytes</h1>
<pre><code>[25W|]%%~%%0~[;]
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%5B25W%7C%5D%25%25%7E%25%250%7E%5B%3B%5D&amp;input=god%20yzal%20eht%20revo%20depmuj%20eH%0Axof%20nworb%20kciuQ%0A"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-18 07:01:57","","","","0","","","","CC BY-SA 4.0"
"209725","2","","159","2020-08-18 12:21:35","","1","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 47 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a{v=a.to_s.reverse;v==a.to_s ? a:f[a+v.to_i]}
</code></pre>
<p><a href=""https://tio.run/##KypNqvyfZvtf1y6xusw2Ua8kP75Yryi1LLWoONW6zBYqomCvkGiVFp2oXQbiZsbW/i9QSIs2NovlAtGmRhYGEJaJoZGxuWHsfwA"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-18 12:21:35","","","","0","","","","CC BY-SA 4.0"
"209779","2","","711","2020-08-19 06:33:46","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 23 bytes (<a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a>)</h1>

<pre class=""lang-apl prettyprint-override""><code>'NO' 'YES'⊃⍨≡∘⌽⍨2⊥⍣¯1⊢⎕
</code></pre>
<p>-3 bytes from Bubbler, after fitting the question requirements.</p>
<p>Instead of performing an if-else like below, this program uses APL's representation of true as 1 and false as 0 to select from an array, where 'NO' is in the 0th index and 'YES' is in the first index.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkGXI862tO4HvXOrdZ41LP3UefCR12LNI0edS191Lv40HpDIO9R71Yr9UjXYPVH3S3qfv7qtUC9/0EMBYhoV/Oj3hUgjR0zQCb0rkDVDVQMtOI/ZxqXKReQMDQAAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 26 bytes (<a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a>)</h1>

<pre class=""lang-apl prettyprint-override""><code>{(⌽≡⊢)2(⊥⍣¯1)⍵:'YES'⋄'NO'}
</code></pre>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{(⌽≡⊢)2(⊥⍣¯1)⍵:'YES'⋄'NO'}
{                        } function wrapper
             ⍵             take the right argument
      2(⊥⍣¯1)              convert to base 2, and split into -1 groups(gets all digits)
 (⌽≡⊢)                     reverse equals right expression?
              :'YES'⋄'NO'} if the above is true, display 'YES', otherwise 'NO'
</code></pre>
<p><a href=""https://tio.run/##AV0Aov9hcGwtZHlhbG9n//97KOKMveKJoeKKoikyKOKKpeKNo8KvMSnijbU6J1lFUyfii4QnTk8nff9m4oaQ4o2O4oqD4o2s4o20wq8z4oaR4o6VU1JD4o6VVEhJU/9mIDU"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-28 02:41:16","2020-08-28 02:41:16","","","","7","","","","CC BY-SA 4.0"
"209785","2","","123539","2020-08-19 07:27:52","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 11 bytes</h1>
<pre><code>0|[!5P5WA:]
</code></pre>
<p>Idea from Jo King's answer.</p>
<p>Prints the ASCII value of each letter modulo 5.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=0%7C%5B!5P5WA%3A%5D&amp;input=33333"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-20 06:10:04","2020-08-20 06:10:04","","","","0","","","","CC BY-SA 4.0"
"209821","2","","109865","2020-08-20 04:06:59","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 4 bytes</h1>
<pre><code>@MM:
</code></pre>
<p>adds the numbers to the 1 in stack.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%40MM%3A&amp;input=3%201"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-20 04:49:50","2020-08-20 04:49:50","","","","7","","","","CC BY-SA 4.0"
"209831","2","","204610","2020-08-20 09:29:18","","3","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 9 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⊃⍒1○⍳10*⎕
</code></pre>
<p>-7 bytes from <a href=""https://chat.stackexchange.com/transcript/message/55300296#55300296"">ngn and Adám.</a></p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKO94P@jruZHvZMMH03vftS72dBA61HfVJDEfwUwKOAy5IKxjOAsYzjLBM4yhbPMAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <s>20</s> 16 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{i[⊃⍒1○i←⍳10*⍵]}
</code></pre>
<p>-4 bytes from <a href=""https://chat.stackexchange.com/transcript/message/55299238#55299238"">Bubbler.</a></p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/vzoz@lFX86PeSYaPpndnPmqb8Kh3s6GB1qPerbG1/9PA/D6wgjWPerccWm/8qG3io76pwUHOQDLEwzP4f5qCIVeaghEQGwOxCRCbArEZFwA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Implements <a href=""https://codegolf.stackexchange.com/a/204611/80214"">Dingus's algorithm.</a></p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{i[⊃⍒1○i←⍳10*⍵]}
{              } function body
 i     i←⍳10*⍵   assign to i the range of 1 to 10^n
     1○          find the sine of each value in i
     ⊃⍒          Grade(sort) by descending value, select index of first(maximum) value
 i[           ]  return k in i where sin k is maximum
</code></pre>
","80214","","80214","","2020-08-20 11:52:36","2020-08-20 11:52:36","","","","0","","","","CC BY-SA 4.0"
"209851","2","","90349","2020-08-20 16:07:59","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 5 bytes</h1>
<pre><code>88WM;
</code></pre>
<p>Creates ASCII code for <span class=""math-container"">\$8*8+1(existing)=65\$</span> and outputs it.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=88WM%3B&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-20 16:07:59","","","","0","","","","CC BY-SA 4.0"
"209881","2","","209418","2020-08-21 04:22:16","","2","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a> + <code>bases</code>, 588 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>$&gt;&lt;&lt;?0+Bases.val('43ur6p5v87byc6oertnvopy75perajuyj6vvdx4dirisox7zjv1cn2viaoe4ta62al6phj2yiy8wqrx1yki34ihtmasmgf42gboode2gkhqu50yw3ttiblo95td8gb692jshoixb66h1mmcrfekd154h5gvo9b0p98hy6dj8oeq1nn9hihzyah1fmb9i9oqf38x8xrgabaldnxf5d1okwf7gagydqlctacv9x9r8shhnkrcj7xf34rgj3c6gb54kd8apxealduij2tecvzd31re7u1kc0ddesug9zp064abj4yrnoydre17zrfmjlpcho43146gase8zk9kkl348mopxx3qkcdepo3svrxtezb4jra4bzdjn1tytt76g74hroej9zaswy9zb0q55p3urqcbjqylcjhtxjtiadvmosf2ytxznjh3980mxkntwz4thp10ldkowsxymmhpuvbw5o0wh2t5uke1k896sjb4e07txzory0mgqj8jsrupiuvj4x19ncfyo2rspdx4u5wryx6lrlo1bncpi3').in_base(36).to_base(3)
</code></pre>
<p>I tried converting across multiple bases, and got the shortest string at base 36. This is a pretty simple number conversion.</p>
<p><a href=""https://repl.it/join/vvoqocct-razetime"" rel=""nofollow noreferrer"">Try it on repl.it!</a></p>
","80214","","","","","2020-08-21 04:22:16","","","","0","","","","CC BY-SA 4.0"
"209902","2","","53483","2020-08-21 09:24:31","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, <s>65</s> 61 bytes</h1>
<pre><code>@95W2M!;2A!!;;2W2M;[25W;84W;85W!;1M;1A]25W;95W2M!;2W1M!!;;3A;
</code></pre>
<p>I'm sure it can be golfed by a few more bytes when displaying characters.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%4095W2M!%3B2A!!%3B%3B2W2M%3B%5B25W%3B84W%3B85W!%3B1M%3B1A%5D25W%3B95W2M!%3B2W1M!!%3B%3B3A%3B&amp;input=9"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-21 09:33:32","2020-08-21 09:33:32","","","","4","","","","CC BY-SA 4.0"
"209912","2","","209889","2020-08-21 10:47:53","","3","","<h1><a href=""https://esolangs.org/wiki////"" rel=""nofollow noreferrer"">///</a>, Turn number 2</h1>
<pre><code>C&quot;prodington 
</code></pre>
<p><strong>Edit:</strong> Changed the porgram to fit the guidelines on irreducibility, <a href=""https://chat.stackexchange.com/transcript/message/55310824#55310824"">discussed here</a>. Rules have not changed.</p>
<p><a href=""https://tio.run/##K85JLM5ILf7/31mpoCg/JTMvvSQ/T@H/fwA"" rel=""nofollow noreferrer"" title=""/// – Try It Online"">Try it online!</a></p>
<h2>Rules</h2>
<ul>
<li>Programs may not print Codington Crescent.(3 turns left)</li>
<li>Running programs must be irreducible. (3 turns left)</li>
<li>Programs must have the substring <code>C&quot;pr</code> (4 turns left)</li>
<li>Maximum program length is 20 bytes. (3 turns left)</li>
<li>Programs may not contain brackets of any kind. (5 turns left)</li>
</ul>
","80214","","80214","","2020-08-22 03:46:16","2020-08-22 03:46:16","","","","3","","","","CC BY-SA 4.0"
"209967","2","","209889","2020-08-22 06:41:27","","1","","<h1><a href=""https://esolangs.org/wiki////"" rel=""nofollow noreferrer"">///</a>, Turn number 7, <a href=""https://chat.stackexchange.com/transcript/message/55319944#55319944"">FARKLE</a></h1>
<pre><code>C&quot;prodington 
</code></pre>
<p>This is a passed move. No change.</p>
<p><a href=""https://tio.run/##K85JLM5ILf7/31mpoCg/JTMvvSQ/T@H/fwA"" rel=""nofollow noreferrer"" title=""/// – Try It Online"">Try it online!</a></p>
<h2>Rules</h2>
<ul>
<li>Programs must have the substring C&quot;pr (expired)</li>
<li>Programs may not contain brackets of any kind. (last turn)</li>
<li>Minimum program length is 19 bytes (1 turns left)</li>
<li>Programs may not contain any whitespace characters (2 turns left)</li>
<li>The codepoint sum needs to be a perfect square that's greater than 1444. (3 turns left)</li>
<li>Programs may only output 'Codington Crescent' if they are irreducible AND modifications (additions OR changes) of at most 8 characters from a previously-submitted answer (4 turns left)</li>
</ul>
","80214","","","","","2020-08-22 06:41:27","","","","3","","","","CC BY-SA 4.0"
"209968","2","","84050","2020-08-22 07:34:39","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 131 bytes</h1>
<pre><code>@1A{1M\}&gt;1M!//~[1A~!~]%~!2W3M[1A95W2W5M;]%~
[1A25W;65W1M4W;~[1A84W;77W2W43W1MM;]%~84W;65W1M4W;]~25W;2W3M[1A95W;]
</code></pre>
<p>The special case was a pain, but I managed to 'golf' a solution under 150 bytes here.</p>
<h3>Output</h3>
<pre><code>4 3
___________
| o o o o |
| o o o o |
| o o o o |
-----------
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%401A%3C%2F1A%3C77W2W43W1MM%3B.%3E%7B1M%5C%7D%3E1M!%2F%2F%7E%5B1A%7E!%7E%5D%25%7E!2W3M%5B1A95W2W5M%3B%5D%25%7E%0A%5B1A25W%3B65W1M4W%3B%7E%5B1A84W%3B77W2W43W1MM%3B%5D%25%7E84W%3B65W1M4W%3B%5D%7E25W%3B2W3M%5B1A95W%3B%5D&amp;input=4%203"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-22 07:34:39","","","","0","","","","CC BY-SA 4.0"
"209973","2","","32924","2020-08-22 11:23:04","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 81 + 50 - 50 = 81 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>(i,'⠚⠁⠃⠉⠙⠑⠋⠛⠓⠊⠲⠂⠒⠆⠦⠖ ',⍨i←'⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚⠅⠇⠍⠝⠕⠏⠟⠗⠎⠞⠥⠧⠺⠭⠽⠵')[(⎕A,⎕C⎕A,⎕D,'.,:;?! ')⍳⍞]
</code></pre>
<p>Try it online uses Dyalog 17, so <code>⎕C</code> is not supported in it. The alternative, <code>819⌶</code> (suggested by <a href=""https://codegolf.stackexchange.com/users/59183/dzaima"">dzaima</a>), has been used for demonstration purposes.</p>
<p>Braille symbols taken from <a href=""https://www.dcode.fr/braille-alphabet"" rel=""nofollow noreferrer"">dcode.</a></p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>                                                  ⍳⍞ Find index of each character of the input in the string..
                            (⎕A,⎕C⎕A,⎕D,'.,:;?! ')   A-Z, a-z, 0-9, and punctuation.
                           [                      ]  Pick characters from those indices..
(i,'⠚⠁⠃⠉⠙⠑⠋⠛⠓⠊....⠧⠺⠭⠽⠵')                          In the braille representation of the Alphanumeric and punctuation characters.
(last line is shortened to take up less space.)
</code></pre>
<p><a href=""https://tio.run/##fY49TgJRAIR7TvGoHiQPI/gDaGFMLLyBhaEg2cVs8sIaY6GlGkDFRdGgUSNOg9DYaLQw8TLfRdbVAzjFzNfMZJq7vhQcNn28UwoP9sN2EAYppz3TSguRs@gBHaETdIbu0RD10SO6QefoDR2ja9RFL@jWWEcyi@he2X972WoH9VCCntAIXaJndIcGaIwmaIq@0Cv6Rh@2uF1gMFp3tXKdi88/zGzD2Tm3srqWN7ZI8k4ybvy@T1u5zShTLsvQ@9hsxXs@yJtyZWFxablaq8//AA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-22 11:23:04","","","","0","","","","CC BY-SA 4.0"
"209974","2","","166881","2020-08-22 14:08:15","","2","","<h2><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <s>21</s> <s>19</s> 13 bytes</h2>

<pre class=""lang-apl prettyprint-override""><code>⊢∊∘⌊⍳×1+∘÷⍣=≢
</code></pre>
<p>-6 bytes from Adám after conversion to tacit function.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn//1HXokcdXY86Zjzq6XrUu/nwdENtIOfw9ke9i20fdS76n/aobcKj3r5HXc2Petc86t1yaL3xo7aJj/qmBgc5A8kQD8/g/2kKhlxpCkZAbAzEJiC2JQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<h3>Old answer:</h3>

<pre class=""lang-apl prettyprint-override""><code>{⍵∊⌊((1+∘÷⍣=1)×⍳⍵)}
</code></pre>
<p>Uses the same approach as <a href=""https://codegolf.stackexchange.com/a/166883/80214"">Magic Octopus Urn's answer.</a></p>
<p>-2 bytes from ZippyMagician.</p>
<p>Prints 1 for upper and 0 for lower sequence.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⍵∊⌊((2÷¯1+5*÷2)×⍳⍵)}
                 ⍳⍵   Generate list of 1 to n
     (2÷¯1+5*÷2)×     Multiply it by the golden ratio
   ⌊                  Floor the entire list
 ⍵∊                   is n in the list?
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v/pR79ZHHV2Pero0NAy1H3XMOLz9Ue9iW0PNw9Mf9W4GSmrW/k971DbhUW/fo67mR71rHvVuObTe@FHbxEd9U4ODnIFkiIdn8P80BUOuNAUjIDYGYhMQ2xIA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-31 16:48:29","2020-08-31 16:48:29","","","","4","","","","CC BY-SA 4.0"
"210032","2","","70802","2020-08-24 08:13:05","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <s>25</s> <s>19</s> 14 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{2⊥⍨3⍴⌊√⍵-1}-⊢
</code></pre>
<p>-6 bytes from Adám.</p>
<p>-5 bytes from Bubbler.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qHeuQqJGnqatkZZGWk5@fpFGcWFRiUaerqGmprahpha6mG6ettH/aqNHXUsf9a4wftS75VFP16OOWY96t@oa1uo@6lr0P@1R24RHvX2Pupof9a4BKji03vhR28RHfVODg5yBZIiHZ/D/NAVDrjQFIyA2BmITIDYFYjMQbWBgAKQsLQxAsoZAngEA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A direct implementation of the last function mentioned on the OEIS page:</p>
<p><span class=""math-container"">\$a(n)=2×\Big(\big\lfloor\sqrt{n-1}\big\rfloor+1\Big)×\big\lfloor\sqrt{n-1}\big\rfloor-n+2\$</span></p>
<h2>Explanation:</h2>
<pre class=""lang-apl prettyprint-override""><code>{(2-⍵)+2×(1+⌊√⍵-1)×⌊√⍵-1} ⍵ → n
                   ⌊√⍵-1  floor of root of n-1
         (1+⌊√⍵-1)×       times 1 + floor of root of n-1
       2×                 times 2
 (2-⍵)                    plus 2-n
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qHeuQqJGnqatkZZGWk5@fpFGcWFRiUaerqGmprahpha6mG6ettH/ag0j3Ue9WzW1jQ5P1zDUftTT9ahjFlAAqODwdCRe7f@0R20THvX2PepqftS75lHvlkPrjR@1TXzUNzU4yBlIhnh4Bv9PUzDkSlMwAmJjIDYBYlMgNgNiQwMgAAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-08 10:44:42","2020-09-08 10:44:42","","","","7","","","","CC BY-SA 4.0"
"210038","2","","8374","2020-08-24 10:04:11","","3","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Classic)</a>, <s>24</s> 19 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍵=1:1⋄1+∇⍵-∇ ∇⍵-1}
</code></pre>
<p>-5 bytes from ngn's suggestion.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNzkksLs5M/v@/@lHvVltDK8NH3S2G2o862oFcXSClAGUa1v5Pe9Q24VFv36Ou5ke9ax71bjm03vhR28RHfVODg5yBZIiHZ/D/NAVDrjQFIyA2BmITIDY0AAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Classic) – Try It Online"">Try it online!</a></p>
<p>Same as the recursive function used in the PHP answer.</p>
<pre class=""lang-apl prettyprint-override""><code>{⍵=1:1⋄1+∇(⍵-∇(∇(⍵-1)))} ⍵(left arg) is n
       1+∇(⍵-∇(∇(⍵-1)))  recursive step: return 1 + f(n - f(f(n - 1))) if n is not 1.
 ⍵=1:1                   if n is 1, then return 1.
</code></pre>
","80214","","80214","","2020-08-24 15:43:28","2020-08-24 15:43:28","","","","2","","","","CC BY-SA 4.0"
"210098","2","","210071","2020-08-25 02:23:24","","3","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, <s>23</s> 19 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;n{Math.gamma n+1}
</code></pre>
<p>-4 bytes using gamma function (Dingus).</p>
<p><a href=""https://tio.run/##KypNqvyfZvtf1y6v2jexJEMvPTE3N1EhT9uw9r@GgZ6eoZGmXmpicka1Qk1mjUKBQlp0ZqxC7X8A"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-25 02:49:57","2020-08-25 02:49:57","","","","0","","","","CC BY-SA 4.0"
"210108","2","","210071","2020-08-25 05:02:29","","1","","<h1><a href=""https://github.com/Mego/Seriously/tree/v1"" rel=""nofollow noreferrer"">Seriously</a>, 2 bytes</h1>
<pre><code>,!
</code></pre>
<p><a href=""https://tio.run/##K04tyswvLc6p/P9fR/H/f0MjLgA"" rel=""nofollow noreferrer"" title=""Seriously – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-25 05:02:29","","","","0","","","","CC BY-SA 4.0"
"210122","2","","206967","2020-08-25 10:32:58","","3","","<h2><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 26 bytes</h2>
<pre><code>%@_2A&lt;\:.&gt;2M3A[1A~M~]%\WM:
</code></pre>
<p>Now it works properly on the testcases. Works on MAWP 1.1's integer input.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%25%40_2A%3C%5C%3A.%3E2M3A%5B1A%7EM%7E%5D%25%5CWM%3A&amp;input=1%202%203%204"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-31 04:15:48","2020-08-31 04:15:48","","","","2","","","","CC BY-SA 4.0"
"210130","2","","210071","2020-08-25 12:12:08","","5","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 5 bytes</h1>
<pre><code>$*\,q
</code></pre>
<p><a href=""https://tio.run/##K8gs@P9fRStGp/D/f0Oj/wA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-25 12:25:20","2020-08-25 12:25:20","","","","0","","","","CC BY-SA 4.0"
"210173","2","","210162","2020-08-26 04:32:08","","7","","<h1><a href=""https://www.dyalog.com/"" rel=""noreferrer"">APL (Dyalog Classic)</a>, <s>33</s> <s>31</s> 26 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍵∊∊(((⊢~∘.×⍨)1↓⍳)⍵)∘*¨⍳⍵}
</code></pre>
<p>-5 bytes from Kevin Cruijssen's suggestion.</p>
<p><em>Warning:</em> Very, very slow for larger numbers.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⍵∊∊(((⊢~∘.×⍨)1↓⍳)⍵)∘*¨⍳⍵} ⍵=n in all the following steps
                       ⍳⍵  range from 1 to n
                    ∘*¨    distribute power operator across left and right args
    (((⊢~∘.×⍨)1↓⍳)⍵)       list of primes till n
   ∊                       flatten the right arg(monadic ∊)
 ⍵∊                        is n present in the primes^(1..n)?
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNzkksLs5M/v@/@lHv1kcdXUCkoaHxqGtR3aOOGXqHpz/qXaFp@Kht8qPezZpAFZpAUa1DK4A8IKf2f9qjtgmPevsedTU/6l3zqHfLofXGj9omPuqbGhzkDCRDPDyD/6cpGHGlKRgDsQkQmwGxIVjADAA"" rel=""noreferrer"">Try it online!</a></p>
","80214","","80214","","2020-08-26 07:55:12","2020-08-26 07:55:12","","","","3","","","","CC BY-SA 4.0"
"210180","2","","57617","2020-08-26 07:44:03","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, <s>48</s> <s>46</s> 54 bytes</h1>
<pre><code>@1A&lt;:.&gt;{1A&lt;1:.&gt;2M}!1A[/!!\!/P\!/WA&lt;:.&gt;{%}\2A?0{1M}]1:.
</code></pre>
<p>-2 bytes from <a href=""https://discord.com/channels/744183999798313022/744403011119349814/748086957170622494"" rel=""nofollow noreferrer"">Dion's suggestion.</a></p>
<p>+8 bytes after fixing the problem with 1 as input.</p>
<p>Prints 1 for prime and 0 for non-prime. Can probably be golfed by a few more bytes, since it checks for 2 at the beginning first.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%401A%3C%3A.%3E%7B1A%3C1%3A.%3E2M%7D!1A%5B%2F!!%5C!%2FP%5C!%2FWA%3C%3A.%3E%7B%25%7D%5C2A%3F0%7B1M%7D%5D1%3A.&amp;input=12"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","80214","","2020-08-26 09:08:51","2020-08-26 09:08:51","","","","3","","","","CC BY-SA 4.0"
"210188","2","","12177","2020-08-26 09:26:51","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 36 bytes</h1>
<pre><code>@[!!2P2WA{%3W1M}&lt;%2P&gt;1A{1M}/1M\]%1A:
</code></pre>
<p>Works as per the basic rules. Increments existing 1 in stack for each step.</p>
<p>Prints out n-1.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%40%5B!!2P2WA%7B%253W1M%7D%3C%252P%3E1A%7B1M%7D%2F1M%5C%5D%251A%3A&amp;input=7"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-08-26 09:26:51","","","","0","","","","CC BY-SA 4.0"
"210199","2","","106496","2020-08-26 12:26:36","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 12 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>1-3|1+1-.⊃⍒¨
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT//P9ah3rkJQfnI2hNC1UzBACAUkFqQWgcR0DRGCwcmZxcX5RcUgcYgwRBlMP7IY3AADJEFkA6AGw4VghqCLww1CE0c2C2hH39TM/EdtEwz@G@oa1xhqG@rqPepqftQ76dCK/2lA8Ue9fWD@mke9Ww6tN37UNhGoIzjIGUiGeHgG/09TUAc5QF0BSnPBBdTBDkAWgNkMFoPIIumCCSC0wURQ9ME5SFqRxBC6kQThTAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>ngn's solution.</p>
<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <s>28</s> <s>26</s> <s>19</s> 18 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>(××¯1*3&gt;|)-⍥⎕UCS⍥⊃
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qp/@jtgkG/zUOTz88/dB6Qy1juxpN3Ue9S4FSoc7BIEZX8/80oJpHvX1A5qPeNY96txxab/yobSJQSXCQM5AM8fAM/q8elJ@cra6QpgBhcCH4AYkFqUXIAsHJmcXF@UXFQDGIHJIuhABMG0IESR@ciaQVRQymG0UQzgEA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Jo King's similar train based solution.(-3 bytes)</p>
<p>(⍥ function is new in Dyalog 18.0, a polyfill is used instead in TIO.)</p>
<p>-2 more bytes from Jo King.</p>
<p>-7 bytes golfed by Bubbler.</p>
<p>-1 byte from Adám (change to Dyalog Extended)</p>
<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 31 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{¯1 1 1 0 ¯1 ¯1 1[3+-/⎕UCS⊃¨⍵]}
</code></pre>
<p>Subtracts the unicode values of the first character of each string.</p>
<p>Then adds three to the difference, and returns the correct value as per this mapping:</p>
<pre class=""lang-apl prettyprint-override""><code> 0  1  2  3  4  5  6
---------------------
-1  1  1  0 -1 -1  1
</code></pre>
<h2>Code Explanation:</h2>
<pre class=""lang-apl prettyprint-override""><code>{¯1 1 1 0 ¯1 ¯1 1[3+-/⎕UCS⊃¨⍵]}
                           ¨⍵   For each value of ⍵
                          ⊃     Get the first letters
                      ⎕UCS      Transform them to their Unicode codepoints
                    -/          Reduce them by subtraction
                  3+            Add three to the difference
{¯1 1 1 0 ¯1 ¯1 1[           ]} Return the value, using the difference +3 as index

</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkG/6sPrTdUAEEDBRALzIs21tbVByoJdQ5@1NV8aMWj3q2xtf/TgOof9fYBRR71rnnUu@XQeuNHbROByoKDnIFkiIdn8P80BfWg/ORsdSjFheAHJBakFiELBCdnFhfnFxWDxSCySLpgAghtMBEUfXAOklYkMYRuJEE4EwA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-15 13:32:05","2020-09-15 13:32:05","","","","11","","","","CC BY-SA 4.0"
"210257","2","","175236","2020-08-28 06:05:17","","0","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 21 bytes</h2>
<pre><code>($+\,a)**2-$+(\,a)**2
</code></pre>
<p>My first self written pip answer!</p>
<p><a href=""https://tio.run/##K8gs@P9fQ0U7RidRU0vLSFdFWwPK/P//vxHXfwA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-28 06:05:17","","","","0","","","","CC BY-SA 4.0"
"210258","2","","120925","2020-08-28 06:51:09","","2","","<h2><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 10 bytes (SBCS)</h2>

<pre class=""lang-apl prettyprint-override""><code>⊃∘⌽'.'∘≠⊆⊢
</code></pre>
<p>-7 bytes after Bubbler's suggestion.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT////1FX86OOGY969qrrqYMYnQsedbU96lr0P@1R24RHvX1A@UPrjR@1TXzUNzU4yBlIhnh4BgNle@dxZWTqlVSUcIHZyYlFRfklermpuakQgZz8HAijPCOxRE8vs1hPryQDRKZl5kCVhBgY@DrkGXsnBkTpZRiUO0fHZkAkEtNT80r0DAwMAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<h2><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 17 bytes (SBCS)</h2>

<pre class=""lang-apl prettyprint-override""><code>⊃⌽'.'(1↓¨,⊂⍨⊣=,)⍞
</code></pre>
<h3>Explanation</h3>
<pre class=""lang-apl prettyprint-override""><code>⊃⌽'.'(1↓¨,⊂⍨⊣=,)⍞
                ⍞ string input
            ⊣=,)  get characters, evaluate if they are equal to the left arg '.'
         ,⊂⍨      enclose each part after a dot
  '.'(1↓¨         drop each dot in the strings
 ⌽                reverse the split string array
⊃                 take the first value
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qKNdIe3/o67mRz171fXUNQwftU0@tELnUVfTo94Vj7oW2@poPuqdB1L2P40rI1OvpKKEK40rObGoKL9ELzc1NxXIy8nPAZLlGYklenqZxXp6JRkgMi0zByQZYmDg65Bn7J0YEKWXYVDuHB2bARRNTE/NK9EzMDAAAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-28 08:09:01","2020-08-28 08:09:01","","","","4","","","","CC BY-SA 4.0"
"210264","2","","183315","2020-08-28 12:42:59","","3","","<h2><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, <s>186</s> 161 bytes</h2>
<p>Uses dzaima's Processing integration.</p>

<pre class=""lang-apl prettyprint-override""><code>G←P5.G
P5.draw←{p←G.pt
G.stroke←'00f'
p 3 3
G.stroke←'0ff'
p 2 3 3 2
G.stroke←'f0f'
p 1 3 3 1
G.stroke←'0f0'
p 2 2
G.stroke←'ff0'
p 1 2 2 1
G.stroke←'f00'
p 1 1}
</code></pre>
<p>-25 bytes after applying some of dzaima's suggestions and 3 character color codes.</p>
<h3>Grid (Heavily Magnified):</h3>
<p><a href=""https://i.stack.imgur.com/SYNK7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/SYNK7.png"" alt=""enter image description here"" /></a></p>
<h3>Actual size:</h3>
<p><a href=""https://i.stack.imgur.com/cqd3F.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/cqd3F.png"" alt=""enter image description here"" /></a></p>
","80214","","80214","","2020-08-29 11:30:01","2020-08-29 11:30:01","","","","0","","","","CC BY-SA 4.0"
"210283","2","","210271","2020-08-28 16:43:46","","6","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""noreferrer"">Pip</a>, <s>26</s> 12 bytes</h2>
<pre><code>T0{LbPaLcPx}
</code></pre>
<p>-14 bytes after taking ratio as two arguments.</p>
<h3>Explanation:</h3>
<pre><code>T0           Till 0 (infinite loop)
  {Lb        Loop b(second argument) number of times
     Pa      Print a(first argument) with newline
       Lc    Loop c(third argument) number of times
         Px} Print x(empty string) with newline
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/xKDaJykg0Sc5oKL2////aUWJySWZ@Xn/Df8bAwA"" rel=""noreferrer"">Try it online!</a></p>
","80214","","80214","","2020-08-29 03:30:03","2020-08-29 03:30:03","","","","3","","","","CC BY-SA 4.0"
"210304","2","","189612","2020-08-29 04:36:26","","2","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, <sup><s>39</s></sup> 35 bytes</h1>
<pre><code>IaQ'*P&quot;Hello World&quot;EIsQ@aPRRmE{T0a}
</code></pre>
<p><a href=""https://tio.run/##K8gs@P/fMzFQXStAySM1JydfITy/KCdFydWzONAhMSAoKNe1OsQgsfb///8KWgoA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>Simple if else based program, prints random integer between 0 and 1000.</p>
","80214","","80214","","2020-12-20 03:01:57","2020-12-20 03:01:57","","","","0","","","","CC BY-SA 4.0"
"210308","2","","192979","2020-08-29 05:45:23","","1","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, <s>3</s> 2 bytes</h2>
<pre><code>vo
</code></pre>
<p>o is a variable denoting 1, v is -1.</p>
<p><code>0-1</code> is another 3 byte solution, but since it was already made in Python, I decided to make this instead.</p>
<p>-1 byte from Dlosc.</p>
<p><a href=""https://tio.run/##K8gs@P@/LP//fwA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-31 01:11:43","2020-08-31 01:11:43","","","","4","","","","CC BY-SA 4.0"
"210320","2","","206967","2020-08-29 13:00:36","","1","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 12 bytes</h2>
<pre><code>b*$+@&lt;a+@RVa
</code></pre>

<h3>Explanation</h3>
<pre class=""lang-apl prettyprint-override""><code>b*$+@&lt;a+@RVa
b*           Second argument(b) times
  $+         Sum of elements of
    @&lt;a      First argument list(a) without last element
       +@RVa Plus first element of the reverse of a
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/SUtF28EmUdshKCzx////xgqGCiZAbPrf0AAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-29 13:00:36","","","","0","","","","CC BY-SA 4.0"
"210368","2","","86986","2020-08-30 16:40:08","","1","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, <s>17</s> 15 bytes</h2>
<pre><code>Fi,26Pz@&gt;i.z@&lt;i
</code></pre>
<p>Loops 26 times over Pip's built-in a-z variable and prints the table shifted each time.</p>
<p>-2 bytes from Dlosc <s>because he actually read the question</s></p>
<p><a href=""https://tio.run/##K8gs@P/fLVPHyCygysEuU6/KwSbz/38A"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-08-31 01:09:35","2020-08-31 01:09:35","","","","1","","","","CC BY-SA 4.0"
"210379","2","","181627","2020-08-31 02:06:58","","1","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 4 bytes</h2>
<pre><code>a@-1
</code></pre>
<p><code>@RVa</code> also works, and is the same size.</p>
<p><a href=""https://tio.run/##K8gs@P8/0UHX8P///4YKRgrGCiYA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-31 02:06:58","","","","0","","","","CC BY-SA 4.0"
"210383","2","","120925","2020-08-31 04:36:22","","1","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 10 bytes</h2>
<pre><code>@RV(q^&quot;.&quot;)
</code></pre>
<p>Splits  on dots, gets first element of reverse. I wish I could make this work without the parentheses.</p>
<p><a href=""https://tio.run/##K8gs@P/fIShMozBOSU9J8///xPTUvBI9AwOD/wA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-31 04:36:22","","","","0","","","","CC BY-SA 4.0"
"210386","2","","187586","2020-08-31 05:23:28","","0","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 29 bytes</h2>
<pre><code>sN(STbALsRL#a)@&gt;(a@?&quot;/&quot;)@&lt;3&lt;2
</code></pre>
<p>The padding with spaces part took a while to figure out.</p>
<p>The second argument <em><strong>must</strong></em> have atleast one space before it, otherwise the program will error. Add a space to the first argument as well for testing.</p>
<h3>Explanation:</h3>
<pre><code>sN(STbALsRL#a)@&gt;(a@?&quot;/&quot;)@&lt;3&gt;1
  (STbALsRL#a)                pad second line with spaces, convert to a simple string
                (a@?&quot;/&quot;)      Find index of jimmy's right hand in first line
              @&gt;              Get substring of second line after index taken in prev step
                        @&lt;3   cut it to the three planks under Jimmy
sN                            Find number of spaces in substring i.e.
                                &quot;---&quot; =&gt; 0, &quot; - &quot; =&gt; 2
                           &lt;2 find out if Jimmy is standing on thin air(hopefully not)
</code></pre>
<p><a href=""https://tio.run/##K8gs@P@/2E8jOCTJ0ac4yEc5UdPBTiPRwV5JX0nTwcbYxuj///8KSEA/PwbK@q@giwz@AwA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-31 05:23:28","","","","0","","","","CC BY-SA 4.0"
"210389","2","","25885","2020-08-31 07:32:39","","1","","<h2><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, <s>50 - 12.5 = 37.5</s> 37 - 9.25 = 27.75  bytes</h2>

<pre class=""lang-apl prettyprint-override""><code>P5.draw←{P5.G.ln ↑r+r×2 1○ᑈs÷⍨2×○0…s}
</code></pre>
<p>Shortened heavily with the help of <a href=""https://chat.stackexchange.com/transcript/message/55402353#55402353"">The APL Orchard.</a></p>
<h3>Explanation:</h3>
<pre class=""lang-apl prettyprint-override""><code>P5.draw←{P5.G.ln ↑r+r×2 1○ᑈs÷⍨2×○0…s}
P5.draw←{                           } Draw the following on the canvas every frame:
         P5.G.ln                      Draw a line using array(x1,y1,x2,y2...)
                                 0…s  Range from 0 to number of sides
                              2×○     times 2π
                           s÷⍨        divided by number of sides
                      2 1○ᑈ           Take cos and sin of each of the values from the left
                 ↑r+r×                Multiply the list by r and add r to center it, 
                                      then mix the values of the list together
</code></pre>
<p>Previous version:</p>
<pre class=""lang-apl prettyprint-override""><code>p←(2×○⍳s+1)÷s
P5.draw←{P5.G.ln r+r×⍉(2○p)↑⍤⍮(1○p)}
</code></pre>
<p>Takes input as variables <code>r</code> and <code>s</code>,  draws polygon with center at <span class=""math-container"">\$(r,r)\$</span>.</p>
<p>Made with the help of the formula used <a href=""https://www.openprocessing.org/sketch/738106"" rel=""nofollow noreferrer"">here.</a></p>
<h3>Outputs:</h3>
<p><code>100 3</code></p>
<p><a href=""https://i.stack.imgur.com/Tf4Vl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Tf4Vl.png"" alt=""enter image description here"" /></a></p>
<p><code>100 5</code></p>
<p><a href=""https://i.stack.imgur.com/lRpIW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/lRpIW.png"" alt=""enter image description here"" /></a></p>
<p><code>200 7</code></p>
<p><a href=""https://i.stack.imgur.com/8o1km.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8o1km.png"" alt=""enter image description here"" /></a></p>
<p>To execute the program, use the setup <a href=""https://tio.run/##SyzI0U2pSszMTfxf9KhtAlcxiAgw1SvOrEoFMo0e9W4xPjy96H8BkKNhdHj6o@ndj3o3F2sbah7eXgxSmFKUWA6UqwYy3fVy8hSKtIuAqno7NYyASgs0H7VNfNS75FHvOg1DML/2/38A"" rel=""nofollow noreferrer"" title=""APL (dzaima/APL) – Try It Online"">here,</a> for a full view of the drawn polygon.</p>
","80214","","80214","","2020-08-31 09:13:11","2020-08-31 09:13:11","","","","0","","","","CC BY-SA 4.0"
"210395","2","","58243","2020-08-31 10:28:41","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 85 bytes</h1>
<pre><code>a:TBa
((&quot;   &quot;X16-#a).aR0&quot;   &quot;R1&quot; # &quot;&lt;&gt;3JW'|&lt;&gt;16J'|&lt;&gt;17JWn.&quot;+---+---+---+---+&quot;.n)@&lt;-20
</code></pre>
<p>Does a straightforward bunch of splits and replacement to get the final grid.</p>
<p><a href=""https://tio.run/##K8gs@P8/0SrEKZFLQ0NJQUFBKcLQTFc5UVMvMcgAzA8yVFJQVlCysTP2ClevsbEzNPMCU@Ze4Xl6Stq6urooWEkvT9PBRtfI4P///8bGFkamAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-08-31 10:28:41","","","","0","","","","CC BY-SA 4.0"
"210417","2","","37716","2020-09-01 08:07:20","","4","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 26 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{P5.G.ln↓⍉↑⍵×⍺∘-@3⍳¨⍺1 1⍺}
</code></pre>
<p>-2 bytes from Adam using <em>magic</em></p>
<p>Requires <code>⎕IO←0</code>. (0-indexing)</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{P5.G.ln↓⍉↑⍵×⍺∘-@3⍳¨⍺1 1⍺}
 P5.G.ln                   Create lines using the following sets of four points:
                    ⍺1 1⍺  Array [n,1,1,n]
                  ⍳¨       generate range 0..n for each
                           [0..n,0,0,0..n]
                @3         to the third element,
             ⍺∘-           subtract it from n.(reversing the last range)
                           [0..n,0,0,n..0]
           ⍵×              scale all items by p
          ↑                mix , creating columns of coordinates.
        ↓⍉                 transpose, and convert to lists of two points
</code></pre>
<h2><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 28 bytes</h2>

<pre class=""lang-apl prettyprint-override""><code>{P5.G.ln↓⍉↑(⍵×⍳⍺)⍬⍬(⍵×⍺-⍳⍺)}
</code></pre>
<p>Anonymous function which takes n and p as left and right arguments, and displays the pattern, given an adequately sized canvas.</p>
<p>Full Program <a href=""https://dzaima.github.io/paste/#0y3vUNsGMqwBImhtxBZjqFWdWpQI5Ro96t@Qdnl7AxZUG5FUXAYlHvVsfdbdUA9W46@XkaRQdng4U0VQwAEIIZ5cuSKD20IpHvZuBvFqFR71zFULz0vNz0lJTFNJK85JLMvPzuLjSQSZCjXnUNvlRb@ejtokaQL0gQ0A6NR/1rgEimBDIXLAwxEQM80CuTi0pBfmhmksBCECq8hTSFArAvDyFdCCrFgA#dAPL18"" rel=""nofollow noreferrer"">here.</a></p>
<p>Made with a lot of advice and golfing from dzaima.</p>
<h3>Test Cases</h3>
<p><code>25, 15</code></p>
<p><a href=""https://i.stack.imgur.com/6PeBn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6PeBn.png"" alt=""enter image description here"" /></a></p>
<p><code>20, 20</code></p>
<p><a href=""https://i.stack.imgur.com/4DBkB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4DBkB.png"" alt=""enter image description here"" /></a></p>
<p><code>6,72</code></p>
<p><a href=""https://i.stack.imgur.com/urdZU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/urdZU.png"" alt=""enter image description here"" /></a></p>
<h2><a href=""http://openjdk.java.net/"" rel=""nofollow noreferrer"">Java + <code>Processing</code></a>, 62 bytes</h2>
<p>The original function I made for this question.</p>

<pre class=""lang-java prettyprint-override""><code>void c(int n,int p){for(int i=1;i&lt;n;)line(p*i,0,0,p*(n-i++));}
</code></pre>
","80214","","80214","","2020-10-21 06:07:02","2020-10-21 06:07:02","","","","5","","","","CC BY-SA 4.0"
"210418","2","","150117","2020-09-01 10:08:33","","1","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 16 bytes</h2>
<pre><code>Flg{Po?lRVlo!:o}
</code></pre>
<p>This loops over each line and reverses it based on the value of variable <code>o</code>(Predefined to 1), which is inverted each time the loop runs.</p>
<p><a href=""https://tio.run/##K8gs@P/fLSe9OiDfPicoLCdf0Sq/9v///0n5pcX/M1JzcvL/Z2SCeSVF@QUZqSn5eQA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<pre><code>Fi,#gPi%2?RVg@ig@i
</code></pre>
<p>This one is based on the indices of each line instead.</p>
","80214","","","","","2020-09-01 10:08:33","","","","0","","","","CC BY-SA 4.0"
"210419","2","","55051","2020-09-01 10:31:37","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 34 bytes</h1>
<pre><code>Fla.sXb-#(@RVa&lt;&gt;b)&lt;&gt;b{Po?lRVlo!:o}
</code></pre>
<p>Similar approach as to my <a href=""https://codegolf.stackexchange.com/questions/150117/boustrophedonise/210418#210418"">Boustrophedonise answer</a>, but with padding and splitting the string.</p>
<p><a href=""https://tio.run/##K8gs@P/fLSdRrzgiSVdZwyEoLNHGLkkTiKsD8u1zgsJy8hWt8mv////vkZqTk6@jEJ5flJOi@N8UAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-01 10:31:37","","","","0","","","","CC BY-SA 4.0"
"210421","2","","200306","2020-09-01 12:09:23","","4","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <s>11 9</s> 7 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⍞←⍣≠'A'
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn//1HvvEdtEx71Ln7UuUDdUf3/fwA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Bubbler.</p>
<p>-2 bytes from Adàm using forbidden hacky APL magic.</p>

<p>Older answer:</p>
<pre class=""lang-apl prettyprint-override""><code>{⍞←'A'⋄∇⍵}0
</code></pre>
<h3>Explanation</h3>
<pre class=""lang-apl prettyprint-override""><code>{⍞←'A'⋄∇⍵}0
      ⋄     separator (arguments will be evaluated left to right)
 ⍞←'A'      Print 'A' without newline
       ∇⍵   Call function again with the same right argument
{        }0 Call first time with 0(any number works)
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v/pR77xHbRPUHdUfdbc86mh/1Lu11uB/GlDoUW/fo67mR71rHvVuObTe@FHbxEd9U4ODnIFkiIdn8H8A"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-11-10 17:48:49","2020-11-10 17:48:49","","","","10","","","","CC BY-SA 4.0"
"210463","2","","109491","2020-09-02 04:08:55","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>41</s></sup> 33 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{×⍵:↑({'\',⍨⍵↑'|'}¨⍳⍵),⊂'-'⍴⍨⍵+1}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v/rw9Ee9W60etU3UqFaPUdd51LsCyAdy1WvUaw8B2ZuBXE2dR11N6rrqj3q3QOS1DWv/pz1qm/Cot@9RV/Oj3jVAmUPrjYHaHvVNDQ5yBpIhHp7B/9MUDLjSFAyB2AiIjYHYBIhNAQ"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>-7 bytes from Adám.</p>
<p>-1 byte using signum function.</p>
<h3>Explanation</h3>
<pre class=""lang-apl prettyprint-override""><code>{×⍵:↑({'\',⍨⍵↑'|'}¨⍳⍵),⊂'-'⍴⍨⍵+1} ⍝ ⍵=n
 ×⍵:                              ⍝ If sign(n)
                        '-'⍴⍨⍵+1  ⍝ Repeat '-' n+1 times
                       ⊂          ⍝ Enclose it to a single string
                      ,           ⍝ Join with
                 }¨⍳⍵             ⍝ for each x in range 1..n
            ⍵↑'|'                 ⍝ Inner fn: take x characters from '|' appending spaces
      '\',⍨                       ⍝ Reverse join with '\'
  
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v9rA5lHvVqvqR31TH7VNADJrD63QqNYAMh61TVSvUdfUUY9RB4o96t0MFNPUedTVBJLUNtR81LtFXVe99n8aWF/fo67mR71rgIKH1hsDtQLNCw5yBpIhHp7B/9MUDLjSFAyB2AiIjYHYBIhNAQ"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-11-11 04:49:17","2020-11-11 04:49:17","","","","2","","","","CC BY-SA 4.0"
"210468","2","","126078","2020-09-02 06:30:55","","3","","<h2><a href=""http://openjdk.java.net/"" rel=""nofollow noreferrer"">Java + <code>Processing</code></a>, 95 bytes</h2>

<pre class=""lang-java prettyprint-override""><code>noStroke();arc(r,r,r,r,0,PI/3);arc(r+r/2,r,r,r,2*PI/3,PI);arc(r+r/4,r+r/2.3,r,r,4*PI/3,5*PI/3);
</code></pre>
<p>Takes input as variable r, outputs a Reuleaux triangle at <span class=""math-container"">\$(r,r)\$</span>, given an adequately sized canvas.</p>
<p><a href=""https://tio.run/##y0osS9TNL0jNy0rJ/v8/Lz@4pCg/O1VD0zqxKFmjSAcCDXQCPPWNoWLaRfpGUHEjLZA4UBIhZaIDVqBnDFZgAlFgqgXR//8/AA"" rel=""nofollow noreferrer"" title=""Java (OpenJDK 8) – Try It Online"">Code</a></p>
<h3>As a function with size call, 124 bytes</h3>
<pre class=""lang-java prettyprint-override""><code>void a(int r){size(r*2,r*2);noStroke();arc(r,r,r,r,0,PI/3);arc(r+r/2,r,r,r,2*PI/3,PI);arc(r+r/4,r+r/2.3,r,r,4*PI/3,5*PI/3);}
</code></pre>
<h3>Outputs</h3>
<p>50</p>
<p><a href=""https://i.stack.imgur.com/2wHLh.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2wHLh.png"" alt=""enter image description here"" /></a></p>
<p>100</p>
<p><a href=""https://i.stack.imgur.com/4XsSO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4XsSO.png"" alt=""enter image description here"" /></a></p>
<p>200</p>
<p><a href=""https://i.stack.imgur.com/b3CZO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/b3CZO.png"" alt=""enter image description here"" /></a></p>
","80214","","","","","2020-09-02 06:30:55","","","","0","","","","CC BY-SA 4.0"
"210472","2","","114927","2020-09-02 08:02:25","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 9 bytes</h1>
<pre><code>@&lt;@&gt;(a^s)
</code></pre>
<p>Slices the first and last names from the string(split on spaces) and prints it.</p>
<p><a href=""https://tio.run/##K8gs@P/fwcbBTiMxrljz////wYm5iXklGYkKYampCh6ZOTnFAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-02 08:02:25","","","","0","","","","CC BY-SA 4.0"
"210473","2","","114820","2020-09-02 08:43:59","","1","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 48 bytes</h2>
<pre><code>s.a@?&quot;Plz send teh codez!&quot;?v.&quot; flag comment&quot;'+.o
</code></pre>
<p>Tied with CJam.</p>
<p>I am very mad that I was unable to get this under 48 bytes.</p>
<p>The program uses Pip's predefined variables to get around the number sequence, and it doesn't have any characters from the Capitals sequence.</p>
<p><a href=""https://tio.run/##K8gs@P@/WC/RwV4pIKdKoTg1L0WhJDVDITk/JbVKUcm@TE9JIS0nMR0okJubmleipK6tl////39MxQA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-02 08:43:59","","","","0","","","","CC BY-SA 4.0"
"210479","2","","98701","2020-09-02 11:10:28","","1","","<h2><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip <code>-n</code></a>, 24 bytes</h2>
<pre><code>(RF('/X6.'\X6)X24)X3&lt;&gt;72
</code></pre>
<p>Quad reflect is a bit weird in pip, so this answer uses normal reflect.</p>
<p>The -n flag joins lists with newlines.</p>
<p><a href=""https://tio.run/##K8gs@P9fI8hNQ10/wkxPPSbCTDPCyEQzwtjGztzo////unkA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-02 11:30:30","2020-09-02 11:30:30","","","","0","","","","CC BY-SA 4.0"
"210510","2","","210497","2020-09-03 06:03:50","","3","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, <s>28</s> 27 bytes</h1>
<pre><code>aRM'h?&quot;err&quot;&quot;Hello World&quot;X#a
</code></pre>
<p>-1 byte from DLosc.</p>
<p>If the string without h's is empty, print &quot;Hello World&quot; required number of times.</p>
<p>Otherwise, error.</p>
<p>This program errors on empty input as well.</p>
<p><a href=""https://tio.run/##K8gs@P8/MchXPcNeKbWoSEnJIzUnJ18hPL8oJ0UpQjnx////GRCQAwA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-12 14:01:37","2020-09-12 14:01:37","","","","3","","","","CC BY-SA 4.0"
"210521","2","","190819","2020-09-03 09:01:01","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 16 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>(+⌷13⍴0 1,9/⊢)/⌽
</code></pre>
<p>A tacit function which takes initial accumulator value and the program as a single integer list.</p>
<p>Maps the relevant sums of instruction and accumulator to an array.</p>
<p>Table: <code>(a→accumulator, i→instruction)</code></p>
<pre class=""lang-apl prettyprint-override""><code>a  i a+i result
00 0 0   0
01 0 1   1
10 1 11  0
11 1 12  1
</code></pre>
<p>All other cases return the same value, so they are assigned to the preexisting value of <code>a</code>.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkG/zW0H/VsNzR@1LvFQMFQx1L/UdciTf1HPXv/pwGlH/X2PepqPrTe@FHbRKCW4CBnIBni4Rn8P03BQMEAiAwVDMHIwJALIWRgAOaAhIGkAZxvAAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<h3>Explanation</h3>
<pre class=""lang-apl prettyprint-override""><code>(+⌷13⍴0 1,9/⊢)/⌽ accumulator→a
              /⌽ reduce the reversed array using th following function: (reducing happens from the right)
          9/⊢)   replicate a 9 times
   13⍴0 1,       concatenate with (0,1) and expand to 13 elements → (0 1 a a a a a a a a a 0 1)
(+⌷              sum first two elements and find element at that index in the array
</code></pre>
<h3>Solution which accepts a string</h3>
<pre class=""lang-apl prettyprint-override""><code>{{(13⍴0 1,9/⍺)[⍺+⍵]}/⌽(⍎¨((⍴⍵)⍴1 0)⊂('0',⍵))}
</code></pre>
<p>It was pretty ambiguous how the input was supposed to be taken, so I decided I'd leave this one in as well.</p>
<p>This was the original dfn, which was golfed down using Adám and Bubbler's advice.</p>
","80214","","80214","","2020-09-03 09:27:48","2020-09-03 09:27:48","","","","0","","","","CC BY-SA 4.0"
"210553","2","","44830","2020-09-04 03:49:57","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a> <code>-s</code>, 6 bytes</h1>
<pre><code>TB*A*a
</code></pre>
<p>Converts to ASCII/Unicode, then to binary. the <code>-s</code> flag joins lists on space.</p>
<p><a href=""https://tio.run/##K8gs@P8/xEnLUSvx////Hqk5OfkK4flFOSmK/3WLAQ"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-04 03:49:57","","","","0","","","","CC BY-SA 4.0"
"210554","2","","35096","2020-09-04 03:57:32","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 10 bytes</h1>
<pre><code>C*FB*(a^s)
</code></pre>
<p>Sadly can't use the <code>-s</code> flag here.</p>
<p><a href=""https://tio.run/##K8gs@P/fWcvNSUsjMa5Y8////4YGBkBkoGAIZhiCaBATlTYEihsYgJUZgPkIYYg@ZOUg8wA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-04 03:57:32","","","","0","","","","CC BY-SA 4.0"
"210557","2","","50538","2020-09-04 04:45:02","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, <s>33</s> 18 bytes</h1>
<pre><code>$=({Aa-Ab}%26MZqq)
</code></pre>
<p>-15 bytes from Dlosc.</p>
<p><a href=""https://tio.run/##K8gs@P9fxVaj2jFR1zGpVtXIzDeqsFDz///EpOQULiBO/f8fAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>$=({AB((Ab&lt;Aa?-26 0)+Aa-Ab)}MZab) ; a,b → command line args
                            MZab  ; Map items of a and b to function, pass as (a,b)
   {                 Aa-Ab }      ; Subtract codepoints of a and b
       (Ab&lt;Aa?-26 0)+             ; Add -26 if b &gt; a
    AB(                   )       ; Take the absolute value of the whole thing
$=                                ; Check if all items of the mapped list are equal
</code></pre>
","80214","","80214","","2020-09-07 04:14:39","2020-09-07 04:14:39","","","","3","","","","CC BY-SA 4.0"
"210559","2","","50538","2020-09-04 05:59:49","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 14 bytes(SBCS)</h1>

<pre class=""lang-apl prettyprint-override""><code>1=≢∪26|-⌿⎕UCS⎕
</code></pre>
<p>Takes input as a two row matrix and returns truthy or falsey value</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qKO94L@h7aPORY86VhmZ1eg@6tn/qG9qqHMwkATJ/lcAgwKuR20T1R2dnNUV1J1dXNW5kIU9UnNy8oES4flFOSmoUkAdLkCZyChHJ3UA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>1=≢∪26|-⌿⎕UCS⎕
         ⎕UCS⎕ ⍝ Convert all characters to Unicode codepoints
       -⌿      ⍝ Subtract pairs of matrix along leading axis(x)
    26|        ⍝ Get residue(modulus) of 26 with each difference(works with negatives)
1=≢∪           ⍝ Check if number of unique remainders is equal to 1.
</code></pre>
","80214","","80214","","2020-09-04 06:31:19","2020-09-04 06:31:19","","","","2","","","","CC BY-SA 4.0"
"210560","2","","67357","2020-09-04 06:29:57","","2","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 13 bytes</h1>
<pre><code>aNz?zaNAZ?AZa
</code></pre>
<p>builtins.</p>
<p><a href=""https://tio.run/##K8gs@P8/0a/KvirRzzHK3jEq8f///44A"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-04 06:29:57","","","","2","","","","CC BY-SA 4.0"
"210561","2","","12368","2020-09-04 06:44:43","","2","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 20 bytes</h1>
<pre><code>PARM`[\\APRM\`\]\[]`
</code></pre>
<p>Uses the predefined printable ASCII variable, and regexes out the letters in the code.</p>
<p><a href=""https://tio.run/##K8gs@P8/wDHINyE6JsYxIMg3JiEmNiY6NuH/fwA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-05 06:17:57","2020-09-05 06:17:57","","","","1","","","","CC BY-SA 4.0"
"210562","2","","123723","2020-09-04 07:06:18","","2","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 5 bytes</h1>
<pre><code>PADCa
</code></pre>
<p>Removes all chacracters in the input from a predefined variable.</p>
<p><a href=""https://tio.run/##K8gs@P8/wNHFOfH///8eqTk5@YoA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 9 bytes</h1>
<pre><code>PARM(X^a)
</code></pre>
<p>Converts the characters of the input to regex, and removes the characters from the printable ASCII builtin.</p>
<p><a href=""https://tio.run/##K8gs@P8/wDHIVyMiLlHz////Hqk5OfmKAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-06 12:29:55","2020-09-06 12:29:55","","","","2","","","","CC BY-SA 4.0"
"210563","2","","123723","2020-09-04 07:38:19","","3","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>14</s></sup> 10 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⍞~⍨' '…'~'
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97f@j3nl1j3pXqCuoP2pYpl6nDhL9rwAEaVzqjk7OLq7qAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>-4 bytes from Adám!(inclusive range)</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>   ' '…'~'     range of chars in visible ASCII range
  ⍨            flip the arguments of the function on the left
⍞~             Get all characters not in input 
</code></pre>
","80214","","80214","","2020-11-17 06:05:21","2020-11-17 06:05:21","","","","2","","","","CC BY-SA 4.0"
"210584","2","","137957","2020-09-04 14:51:06","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 169 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>a←⍞
y←(⎕JSON((⎕SE.SALT.New'HttpCommand').Get'https://api.stackexchange.com/users?site=codegolf&amp;inname=',('\s+'⎕R'\%20')a).Data).items
{a≡1⊃y.display_name:y.user_id ⋄ 0}1
</code></pre>
<p>This took forever to figure out, lol.</p>
<p>Thanks to @Adám for saving me a lot of time, and a lot of bytes on the HTTP request.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>a←⍞                                 ⍝ Store string input
y←        ('\s+'⎕R'\%20')a          ⍝ Convert spaces to '%20' for query
  (⎕JSON((⎕SE.SALT.New'HttpCommand').Get'https://api.stackexchange.com/users?site=codegolf&amp;inname=',).Data).items
                                    ⍝ Get and parse JSON from API call using ⎕SE (session namespace)
 a≡⊃y.display_name                  ⍝ Is the input equal to the unwrapped user id? 
                                    ⍝ (display name comes as an array of strings)
{                  :y.user_id ⋄ 0}  ⍝ If so, print the user id
                                    ⍝ Else print zero
                                    ⍝ Call function with placeholder arg 1
</code></pre>
","80214","","","","","2020-09-04 14:51:06","","","","3","","","","CC BY-SA 4.0"
"210586","2","","129162","2020-09-04 15:20:08","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>110</s></sup> 73 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{'('∊⎕←⍵.safe_title:-⍵⋄⍵.alt}⎕JSON∊⎕SH∊'curl -L xkcd.com/'⍞'/info.0.json'
</code></pre>
<p>-37 bytes from Adám.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>⎕JSON∊⎕SH∊'curl -L xkcd.com/'⍞'/info.0.json'
                                     ⍝ Get the json data for the required page
                                     ⍝ Using ⎕SH to execute curl shell command
'('∊⎕←⍵.safe_title:                  ⍝ If the safe title does not contain a bracket,  
                    ⋄⍵.alt           ⍝ Print alt text
                  -⍵                 ⍝ Otherwise negate json data(Domain error)
</code></pre>
","80214","","80214","","2020-11-25 02:05:44","2020-11-25 02:05:44","","","","5","","","","CC BY-SA 4.0"
"210590","2","","209146","2020-09-04 16:26:47","","2","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 8 bytes</h1>
<pre><code>1NSTa\,b
</code></pre>
<p>Inclusive range of a and b, converts to string, find number of 1's.</p>
<p><a href=""https://tio.run/##K8gs@P/f0C84JDFGJ@k/kGn438jAAAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-04 16:26:47","","","","0","","","","CC BY-SA 4.0"
"210602","2","","66202","2020-09-05 04:26:34","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 7 bytes</h1>
<pre><code>$*(a,b)
</code></pre>
<p>just a modified factorial function.</p>
<p><a href=""https://tio.run/##K8gs@P9fRUsjUSdJ8////0b/TQE"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-05 04:26:34","","","","0","","","","CC BY-SA 4.0"
"210604","2","","59147","2020-09-05 06:13:02","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 47 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>'p.{7}(..)?P'{≢⍺ ⎕S⍬⊢⍵}('\d'⎕R{' '⍴⍨⍎⍵.Match})⍞
</code></pre>
<p>I wanted to make a matrix based matching solution for this, but Martin Ender's Regex ended up being simpler.</p>
<p><a href=""https://tio.run/##XVC7TsQwEOzzFel8VxDLzsPp6OiQVkBJE3E6rojECo4iilLzkHwdJRRUFJTQ8Dn7I2EcfHCcLUv2zOzujBtuDxZd015djnJ/txwVZ70bZlk2PyTVy8Or@K9UNk@n4t/lEa/PYabOFwrQSa9SJf5D/Jv4DZjsuFlfrIa5@JfQbBT/nJ5d365XXbJMau1YV2R0vd0TWGt22lClc8p5B7dU4l6QYaMtW7I65wLH4PajIAdBiaflwJCFMmfK/2h0ht4AwmHUacNVpIvAYIoFjw6GicP4YJAxtIAsCf6Pmvami07rPe@OdMX7gZAS@H@M4/qFKa4t76K3EGenzIUUNvzB9AvlVBkSfAM"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>'p.{7}(..)?P'{≢⍺ ⎕S⍬⊢⍵}('\d'⎕R{' '⍴⍨⍎⍵.Match})⍞
                                              ⍞ String input
                            ⎕R                  Perform Regex replacement
                        '\d'                    match all digits   
                              {' '⍴⍨⍎⍵.Match}   Execute match(convert to number), replace with that many spaces
             {≢⍺ ⎕S⍬⊢⍵}                         Tally number of matches of left argument in right
'p.{7}(..)?P'                                   Match two opposite colored pawns 7-9 spaces apart                        
</code></pre>
","80214","","80214","","2020-09-05 10:13:34","2020-09-05 10:13:34","","","","1","","","","CC BY-SA 4.0"
"210605","2","","199995","2020-09-05 07:12:00","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, <s>16</s> 12 bytes</h1>
<pre><code>TMXa&lt;2a+:@ga
</code></pre>
<p>-4 bytes from Dlosc (removed unnecessary function)</p>
<p>The same general approach that most other answers are using: Loop until we reach a multiple that can also be a binary number. Takes very long for numbers <span class=""math-container"">\$&gt;17\$</span>.</p>
<p><a href=""https://tio.run/##K8gs@P8/xDci0cYoUdvKIT3x////hiYA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 27 bytes</h1>
<pre><code>x:a
MN({a%x?0a}MTB,2**a)RM0
</code></pre>
<p>Converts all numbers till <span class=""math-container"">\$2^n\$</span> to binary and checks divisibility. Then removes all the 0's and gets the minimum. Takes very long for numbers <span class=""math-container"">\$&gt;14\$</span>.</p>
<p><a href=""https://tio.run/##K8gs@P@/wiqRy9dPozpRtcLeILHWN8RJx0hLK1EzyNfg////ZgA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-06 11:14:54","2020-09-06 11:14:54","","","","5","","","","CC BY-SA 4.0"
"210607","2","","210321","2020-09-05 09:27:51","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a> <code>-p</code>, 44 bytes</h1>
<pre><code>YaUQ({(a|&gt;0)RMx}M({y=aRMs?a^sx}M(PMaJs)))RMx
</code></pre>
<p>Probably my craziest Pip answer. There's definitely a shorter method, but I decided to roll with this.</p>
<p>-p pretty prints the final list for easier verification. Takes a very long time with 5 digit numbers.</p>
<p><a href=""https://tio.run/##K8gs@G@tEBqoUV1pmxjkW2wfnVhTUxxbUeurEeCb6FWsCeQFlRdr/o9MBCnSSKyxM9AM8gXJw3QkxhUjlGuCJP///29oZPxftwAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>YaUQ({(a|&gt;0)RMx}M({y=aRMs?a^sx}M(PMaJs)))RMx a → first command line argument
Ya                                           Yank a into variable y
                                 PMaJs       join each element of a with a space, get permutations
                  {y=aRMs?a^sx}M             filter out the permutations that are not in order
     {(a|&gt;0)RMx}M                            Strip leading zeros and empty strings in each split
                                         RMx remove empty strings from the whole result
  UQ                                         print the unique splits
</code></pre>
","80214","","","","","2020-09-05 09:27:51","","","","0","","","","CC BY-SA 4.0"
"210608","2","","144868","2020-09-05 09:56:16","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 23 bytes</h1>
<pre><code>PaFi,26P{z@?LCa&gt;i?as}Ma
</code></pre>
<p><a href=""https://tio.run/##BcExCoAwDAXQq/wDODk4qqA4KRYrOAcJNFBb0S5VPHt875RT1dAgRVmZ92mbsaNaGrq/iVS1c3GPnhJjIREJBWw8GDZRRn9lbE48Y06OrxsDs8fqGIYk/A"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>PaFi,26P{z@?LCa&gt;i?as}Ma
Pa                      Print the original string
  Fi,26                 loop with variable i across range 0-26 
                     Ma Map the input to the following function
        {z@?LCa&gt;i?as}   Replace any symbols with index lesser than i with a space
       P                Print the mapped string
</code></pre>
","80214","","","","","2020-09-05 09:56:16","","","","0","","","","CC BY-SA 4.0"
"210613","2","","204526","2020-09-05 13:41:22","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 138 bytes</h1>
<pre><code>%@![1A~!~]%![!!!1M[84W;1A]%\A[95W2M;84W;1A]%2W1M3A{3M[29W1M5W;1A]25W;%1A}]~!!0/[25WP~1M~]%\1A3M[29W1M5W;1A]25W;%[99W25WM1M;95W2M;1A]%84W;:
</code></pre>
<p>Works as expected for single digit numbers, but beyond that, the last root will be longer than the others.</p>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%25%40!%5B1A%7E!%7E%5D%25!%5B!!!1M%5B84W%3B1A%5D%25%5CA%5B95W2M%3B84W%3B1A%5D%252W1M3A%7B3M%5B29W1M5W%3B1A%5D25W%3B%251A%7D%5D%7E!!0%2F%5B25WP%7E1M%7E%5D%25%5C1A3M%5B29W1M5W%3B1A%5D25W%3B%25%5B99W25WM1M%3B95W2M%3B1A%5D%2584W%3B%3A&amp;input=5"" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2020-09-05 13:41:22","","","","0","","","","CC BY-SA 4.0"
"210634","2","","1285","2020-09-06 12:03:31","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 25 bytes</h1>
<pre><code>Y&quot;X &quot;XaFi,aP(i%2?RVyy)@&lt;a
</code></pre>
<p>A simple for loop.</p>
<p><a href=""https://tio.run/##K8gs@P8/UilCQSki0S1TJzFAI1PVyD4orLJS08Em8f///@aWAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-06 12:03:31","","","","0","","","","CC BY-SA 4.0"
"210635","2","","71093","2020-09-06 12:08:34","","4","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>51</s></sup> 30 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>'P1'
2⍴400
50/50⌿(⍳8)⌽8 8⍴'01'
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKO94L96gKE6l9Gj3i0mBgZcpgb6pgaPevZrPOrdbKH5qGevhYIFUErdwFAdpPp/AQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Outputs a netpbm image. Save the result to a .pbm file and view <a href=""http://paulcuth.me.uk/netpbm-viewer/"" rel=""nofollow noreferrer"">here</a>.</p>
<p>Since the output is too large for tio, here's the <a href=""https://raw.githubusercontent.com/razetime/code-golf/master/APL-code/chessboard.ppm"" rel=""nofollow noreferrer"">generated output.</a></p>
<p>-21 bytes(!) from Adám.</p>
<p>Here's the output converted to png:</p>
<p><a href=""https://i.stack.imgur.com/HbHrR.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HbHrR.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG9qZv6jtgkG/9UDDNW5jB71bjExMODSMDU4PN3UQP9R72YLzUc9ezWAggpADJTWAMoBKXUDdU0dKNNQXVNT8z/FJgAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-11-26 14:35:17","2020-11-26 14:35:17","","","","1","","","","CC BY-SA 4.0"
"210640","2","","34505","2020-09-06 14:13:00","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 54 bytes</h1>
<pre><code>x:Y0X40RAgoL40{Fi,40x@i:01110110@FB(y@&gt;i@&lt;3)Y0.xPxR0s}
</code></pre>
<p>Pip is turing complete?!</p>
<p>(Jokes aside, this was a fun pip answer.)</p>
<h2>Explanation</h2>
<pre><code>x:Y0X40RAgoL40{Fi,40x@i:01110110@FB(y@&gt;i@&lt;3)Y0.xPxR0s} 
x:Y0X40RAgo                                             Assign 40 spaces to x and replace the input indices with 1
                                                        The same value is also yanked to y.
           L40{                                      }  Repeat 40 times 
               Fi,40                                    Loop variable i through range 1-40
                    x@i:                                Assign character at index i to:
                        01110110@                       a number in 01110110 at index:
                                 FB(y@&gt;i@&lt;3)            a 3 letter substring of y starting at i, converted to binary.
                                            Y0.x        Yank(assign value) of 0 concantenated with x to y
                                                PxR0s   Print x with zeros replaced with spaces
</code></pre>
<p><a href=""https://tio.run/##K8gs@P@/wirSIMLEIMgxPd/HxKDaLVPHxKDCIdPKwNDQEIgNHNycNCod7DIdbIw1Iw30KgIqggyKa////29s8d/YEgA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-06 14:13:00","","","","0","","","","CC BY-SA 4.0"
"210641","2","","142655","2020-09-06 15:16:41","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 28 bytes</h1>
<pre><code>FlaIlQ'\PsX++v.lE{PsXv.l--v}
</code></pre>
<p>With a post decrement operator, this could be way shorter.</p>
<p><a href=""https://tio.run/##K8gs@P/fLSfRMydQPSagOEJbu0wvx7UayALSurpltf///4@JidHXB2IIqa8PAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-06 15:16:41","","","","0","","","","CC BY-SA 4.0"
"210653","1","","","2020-09-07 04:37:03","","20","2250","<p>Input a String and surround it with a rounded rectangle of alternating &quot;friendliness pellets&quot;.(<code>0</code>)</p>
<p><a href=""https://codegolf.meta.stackexchange.com/a/19190/80214"">Sandbox</a></p>
<p><a href=""https://i.stack.imgur.com/iGnOL.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/iGnOL.jpg"" alt=""enter image description here"" /></a></p>
<p>Idea originally from <a href=""https://codegolf.stackexchange.com/users/78850/lyxal"">Lyxal.</a></p>
<h1>Challenge</h1>
<p>Given a single line non-empty String of length <span class=""math-container"">\$&lt;100\$</span>, print the string with a rounded rectangle of alternating pellets(<code>0</code>) around it.</p>
<p>The rectangle must be 11 lines in height.</p>
<p>The first line of the rectangle <em>must</em> have at least 1 pellet.</p>
<p>The middle line of the rectangle must be at least 13 characters long. There must be a padding of one space on each side of the text.</p>
<p>Strings smaller than 9 characters must be padded with spaces equally on both sides to fit the above specification.
The right side is allowed to have one extra space if the string is of even length.</p>
<p>The template for the output is as follows:</p>
<pre><code>      00000..... 6 spaces
    0 4 spaces 
  0   2 spaces
 0    1 space
0     no spaces
</code></pre>
<p>If the string's length is greater than or equal to 9; the first line must have <span class=""math-container"">\$\text{length}-8\$</span> pellets.</p>
<h1>Example Input and Output</h1>
<p><strong>Input</strong>:</p>
<blockquote>
<p>Hello World!</p>
</blockquote>
<p><strong>Output</strong>:</p>
<pre><code>       0000  
     0      0  
   0          0
  0            0
 0              0
 0 Hello World! 0
 0              0
  0            0
   0          0
     0      0
       0000
</code></pre>
<p><strong>Input</strong></p>
<blockquote>
<p>0</p>
</blockquote>
<p><strong>Output</strong></p>
<pre><code>       0
     0   0  
   0       0
  0         0
 0           0
 0     0     0
 0           0
  0         0
   0       0
     0   0
       0
</code></pre>
<p><strong>Input</strong></p>
<blockquote>
<p>The quick brown fox</p>
</blockquote>
<p><strong>Output</strong></p>
<pre><code>       00000000000 
     0             0  
   0                 0
  0                   0
 0                     0
 0 the quick brown fox 0
 0                     0
  0                   0
   0                 0
     0             0
       00000000000
</code></pre>
<p><strong>Input</strong></p>
<blockquote>
<p>In this world, it's KILL or BE killed</p>
</blockquote>
<p><strong>Output</strong></p>
<pre><code>      00000000000000000000000000000
    0                               0
  0                                   0
 0                                     0
0                                       0
0 In this world, it's KILL or BE killed 0
0                                       0
 0                                     0
  0                                   0
    0                               0
      00000000000000000000000000000
</code></pre>
<p><strong>Input</strong></p>
<blockquote>
<p>hi there</p>
</blockquote>
<p><strong>Output</strong></p>
<pre><code>      0
    0   0
  0       0
 0         0
0           0
0 hi there  0
0           0
 0         0
  0       0
    0   0
      0
</code></pre>
<h1>Example code in Ruby</h1>
<p><a href=""https://tio.run/##vVLLTsMwELz7K4bkkvQR2goQqIQzf8ABcXCTTWtpa0e2C6oQ3x6cBxBy5IAPlj2zj9nR2tPu3DQyf75abBbrxeoFMVwtCwKT3vsDvEFhSXpCoWzBJITzNt@Td1lxMMd6Kxg5Apb1CVsRo7ZKe1TKOg9WmmAq1MQckkTPRYhmN0JV4Pv8Dv5AGvXJO0SrCMSOvn@zhJe3KUiXAuGE4korrySjlt6T1aIyFjqgkCgNuqifHhrzUGTePpPrpU5/0xgETJL6li33MFCdmK8aXUkhRpJK5WqW59YFpfd4U8G3zkTXjziZsJeTrNdLTi83aVaxCTPM2/RwD@RmIAtS3KITYxC/h/APtHAQIuKJLdidPCy9knVUjjzKBuxfvRpZxXLYicTJI0G60Zqkf1@OpnkM@2XwZCyXF58"" rel=""noreferrer"">Try it online!</a></p>
<pre class=""lang-ruby prettyprint-override""><code>a=[4,2,1,0] # space length to create circle

str=gets.chomp;
l = str.length;
# print first line of pellets
print &quot; &quot;*6
if l&lt;=9 then puts &quot;0&quot; else puts &quot;0&quot;*(l-8) end
    
# initial pattern
for n in a do 
    print &quot; &quot;*n +&quot;0&quot;+&quot; &quot;*(5-n)
    print &quot; &quot; if l&lt;=9
    print &quot; &quot;*(l-8) if l&gt;9
    puts &quot; &quot;*(5-n) +&quot;0&quot;

end
    
# display string with spaces
if l&lt;9 then puts &quot;0&quot;+&quot; &quot;*((11-l)/2).floor + str + &quot; &quot;*((12-l)/2).ceil + &quot;0&quot; else puts &quot;0 #{str} 0&quot; end

#initial pattern but reversed
for n in a.reverse do 
    print &quot; &quot;*n +&quot;0&quot;+&quot; &quot;*(5-n)
    print &quot; &quot; if l&lt;=9
    print &quot; &quot;*(l-8) if l&gt;9
    puts &quot; &quot;*(5-n) +&quot;0&quot;
end
    
# last line(same as first line)
print &quot; &quot;*6
if l&lt;=9 then puts &quot;0&quot; else puts &quot;0&quot;*(l-8) end


</code></pre>
<h1>Scoring</h1>
<p>This is <a href=""/questions/tagged/code-golf"" class=""post-tag"" title=""show questions tagged &#39;code-golf&#39;"" rel=""tag"">code-golf</a>. Shortest answer in each language wins.</p>
","80214","","80214","","2020-09-07 08:42:28","2020-09-09 09:30:06","Surround a string with ""friendliness pellets""","<code-golf><string><ascii-art>","6","0","4","","","CC BY-SA 4.0"
"210667","2","","12623","2020-09-07 11:37:28","","2","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 66 bytes</h1>
<pre><code>≔∕Ｓ|ι≔⁺⌈ＥιＬκ²ς/×=ς↓\↓⁺Ｌι¹←/←ς↑\↑⁺Ｌι¹↘Ｍ∕⁻ςＬ§ι⁰¦²→Ｐ§ι⁰Ｍ±²¦¹Ｐ×=ςＭ↘✂ι¹
</code></pre>
<p>My first Charcoal answer!</p>
<p>I wasn't getting a proper result with reflection, so I made the box manually.</p>
<p><a href=""https://tio.run/##S85ILErOT8z5//9R55RHHVPf79lcc24niN2461FPx/s9S8/tfL9nzbldhzadb9I/PN32fNOjtskxQAxUAJLYeWjno7YJ@kAMkpkIlJmILDPj/Z61QGMfNe4@3wQUPLQcaHjjhkPLDm161Dbp/Z4NUAGgqkMbD20CigNt2wC2BqSxbcajOU0gg/7/NzQyNjE1M7ewNKgBM2sQAkBWTUFmak1BfkliSX5NaV5mcn5RHgA"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a> (Verbose), 385 bytes</h1>
<pre><code>Assign(Divide(InputString,&quot;|&quot;),i)
Assign(Add(max(Each(i,Length(k))),2),v)
Print(&quot;/&quot;)
Print(Times(&quot;=&quot;,v))
Print(:Down,&quot;\\&quot;)
Print(:Down,Length(i)+1)
Print(:Left,&quot;/&quot;)
Print(:Left, v)
Print(:Up, &quot;\\&quot;)
Print(:Up,Length(i)+1)
Move(:DownRight)
Move(Minus(v,Length(AtIndex(i,0)))/2,:Right)
MultiPrint(AtIndex(i,0))
Move(Negate(2),1)
MultiPrint(Times(&quot;=&quot;,v))
Move(:DownRight)
Print(Slice(i,1))
</code></pre>
<p><a href=""https://tio.run/##ZY/LasMwEEX3@YqglURlErtvQxeGdBFISmnaXTaqPbGHOpKxZTUF/bsqajut6G64c3RGN69EmytRO5d1HZaSrtBgAXQtm17vdIuy5MQSxpHNRiIrCnoUJ/oo8ooi34AsdUU/GGM8Ydyw2bN/pSlZkGl8xSN0lDwQv52ydKU@JSf7PQmTUYfsIj4vNnDQ/I9vCObnU@lbw@eBygeBaKsMDAdesKz0GGxR9h01E5rptSzg5DstfZlFwtMJ7muNgzlgBssTlEID9d3jAA1b//vBAO1qzMHbYsaci5PLq@ub27v7pf0Z7W/gJ9sg2EZpoZXtJeaqlS4yLooKMNC@qw4PX98"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-07 11:37:28","","","","4","","","","CC BY-SA 4.0"
"210677","2","","210380","2020-09-07 16:02:37","","2","","<h1>Replace simple functions with lambdas</h1>
<p>Lambdas are a generally good way to save 2 bytes(at the very least), as compared to a regular function that requires braces.</p>
<p>Pip's lambdas, however, do not mimic the general attributes of a lambda in say, Python. You cannot shorten all standalone functions into lambdas.</p>
<p>They're an extension of the identity function <code>_</code>, where <code>_ = {a}</code>. This means that you can create a lambda out of a function <em>only</em> if you are writing a function with a single expression.</p>
<p>Lambdas in Pip have some interesting uses other than single expressions. For example, you can reference the main function's arguments without yanking/copying them.</p>
<p>From <a href=""https://github.com/dloscutoff/pip/wiki/2.-Functions"" rel=""nofollow noreferrer"">Dlosc's tutorial on functions</a>:</p>
<blockquote>
<p>The function <code>_+a</code> adds its argument to the program's first command-line
argument. <code>a</code> still has its top-level value because it's not inside
curly braces.</p>
</blockquote>
<p>The catch is that you cannot use commands(If, Else if, Loops) and everything must come down to one statement, as it is generally with applying operators on functions.</p>
<p>Due to those restrictions, Pip lambdas are generally better suited for small mapping or filtering functions. Happy golfing!</p>
<p>If you do find an interesting use case, do tell me.</p>
","80214","","","","","2020-09-07 16:02:37","","","","0","","","","CC BY-SA 4.0"
"210699","2","","210671","2020-09-08 01:44:23","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 25 bytes</h1>
<pre><code>@(_&lt;=aFI[5 2o]*t**(#a-1))
</code></pre>
<p>A simple solution with filtering.</p>
<h2>Explanation</h2>
<pre><code>@(_&lt;=aFI[5 2o]*t**(#a-1))
               t**(#a-1)  ten to the power (length of input - 1) 
        [5 2o]*           times the list [5,2,1]
  _&lt;=aFI                  Filtered by lambda: element &lt;= input?
@(                      ) first element of filtered list
</code></pre>
<p><a href=""https://tio.run/##K8gs@P/fQSPexjbRzTPaVMEoP1arREtLQzlR11BT8////5aYAAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-08 01:44:23","","","","0","","","","CC BY-SA 4.0"
"210700","2","","102219","2020-09-08 01:56:54","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, <s>17</s> 14 bytes</h1>
<pre><code>$+(**_*BMERVa)
</code></pre>
<p>Doesn't work on TIO because unary ** is only in the latest Pip version.</p>
<p><a href=""https://i.stack.imgur.com/23nio.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/23nio.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://tio.run/##K8gs@P9fRVtDSytey8nXNSgsUfP///@GhgaGEGAAhoYGYBKCIYQBGINkDRBiYPq/bgEA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-09 02:47:50","2020-09-09 02:47:50","","","","3","","","","CC BY-SA 4.0"
"210717","2","","189358","2020-09-08 12:56:40","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 5 bytes</h1>
<pre><code>$QUWa
</code></pre>
<p>The existing solution used a longer iterative comparison. Thankfully, the unweave function exists.</p>
<p><a href=""https://tio.run/##K8gs@P9fJTA0PPH///@JiYlJSQA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-08 12:56:40","","","","0","","","","CC BY-SA 4.0"
"210755","2","","910","2020-09-09 03:08:11","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 2 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⌊√
</code></pre>
<p>Floor of root of the input.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn//1FP16OOWf/THrVNeNTb96ir@VHvmke9Ww6tN37UNvFR39TgIGcgGeLhGfw/TcEMAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a>, <a href=""https://tio.run/##AUsAtP9hcGwtZHlhbG9nLWV4dGVuZGVk///ijIriiJr/ZuKGkOKNjuKKg@KNrOKNtMKvM@KGkeKOlVNSQ@KOlVRISVP/4o2qZsKo4o2zNTA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Verify 50 test cases</a></p>
","80214","","","","","2020-09-09 03:08:11","","","","0","","","","CC BY-SA 4.0"
"210769","2","","210733","2020-09-09 07:37:01","","5","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, <s>27</s> 59 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a{[a.size,a.upcase.bytes.map{|i|i-64}.sum].all? &amp;:prime?}
</code></pre>
<p>+33 bytes after correcting the solution, thanks to DrQuarius.</p>
<p><a href=""https://tio.run/##ZZBdb4IwFIbv@ysaL@aaIAFFmEvULBuL@2AaJdmF8aLMgzQpbVckxqm/ncHMMnC3z/Oec95W59G@GEawYQLNNEsBd0Y41Dng676BXZughIo/1jNwt0fQ3eKlwXplTk3VvZzXsp6BBx5BD0wwsQlpxGu7bfssAz/05/9OoglwLiv8SHl25v0uQYvg6dW/wDcExVruRBN77nmLCqAm3DI/IOhZJvW4Y2CnrBLufBHum2nb8n7bvEvN1zVrW6XuOuX7pKANU12xCNoCh9lk@uYvLqfsssMQxBohDZ8504Dbqvr6NoqHRWdED0tqZuwLDGrm6oNmYEb7LWRmStXhyI6s4zonM8vTlUk5H@Or25/p8alQOF62mMhAb3ECGlqr4hs"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##ZVFdb4IwFH3vr2h4mCNBIoowTdQsG4v7YBol2YPzocyqTWrp@Ihh6m9nBewE93bPuef23p4TJn6aDXy8IQxMQ7LDsDmEXphgeNvVoGWoYIvYhetosN1Rwf38tcZ1hI5P@EMwq2htDfZsFTwSRtjGQz6tvG0YZdN1PGf2byUYY0qDnH5CNCr5blsFc/f5zbmi71SwDoM9q9O2Vb7CXVxpWELfU8FLsK3KTQ2a4hRv7zAvrauNli2v@QhCuqp0jZZot03xv4ChWiff0lJBjCmejifvzvx6yhA3DDBbARDi74SEGDZ4bn0DrAdZc4gOC6RH5AdrSE/4F4qw7qcxjvQd4ocjOZKmZZ70KNktdUTpCN70i@nRKeNJHEFFWBlvUygm4qivAA7XC6WIVlmWQCQqSxGkLM/5SViJTVJFWAKAcs8nyz91tajwSg4UeUlQpCRBGY1EeSCyLmOo6M7W/91V2C3RxWRlmf0C"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Verify all test cases</a></p>
","80214","","80214","","2020-09-13 06:09:06","2020-09-13 06:09:06","","","","7","","","","CC BY-SA 4.0"
"210794","2","","210770","2020-09-09 10:13:01","","2","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 12 bytes</h1>
<pre><code>!$+(A_Ma)%#a
</code></pre>
<p><a href=""https://tio.run/##K8gs@P9fUUVbwzHeN1FTVTnx////efkFqQA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>!$+(A_Ma)%#a a → input
   (A_Ma)    Map a to Unicode/ASCII codepoints
         %#a Modulo the list by it's length
 $+          Sum up the remainders
!            Not(returns 0 for any positive number, 1 for 0)
</code></pre>
","80214","","","","","2020-09-09 10:13:01","","","","0","","","","CC BY-SA 4.0"
"210799","2","","210770","2020-09-09 10:39:38","","3","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, <s>43</s> <s>37</s> <s>36</s> 32 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a{a.bytes.all?{|n|n%a.size&lt;1}}
</code></pre>
<p>if only map could be used on strings..</p>
<p>-10 bytes from ovs.</p>
<p>-1 byte from Dingus.</p>
<p><a href=""https://tio.run/##dVBLi8IwEL7PrxgKgkItndbWHqwiwrJ72svexEOKqQRCUvo4@Prt3Ym2uxcd8iWT4ZtvHnVXnPu8kCdl4MtUXYujfXctfwE@pdb2L/ohdCMHf7qMkEJiZE8QzXxMQFuN//ZTd2MCTgeaozM1hp09ypPV5QvxdDkww6FIPGYyIs7OYIv4rlCaMIPA2Eri6@aJwqcgPaaY@QvIELM3ekmKceROkrLwAnJpjgBl3s/X4iqC4tzKJhBab643czMTETTqIld0v/elrVGhMrj3Hqv0fI8XxPc4O7tbhmuVH9eDdwCssNyrA7gy/S8"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-09 11:03:22","2020-09-09 11:03:22","","","","8","","","","CC BY-SA 4.0"
"210873","2","","66731","2020-09-10 07:53:21","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 25 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{↑(-⌊((⌈/≢¨⍵)+≢¨⍵)÷2)↑¨⍵}
</code></pre>
<p>There's an APLcart snippet for centering in a field:</p>
<p><code>Is(⊢↑⍨∘-∘⌊2÷⍨+∘≢)Dv</code></p>
<p>This answer is partly based on it.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v/pR20QN3Uc9XRoaj3o69B91Ljq04lHvVk1tOOvwdiNNoCIwp/Z/2qO2CY96@x51NT/qXfOod8uh9cZAyUd9U4ODnIFkiIdn8P80BXW3/Hx1BfWkxKKkxCp1LqAEUJu6OhdQxiM1JwckF55flJOCKhVQlJ9elJibm5mXrhBQWlWVk1oMVKgGxM75KakK7vk5aeoA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{↑(-⌊((⌈/≢¨⍵)+≢¨⍵)÷2)↑¨⍵}
      (⌈/≢¨⍵)             Maximum of lengths of each line
             +≢¨⍵         Plus length of each line
     (           )÷2      divided by two
   -⌊(           )        Floor it, and take negative
  (                 )↑¨⍵  Take that much from each line
                          (taking a negative value prepends spaces)
 ↑                        Mix the final array to print on each line
{                       } dfn
</code></pre>
","80214","","","","","2020-09-10 07:53:21","","","","0","","","","CC BY-SA 4.0"
"210876","2","","84606","2020-09-10 10:31:18","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 24 bytes</h1>
<pre><code>{b?UCaa}MZLCRVa(_NAZ Ma)
</code></pre>
<p>Gets a binary array for the uppercase indices and uppercases those places in the reversed lowercase string.</p>
<p><a href=""https://tio.run/##K8gs@P@/Osk@1DkxsdY3ysc5KCxRI97PMUrBN1Hz////Hqk5Ofk6Cr6ZKXmZ6RklicUA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-10 10:31:18","","","","0","","","","CC BY-SA 4.0"
"210915","2","","164629","2020-09-11 05:49:32","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 23 bytes</h1>
<pre><code>Ya^by@0AL(UC@_.@&gt;_M@&gt;y)
</code></pre>
<p>might be shorter with regex substitution.</p>
<p><a href=""https://tio.run/##K8gs@P8/MjEuqdLBwNFHI9TZIV7PwS7e18GuUvP///@5qTp5@To5mdmp/3UA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-11 05:49:32","","","","0","","","","CC BY-SA 4.0"
"210948","2","","84050","2020-09-11 16:42:29","","1","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 41 bytes</h1>
<pre><code>¿⁼η⁼θ¹o≔⁺³×θ²κＵＲκ⁺²ηＰ×κ_Ｍ⁺η¹↓Ｐκ↗Ｆη«Ｐ×θ o↑
</code></pre>
<p>Draws a box to get the vertical sides, then manually draws the top and bottom.</p>
<p>Then, prints the o's line by line.</p>
<p>Link is to verbose version of code.</p>
<p><a href=""https://tio.run/##ZY49C8IwFEX3/IqQKc/GwY@pW0HdBCk6iUhtX5vQ2JikVUT87bFiHcTtwLn3cnOZudxkOgRV8qXtMu25FANYMQEAunGqaTkzDAhqj5Qk3quq4bPIjqaiBpJi3mZNpZHXIikKPhUSgKw73apPd6vO6HvJjuwtzBW5jCYiXphb8xOsBxvvLqmqZAtkZRyXQB9/a1Yw2l@i3zw8Q9jPxfwQxuMrupPx2FOBH1bl/QU"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-11 16:42:29","","","","0","","","","CC BY-SA 4.0"
"210963","2","","171679","2020-09-12 04:59:56","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>28</s></sup> 20 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{↑x,1↓⌽x←∊¨↑¨∘⍵¨⍳≢⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v/pR28QKHcNHbZMf9eyteNQ24VFH16EVQEEg0THjUe9WIN27@VHnIiCz9n8aSEFv36Ou5ke9ax71bjm03hio9FHf1OAgZyAZ4uEZ/D9NQd3QyNjE1MzcwtJAHQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>-8 bytes from Adám.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{↑x,1↓⌽x←∊¨↑¨∘⍵¨⍳≢⍵} ⍵ → input.
                ⍳≢⍵  range 1..length(input)
           ↑¨∘⍵¨     pad each input character with i spaces
         ∊¨          flatten each row
       x←            save that as x
  x,1↓⌽              join it with its reverse
 ↑                   convert to matrix(join with newlines)
</code></pre>
","80214","","80214","","2020-12-06 15:06:06","2020-12-06 15:06:06","","","","1","","","","CC BY-SA 4.0"
"210964","2","","176010","2020-09-12 06:26:17","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 13 bytes</h1>
<pre><code>{aGTb?ab}MZab
</code></pre>
<p>Maps zipped pairs of the two inputs and then returns the greater one.</p>
<p>Inputs must be padded with spaces.</p>
<p><a href=""https://tio.run/##K8gs@P@/OtE9JMk@ManWNyox6f///4bmRoYG/xUUzA0MAQ"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-12 12:00:31","2020-09-12 12:00:31","","","","2","","","","CC BY-SA 4.0"
"210965","2","","47562","2020-09-12 06:53:30","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <s>29</s> 24 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{(⊂∘⍋⌷⊢)+⌿⍵(⊥⍣¯1)∊*∘⍳/⍺}
</code></pre>
<p>-5 bytes from Jo King.</p>
<p>Takes inputs as <code>a n</code> function <code>b</code>.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkGXECWWxCQZWhkYf6/WuNRV9OjjhmPersf9Wx/1LVIU/tRz/5HvVuB4ksf9S4@tN5Q81FHlxZYyWb9R727av@nATU/6u171NX8qHfNo94th9YbP2qbCDQ2OMgZSIZ4eAb/N1IwNFBIUzBV4DJWMAKxjLhMFQyBtBkA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>

<pre class=""lang-apl prettyprint-override""><code>{(⊂∘⍋⌷⊢)+⌿(⊃⌽⍵)(⊥⍣¯1)(⊃⍵)*⍳⍺}
</code></pre>
<p>Takes inputs as <code>n</code> function <code>a b</code></p>
<p>Thanks to <a href=""https://chat.stackexchange.com/transcript/message/55516302#55516302"">Jo King</a> for helping me fix this answer.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkGXECWWxCQZWhkYf6/WuNRV9OjjhmPersf9Wx/1LVIU/tRz36gYPOjnr2PerdqAplLH/UuPrTeUBMsChTSetS7@VHvrtr/aUBTHvX2gYXXPOrdcmi98aO2iUDzg4OcgWSIh2fwf0MDhTQFIwVTBS4jEMtYwYjLEEibKpgBAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{(⊂∘⍋⌷⊢)+⌿(⊃⌽⍵)(⊥⍣¯1)(⊃⍵)*⍳⍺} ⍺ → n, ⍵ → [a,b]
                          ⍳⍺  range (1..n) 
                     (⊃⍵)*    a to the power of the range
          (⊃⌽⍵)               take b from reverse of ⍵
               (⊥⍣¯1)         inverse encode(decode) using b till it reaches zero
        +⌿                    reduce with addition along non-leading axis
                              i.e: sum the columns
 (⊂∘⍋⌷⊢)                      tacit fn:
    ⍋                         Get indices for ascending order
     ⌷                        Get elements at those indices
      ⊢                       From the right arg
  ⊂                           Enclose it
</code></pre>
","80214","","80214","","2020-09-12 08:16:08","2020-09-12 08:16:08","","","","0","","","","CC BY-SA 4.0"
"210967","2","","1775","2020-09-12 07:49:09","","3","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <s>21</s> 17 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍵≤9:0⋄1+∇+/⍎¨⍕⍵}
</code></pre>
<p>-4 bytes from Jo King.</p>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qHeuJQIoGHMBBQwNFAxBtIWCAZhriRUomIAkzYyMTRSMQCxzEzMjQwjT2BJCG5mZm1tYQE01AJqm8ahvqlsQkAgI0HzUNsHQyMJcwdjkf/Wj3q2POpdYWhk86m4x1H7U0a6t/6i379CKR71TgVK1/9OAioECj7qaH/WuedS75dB640dtE4HmBAc5A8kQD8/g/2kKSI7jSlMwNAASFiAGdvcDZUCOB1JglwNpY5AY1M1AlgEA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>

<pre class=""lang-apl prettyprint-override""><code>{s←+/⍎¨⍕⍵⋄⍵≤9:0⋄1+∇s}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qHeuJQIoGHMBBQwNFAxBtIWCAZhriRUomIAkzYyMTRSMQCxzEzMjQwjT2BJCG5mZm1tYQE01AJqm8ahvqlsQkAgI0HzUNsHQyMJcwdjkf3UxkKOt/6i379CKR71TH/VufdTdAiI7l1haGQDZhtqPOtqLa/@nAdUBVT3qan7Uu@ZR75ZD640ftU0Emhcc5AwkQzw8g/@nKSA5kitNwdAASFiAGNj9AZQBeQJIgX0ApI1BYlC3A1kGAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{s←+/⍎¨⍕⍵⋄⍵≤9:0⋄1+∇s} ⍵ → input
       ⍕⍵             convert ⍵ to string
     ⍎¨               execute each character(getting digits)
   +/                 reduce to sum of digits
 s←                   assign to s
          ⍵≤9:        if number is single digit
              0       return 0, stop recursion
                1+∇s  Otherwise return 1+f(sum)
</code></pre>
","80214","","80214","","2020-09-12 08:13:06","2020-09-12 08:13:06","","","","1","","","","CC BY-SA 4.0"
"210970","2","","181128","2020-09-12 10:53:59","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 15 bytes</h1>
<pre><code>YTBa^0 2=#y&amp;$=y
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/MsQpMc5AwchWuVJNxbby////RuYA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>A much shorter pip solution.</p>
<h2>Explanation</h2>
<pre><code>YTBa^0 2=#y&amp;$=y a → input integer
YTBa^0         Yank binary representation of a into var y, split on 0's
       2=#y     Length of y = 2?
           &amp;$=y and all items of y are equal?
                Implicit output of boolean
</code></pre>
","80214","","","","","2020-09-12 10:53:59","","","","0","","","","CC BY-SA 4.0"
"210972","2","","129340","2020-09-12 12:06:29","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>21</s></sup> 19 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍵=10⊥⌽⍵|⍨1↓⍳1+≢⍕⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v/pR71ZbQ4NHXUsf9ewFsmse9a4wfNQ2@VHvZkPtR52LHvVOBYrW/k971DbhUW/fo67mR71rHvVuObTe@FHbxEd9U4ODnIFkiIdn8P80BTOuNAVzI0NDY0NDAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Creates two lists of digits and check if they are equal.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⍵=10⊥⌽⍵|⍨1↓⍳1+≢⍕⍵} ⍵ → input
               ≢⍕⍵  length of ⍵ as a string
             1+     +1
            ⍳       range from 1 to that
          1↓        Drop first element 
       ⍵|⍨          ⍵ mod each element in range
      ⌽             reversed
   10⊥              converted from base 10
 ⍵=                 equals the input?
</code></pre>
","80214","","80214","","2020-12-21 17:07:53","2020-12-21 17:07:53","","","","0","","","","CC BY-SA 4.0"
"210985","2","","1262","2020-09-12 13:49:50","","0","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 22 bytes</h1>
<pre><code>Ｆ…·¹θ⎇‹﹪⁺×ιη⌊∕θ²θη¶\¦_
</code></pre>
<p>It took a while to figure out the right formula, but it now works! Credit to the Delphi answer.</p>
<p>Link is to verbose version of code.</p>
<p><a href=""https://tio.run/##JctBCsIwEEDRq0hWMzBdKHoAQQqCbqQ7IxKT0Q6kCU1ooKePEXcPPt@OJtlofK19THAO1i9ZCt9M@DBsaUbcDJyCSStcOGe4Rrf4CEfnYJCJMwiNSL2P7T5JEccw0w4R2/orSgetFamnwlrvB9o/atcVTq@Yucnx3/Jevw"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-12 13:49:50","","","","0","","","","CC BY-SA 4.0"
"211008","2","","125133","2020-09-13 07:45:52","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 3 bytes</h1>
<pre><code>$=a
</code></pre>
<p>fold by equality.</p>
<p><a href=""https://tio.run/##K8gs@P9fxTbx////lpaWAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-13 07:45:52","","","","0","","","","CC BY-SA 4.0"
"211009","2","","198808","2020-09-13 08:17:24","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 12 bytes</h1>
<pre><code>UQ(a**\,4)%t
</code></pre>
<p>takes range from 1 to 4, takes powers, mod 10, uniquify.</p>
<p><a href=""https://tio.run/##K8gs@P8/NFAjUUsrRsdEU7Xk////xgbGAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-13 08:17:24","","","","0","","","","CC BY-SA 4.0"
"211010","2","","193357","2020-09-13 09:19:40","","1","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 26 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>10⊥'rothuvsein'⍳7⊢/⍤⍴¨≠⍛⊆⍨
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qp/@jtgkG/w0NHnUtVS/KL8koLStOzcxTf9S72fxR1yL9R71LHvVuObTiUeeCR72zH3W1Pepd8T8NqOdRb9@jruZHvWtA0uuNH7VNBJoWHOQMJEM8PIP/pymo5@elKpSU5yuUZBSlpkJIdS6geFVqUb4CmICqUAcA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A simple function which checks the first two letters of each word.</p>
<p>-30 bytes from Adám using Kevin Cruijssen's idea.</p>
<h2>Explanation(old)</h2>
<pre class=""lang-apl prettyprint-override""><code>     {⍕2÷⍨1-⍨(2↑⍵)(⍸⍷)'zeontwthfofisiseeinite'} inner fn: 
             (2↑⍵)                              take first two letters
                  (⍸⍷)'zeontwthfofisiseeinite'} find index of the letters in hardcoded string
       2÷⍨1-⍨                                   subtract 1, divide by 2
      ⍕                                         stringify
{⍎⊃,/{⍕2÷⍨1-⍨(2↑⍵)(⍸⍷)'zeontwthfofisiseeinite'}¨' '(≠⊆⊢)⍵} ⍵ → input
                                                ' '(≠⊆⊢)⍵  split input on spaces
   ,/                                                      join output of inner fn
 ⍎⊃                                                        execute it
</code></pre>
","80214","","80214","","2020-12-29 03:35:39","2020-12-29 03:35:39","","","","2","","","","CC BY-SA 4.0"
"211011","2","","126264","2020-09-13 09:30:18","","3","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 15 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{4≤⍵⍧∘.+⍨3*⍨⍳⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pSszMTfyf9qhtgsb/apNHnUse9W591Lv8UccMPe1HvSuMtYDEo97NQNHa/5r/0xQMzY0s/@sWAwA"" rel=""nofollow noreferrer"" title=""APL (dzaima/APL) – Try It Online"">Try it online!</a></p>
<p>Same method as all the other answers. Only works till 4104 due to brute forcing.</p>
<p>more than 20 bytes golfed off with dzaima's help at the APL orchard.</p>
<p>The output appears with a ⊂ next to it, which has been patched in the latest version of the interpreter.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{4≤⍵⍧∘.+⍨3*⍨⍳⍵} ⍵ → input
         3*⍨⍳⍵  range 1 to n, cubed
     ∘.+⍨       dot product, addition with itself
   ⍵⍧           number of times ⍵ appears in the sums
 4≤             is 4 less than or equal to that?
</code></pre>
","80214","","80214","","2020-12-21 17:10:14","2020-12-21 17:10:14","","","","0","","","","CC BY-SA 4.0"
"211014","2","","126820","2020-09-13 09:41:45","","3","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 19 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{{(⍺+⍵*÷3)*÷3}/⍵/1}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG9qQMCjtgnGJv@rqzUe9e7SftS7VevwdmNNEFGrD@TpG9b@TwMqedTb96ir@VHvmke9Ww6tN37UNhGoOTjIGUiGeHgG/09TMORKUzACYmMgNgFiUyA2A2JDAwMDAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Uses the cube root approximation method, which very, very slowly creeps towards the value of the plastic number.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{{(⍺+⍵*÷3)*÷3}/⍵/1} ⍵ → input
               ⍵/1} replicate 1 ⍵ times
 {           }/     reduce by inner fn:
          *÷3       cube root of
     ⍵*÷3           cube root of right arg
   ⍺+               plus left arg
</code></pre>
","80214","","","","","2020-09-13 09:41:45","","","","0","","","","CC BY-SA 4.0"
"211019","2","","85061","2020-09-13 13:36:23","","1","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 12 bytes</h1>
<pre><code>Ｆ³³⁺×=⁺¹‽⁶¶⟲
</code></pre>
<p>Beats Pyth by 1 byte!</p>
<p>Link is to verbose version of code.</p>
<p><a href=""https://tio.run/##S85ILErOT8z5/98tv0jD2FhTIaAoM69EIyCntFgjJDM3tVhDyVZJx1A7KDEvJT9Xw0xTU0cpJk9JU5MrKL8ksST1////ujll/3V1U1LLUouS8osz0yoB"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-13 13:36:23","","","","0","","","","CC BY-SA 4.0"
"211048","2","","211028","2020-09-14 04:22:33","","3","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <s>19</s> 18 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⊢(÷⍨×0=|)1⊥∘⍸0=⍳|⊢
</code></pre>
<p><a href=""https://tio.run/##VdDNCkFREAfwvae4SxZqzue9FmyU2AkvoMRGWFJ2Srp1xEJsbJSyUBYUa95kXuSauT7vWZz6NXOm@Z/moJttjZrdfidCt/X4DL1sweulPhRM8aVkwpcqSZ2kSdIy5Ycy@KeQwFRv6lyi2QD8j7K@/DUrkDqu6pjCaKWNMRYC4/tgadLrsU3hfFWq4XQhZOAzqlWC0hGGu/Tjiu7wWEN@nBEY7nG2QXeDPLrzmMpRmzrRzTGcoDuiu9xPCqdLmlGvFelulCv1qH0/pAV9kKJvMBSWAnIqjsL789LxrhnvCQ"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Conversion to train by Jo King.(-3 bytes)</p>
<p>-1 more byte from Jo King after changing the check condition.</p>
<h1>Older answer, 22 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{(⊢×⌊=⊢)⍵÷⍨+/⍸0=⍵|⍨⍳⍵}
</code></pre>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{(⊢×⌊=⊢)⍵÷⍨+/⍸0=⍵|⍨⍳⍵} ⍵ → input
                   ⍳⍵  range 1-⍵
                ⍵|⍨    mod ⍵
              0=       check which ones are divisors
             ⍸         get the indices (factors)
           +/          sum the factors
        ⍵÷⍨            divide by ⍵
 (⊢×⌊=⊢)               Inner tacit fn:
    ⌊=⊢                Floor equals right? (integer test, returns 0 or 1)
  ⊢×                   times right 
</code></pre>
","80214","","80214","","2020-09-14 05:41:26","2020-09-14 05:41:26","","","","1","","","","CC BY-SA 4.0"
"211061","2","","144116","2020-09-14 09:54:08","","3","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>26</s></sup> 21 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⌈/1 1(∨⌿⍉∘⌽,⍉,⍉⍤⊢,⊢)⊢
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn//1FPh76hgqHGo44Vj3r2P@rtfNQx41HPXh0gC4Qf9S551LVIB4g1gfh/2qO2CY96@x51NT/qXfOod8uh9caP2iY@6psaHOQMJEM8PIP/pykYAyFQUsEISEOwIZA0BNIA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Algorithm taken from the J answer, and <a href=""https://codegolf.stackexchange.com/a/40084/80214"">verify a magic square.</a></p>
<p>-5 bytes from Adám.</p>
<p>Takes input as a 3x3 integer matrix where:</p>
<p>1 → blank,
2 → X,
3 → O.</p>
<p>returns the appropriate integer for X and O, 1 if it's a tie.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⌈/∨⌿(1 1∘⍉∘⌽,1 1∘⍉,⍉,⊢)⍵} ⍵ → input
     (                 )⍵  pass ⍵ to inner fn:
                      ⊢    return matrix containing argument,
                    ⍉,     argument transposed,
              1 1∘⍉,       it's main diagonal,
      1 1∘⍉∘⌽,             and the main diagonal of it's reverse.
   ∨⌿(                 )   take GCD of each column of the resultant matrix
 ⌈/                        take the maximum of that
</code></pre>
","80214","","80214","","2021-01-06 00:22:50","2021-01-06 00:22:50","","","","3","","","","CC BY-SA 4.0"
"211091","2","","85363","2020-09-15 08:00:13","","1","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 6 bytes</h1>
<pre><code>θ¿η‖↓‖
</code></pre>
<p>Link is to verbose version of code.</p>
<p><a href=""https://tio.run/##S85ILErOT8z5/z@gKDOvRKNQUyEzTSNDUyEoNS0nNblEw8olvzxPUyE1pzgVJvb/f7SSgkK@gn5Mnq5uDZBUUKgBEvoKMTFKOoax/3VzygA"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-15 08:00:13","","","","0","","","","CC BY-SA 4.0"
"211094","2","","89283","2020-09-15 09:03:39","","1","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 15 bytes</h1>
<pre><code>Ｅ²⁶⎇﹪ι²α⁺ΦαμA⟲⁶
</code></pre>
<p>Link is to verbose version of code.</p>
<p><a href=""https://tio.run/##BcExCoAwDADA3Wc4JZAuDu4OugkifiDWiIVqIFbB18e7eLBF5ezeczygaWkRu9g@GHV7skKiBolpys8NQ8pFDJhOpLqrEbGatXARaNHdQ9jkFVv1Tvvn4f0B"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-15 09:03:39","","","","0","","","","CC BY-SA 4.0"
"211099","2","","89283","2020-09-15 09:50:55","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a> <code>-n</code>, 18 bytes</h1>
<pre><code>(z.z)@&gt;_@&lt;2X13M,26
</code></pre>
<p>Pip doesn't have transpose, so I just took two letter substrings and repeated them.</p>
<p><code>-n</code> joins lists with newlines.</p>
<p><a href=""https://tio.run/##K8gs@P9fo0qvStPBLt7BxijC0NhXx8js////unkA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-15 09:50:55","","","","0","","","","CC BY-SA 4.0"
"211100","2","","200744","2020-09-15 10:47:33","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 16 bytes</h1>
<pre><code>@UW(aRMw^`[()]`)
</code></pre>
<p><a href=""https://tio.run/##K8gs@P/fITRcIzHItzwuIVpDMzZB8////xqemgoa3pp5@eUKGp45OZoKTqlcGr6VILq4REEjODUnTRMA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>Unweave works really well in this solution.</p>
<h2>Explanation</h2>
<pre><code>@UW(aRMw^`[()]`) ; a → input 
    aRMw         ; Remove all whitespace
        ^`[()]`  ; Split on parentheses
 UW              ; Unweave into two lists
                 ; Each with alternating elements
@                ; Take the first one
                 ; Display implicitly
</code></pre>
","80214","","","","","2020-09-15 10:47:33","","","","0","","","","CC BY-SA 4.0"
"211102","2","","182212","2020-09-15 11:22:21","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 28 bytes</h1>
<pre><code>PZRV(PZRV(a@&gt;_Jb).bX2*_M,#a)
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/ICooTANMJDrYxXslaeolRRhpxfvqKCdq/v//3yM1Jyf/v95/3TwA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>There's probably a shorter way with a single palindromize use, but I was unable to find it.</p>
<h2>Explanation</h2>
<pre><code>PZRV(PZRV(a@&gt;_Jb).bX2*_M,#a) a → input
                        ,#a  range from 0  to length of a
                       M     map the lambda on the left to each item in range
                             _ → argument(each element of list)
          a@&gt;_               Slice of input after index _
              Jb             Join characters with second input
                 bX2*_       repeat second input _ times
                .            concatenate the two
       RV                    reverse it: 'b..' → '..b'
     PZ                      palindromize the string '..b' → '..b..'
  RV(                      ) reverse the whole mapped list to get top part of the mat
PZ                           palindromize for full mat
</code></pre>
","80214","","80214","","2020-09-15 12:30:17","2020-09-15 12:30:17","","","","2","","","","CC BY-SA 4.0"
"211131","2","","104585","2020-09-16 03:03:19","","4","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <s>27</s> 16 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>1+(⍳!⊢)+.×⊢*⍨1+⍳
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTflfbaitYfiobbLGo65Fio96VxjoPOrdrPmod6umtt7h6UBaCyhoqA0UBLJruao18CvUQVIKNFkDyFEEasBjIDZVIDvgykCitf@BymCqwOYgKfif9qhtwqPevkddzY961zzq3XJovfGjtomP@qYGBzkDyRAPz@D/aQqGXGkKRkBsDMQmQGwKAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Formula taken from caird coinheringaahing.</p>
<p>-11 bytes from Bubbler (conversion to tacit form.)</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>1+(⍳!⊢)+.×⊢*⍨1+⍳ 
             1+⍳ 1 + range 1 - n
          ⊢*⍨    to the power n
  (⍳!⊢)          binomial coefficients of n
       +.×       inner(dot) product of the two
1+               + 1
</code></pre>
","80214","","80214","","2021-01-12 14:53:57","2021-01-12 14:53:57","","","","2","","","","CC BY-SA 4.0"
"211132","2","","201560","2020-09-16 03:20:51","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 14 bytes</h1>
<pre><code>(RV_).BMPRVUWa
</code></pre>
<p><a href=""https://tio.run/##K8gs@P9fIygsXlPPyTcgKCw0PPH///@lKTl5pam5BQA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<h2>Similar solution, 14 bytes</h2>
<pre><code>UW:a(RVa@1).@a
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/NNwqUSMoLNHBUFPPIfH///@lKTl5pam5Bf91CwA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-16 03:20:51","","","","0","","","","CC BY-SA 4.0"
"211134","2","","194480","2020-09-16 03:33:27","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 6 bytes</h1>
<pre><code>&quot;six&quot;;
</code></pre>
<p><a href=""https://tio.run/##K8gs@P9fqTizQsn6/38A"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p><code>;</code> is a comment.</p>
","80214","","","","","2020-09-16 03:33:27","","","","5","","","","CC BY-SA 4.0"
"211135","2","","194480","2020-09-16 03:40:37","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 30 bytes</h1>
<pre><code>99W3M!;98W!;1M;2A!;2M!;11MM3M;
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=99W3M!%3B98W!%3B1M%3B2A!%3B2M!%3B11MM3M%3B&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<p>prints in capitals.</p>
","80214","","","","","2020-09-16 03:40:37","","","","0","","","","CC BY-SA 4.0"
"211136","2","","199409","2020-09-16 04:10:50","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a> <code>-r</code>, 11 bytes</h1>
<pre><code>$&amp;2*_&lt;=BMPg
</code></pre>
<p><a href=""https://tio.run/##K8gs@P9fRc1IK97G1sk3IP3/f0MDLiMDLmOD/7pFAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>Takes input numbers separater by newlines. (<code>-r</code> flag)</p>
<h2>Explanation</h2>
<pre><code>$&amp;2*_&lt;=BMPg  g → input
        MP   pass pairs from g to function on the left
  2*_&lt;=B     a ≤ b? for pair (a, b)
$&amp;           Fold with &amp; operator
</code></pre>
","80214","","","","","2020-09-16 04:10:50","","","","0","","","","CC BY-SA 4.0"
"211137","2","","87496","2020-09-16 04:46:25","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 15 bytes</h1>
<pre><code>PZ(PZz@&lt;_M\,27)
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/IEojIKrKwSbeN0bHyFzz////unkA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-16 04:46:25","","","","0","","","","CC BY-SA 4.0"
"211144","2","","211116","2020-09-16 10:05:19","","3","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, <s>26</s> 21 bytes</h1>
<pre><code>3NST(_-BMPaRMs)?o.'!i
</code></pre>
<p><a href=""https://tio.run/##K8gs@P/f2C84RCNe18k3IDHIt1jTPl9PXTHz////FhYK5gqGFv91CwA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>-5 bytes after Dominic Van Essen's input changes.</p>
<p>Takes inputs as:</p>
<pre><code>8 → Wall
4 → intruder
7 → Jewel
1 → Employee
</code></pre>
<p>Takes the differences, converts to string, checks if there's 3 in the string representation.</p>
","80214","","80214","","2020-09-16 12:32:20","2020-09-16 12:32:20","","","","2","","","","CC BY-SA 4.0"
"211202","2","","198717","2020-09-17 04:14:52","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 13 bytes</h1>
<pre><code>{a%2?b.bb}MEa
</code></pre>
<p><a href=""https://tio.run/##K8gs@P@/OlHVyD5JLymp1tc18f///4lJySmpAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-17 04:14:52","","","","0","","","","CC BY-SA 4.0"
"211203","2","","87064","2020-09-17 04:28:46","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a> <code>-n</code>, 16 bytes</h1>
<pre><code>{z@aXa.z@&gt;a}M,26
</code></pre>
<p><a href=""https://tio.run/##K8gs@P@/usohMSJRr8rBLrHWV8fI7P///7p5AA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-17 04:28:46","","","","0","","","","CC BY-SA 4.0"
"211205","2","","28154","2020-09-17 06:09:08","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 108 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>6 3⌷⎕XML{(⎕SE.SALT.New'HttpCommand'('GET'⍵)).Run.Data}'https://codegolf.stackexchange.com/posts/211205/body'
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///30zB@FHP9kd9UyN8fao1gHSwq16wo0@Inl9qubpHSUmBc35ubmJeirqGurtriPqj3q2amnpBpXl6LoklibXqGUAVxVb6@sn5Kanp@TlpesUlicnZqRXJGYl56al6yfm5@gX5xSXF@kaGhkYGpvpJ@SmV6v//AwA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Don't Try it online, try it locally</a></p>
<p><s>Correct link coming soon.</s></p>
<h2>Output:</h2>
<p><a href=""https://i.stack.imgur.com/Bp2Ih.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Bp2Ih.png"" alt=""enter image description here"" /></a></p>
","80214","","80214","","2020-09-17 06:14:38","2020-09-17 06:14:38","","","","0","","","","CC BY-SA 4.0"
"211206","2","","201537","2020-09-17 07:05:55","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 4 bytes</h1>
<pre><code>_MSg
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/3jc4/f///4b/jQA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p><code>MS</code> maps a function to an iterable and sums its results.</p>
<p><code>_</code> is the identity function.</p>
<p><code>g</code> is the list of command line args.</p>
","80214","","","","","2020-09-17 07:05:55","","","","0","","","","CC BY-SA 4.0"
"211221","2","","126410","2020-09-17 15:42:37","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 15 bytes</h1>
<pre><code>aJ':JW''AL&quot;:[]&quot;
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/0UvdyitcXd3RR8kqOlbp////Hqk5OfkA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>aJ':JW''AL&quot;:[]&quot; a → input                     Example → &quot;Hi&quot;
aJ':            join characters with ':'              → 'H:i&quot;
    JW''        join and wrap that with single quotes → &quot;'H':'i'&quot;
        AL&quot;:[]&quot; Append list &quot;:[]&quot;                     → &quot;'H':'i':[]&quot;
                Concatenation has high precedence, so AL is used.
</code></pre>
","80214","","","","","2020-09-17 15:42:37","","","","0","","","","CC BY-SA 4.0"
"211223","2","","87420","2020-09-17 16:08:51","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 5 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>1+3⊥⊤
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/31Db@FHX0kddS/6nPWqb8Ki371FX86PeNY96txxab/yobeKjvqnBQc5AMsTDM/h/moIBV5qCIRAbAbExEJuA@CYA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Jo King's suggestion.</p>
<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 12 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>1+3⊥2(⊥⍣¯1)⊢
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///31Db@FHXUiMNIPGod/Gh9Yaaj7oW/U971DbhUW/fo67mR71rHvVuObTe@FHbxEd9U4ODnIFkiIdn8P80BQOuNAVDIDYCYmMgNgHxTQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Based on Dennis' Jelly answer.</p>
<p>Outputs are zero indexed.</p>
<pre class=""lang-apl prettyprint-override""><code>1+3⊥2(⊥⍣¯1)⊢
           ⊢ Take argument
    2(⊥⍣¯1)  Encode in binary
  3⊥         Decode from ternary
1+           Add 1
</code></pre>
","80214","","80214","","2020-09-18 13:42:35","2020-09-18 13:42:35","","","","1","","","","CC BY-SA 4.0"
"211224","2","","87420","2020-09-17 16:10:57","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 11 bytes</h1>
<pre><code>1+(aTB2)FB3
</code></pre>
<p><a href=""https://tio.run/##K8gs@P/fUFsjMcTJSNPNyfg/kGcCAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>Based on Dennis' Jelly answer. Zero Indexed.</p>
","80214","","","","","2020-09-17 16:10:57","","","","0","","","","CC BY-SA 4.0"
"211228","2","","128858","2020-09-17 16:51:22","","4","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>24 23</s></sup> 21 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{~⍵[¯1+⌈/⍸⍵]}0,2⊥⍣¯1⊢
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v7ruUe/W6EPrDbUf9XToP@rdAeTG1hroGD3qWvqodzFQ4lHXov9pj9omPOrte9TV/Kh3zaPeLYfWGz9qm/iob2pwkDOQDPHwDP6fdmjFo97NhgYGAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Bitwise operations are a bit long in APL, so I went with the method in the question.</p>
<p>-1 byte from dzaima.</p>
<p>-2 bytes from Adám.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{~⍵[¯1+⌈/⍸⍵]}0,2⊥⍣¯1⊢ input n taken on the right
               2⊥⍣¯1⊢ n in binary
             0,       with 0 prepended in case the LSB is at first index
{           }         do the following to the array ⍵:
         ⍸⍵           get indices of 1's in ⍵
       ⌈/             find maximum index
    ¯1+               subtract 1 from it to get the previous index
  ⍵[       ]          Find the element at that index in ⍵
 ~                    bitwise NOT
</code></pre>
","80214","","80214","","2021-01-21 07:06:17","2021-01-21 07:06:17","","","","3","","","","CC BY-SA 4.0"
"211252","2","","730","2020-09-18 02:50:59","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 6 bytes</h1>
<pre><code>$+a@XN
</code></pre>
<p><a href=""https://tio.run/##K8gs@P9fRTvRIcLv////qeZFKakKaQoKOmmpCibGCllpWQqmJmkmxS7/dQsA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>Regexes all numbers to a list and sums them.</p>
","80214","","","","","2020-09-18 02:50:59","","","","0","","","","CC BY-SA 4.0"
"211253","2","","211226","2020-09-18 04:14:09","","2","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 19 bytes</h1>
<pre><code>%|11a{%%0~}&lt;%0/&gt;[;]
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%25%7C11a%7B%25%250%7E%7D%3C%250%2F%3E%5B%3B%5D&amp;input=Hello"" rel=""nofollow noreferrer"">try it!</a> or <a href=""https://8dion8.github.io/MAWP/v1.1?code=%25%7C11A%7B%25%250%7E%7D%3C%250%2F%3E%5B%3B%5D&amp;input=Hello"" rel=""nofollow noreferrer"">TRY IT!</a></p>
<p>MAWP ignores lowercase letters, so this answer uses a conditional to check if subtraction has happened or not, and reverses based on it.</p>
","80214","","","","","2020-09-18 04:14:09","","","","0","","","","CC BY-SA 4.0"
"211259","2","","107842","2020-09-18 07:12:36","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a> + <code>dfns</code>, 7 bytes</h1>
<h2>Sum: 569</h2>

<pre class=""lang-apl prettyprint-override""><code>1 pco⌈⎕
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qc6SCekpaXrE616OO9rT/hgoFyfmPejqAMv@BAv850xS4DI2NzQE"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qc6SCekpaXrE616OO9rT/hgoFyfmPejqAMv@BAv850xS4DLhApCGYNAKTxmDSBCJuwsUFVP2obYK6OowRXJqrkJ@mkJyfklqQn5lXAjS9GCiurQ@U9/TXfdS7AshwDHvUu1kdyUKgIpgBnsUKAUWZuan26lxgBQrFAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Verify</a></p>
<p>The program uses the ceiling function(<code>⌈</code>) since it's a no-op on integers, and pads the codepoint sum to a prime number, according to APL's code page.</p>
<p><code>pco</code> is a function from the dfns library which checks for primality.</p>
","80214","","80214","","2021-04-13 15:12:33","2021-04-13 15:12:33","","","","1","","","","CC BY-SA 4.0"
"211263","2","","144740","2020-09-18 09:53:51","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode) + <code>dfns</code></a>, 29 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⎕CY'dfns'
{≢∪⍵/⍨1pco⍵}∘∊2pco⊢
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT////1HfVOdI9ZS0vGJ1rupHnYsedax61LtV/1HvCsOC5Hwgs/ZRx4xHHV1GIF7Xov9pj9omPOrte9TV/Kh3zaPeLYfWGz9qmwg0JTjIGUiGeHgG/09TMORKUzACYmMgNgFiQxMA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>-6 bytes from Adám.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{≢∪⍵/⍨1pco⍵}∘∊2pco⊢ ⊢ → input
                2pco  prime factors and exponents as matrix
{            }∘∊      flatten and use as right arg for:
    ⍵/⍨              filter out values in arg
        1pco⍵         which aren't prime
 ≢∪                   count the unique values
</code></pre>
","80214","","80214","","2021-04-07 10:39:10","2021-04-07 10:39:10","","","","0","","","","CC BY-SA 4.0"
"211264","2","","47870","2020-09-18 10:02:26","","3","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>8</s></sup> 3 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>+/⊤
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/X1v/UdeS/2mP2iY86u171NX8qHfNo94th9YbP2qb@KhvanCQM5AM8fAM/p@mYMCVpmAIxEZAbAzEJiC@sbE5AA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>-5 from Adám.</p>
<pre class=""lang-apl prettyprint-override""><code>  ⊤ convert to base 2
+/  sum
</code></pre>
","80214","","80214","","2021-03-23 05:31:20","2021-03-23 05:31:20","","","","1","","","","CC BY-SA 4.0"
"211310","2","","111861","2020-09-19 14:53:07","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>27</s></sup> 25 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>(⌽,⊢)⍉↑↑∘'O'¨1,1-1↓+\⍳⎕+1
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qKM97b/Go569Oo@6Fmk@6u181DYRhDpmqPurH1phqGOoa/iobbJ2zKPezY/6pmobgnT8T@My5ErjMgJiYyA2AWJDAwA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>-2 bytes from kritixilithos at the APL Orchard.</p>
<p>-2 bytes from Adám.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code> (⌽,⊢)⍉↑↑∘'O'¨1,1-1↓+\⍳⎕+1
                      ⍳⎕+1  range 1 - n+1
                    +\      cumulative sum over each element
                  1↓        drop the first value (0)
                1-          subtract 1 from each value
              1,            prepend 1 to it.
             ¨              for each element,
        ↑∘'O'               prepend(element-1) spaces to 'O'.
       ↑                    convert to matrix
      ⍉                     transpose
 (⌽,⊢)                      prepend its reverse (palindromize).
</code></pre>
","80214","","80214","","2021-03-02 15:52:37","2021-03-02 15:52:37","","","","0","","","","CC BY-SA 4.0"
"211313","2","","632","2020-09-19 15:07:19","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 6 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>¯4 4⍭⊢
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn//9B6EwWTR71rH3Ut@p/2qG3Co96@R13Nj3rXPOrdcmi98aO2iY/6pgYHOQPJEA/P4P9pCoZGppYA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>I wish I knew a way to shorten this further.</p>
<p><code>¯4</code> and <code>4</code> when passed to <code>⍭</code> give the closest primes to the right argument(<code>⊢</code>).</p>
","80214","","","","","2020-09-19 15:07:19","","","","0","","","","CC BY-SA 4.0"
"211314","2","","191564","2020-09-19 15:22:41","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 8 bytes</h1>
<pre><code>aRw.'!'!
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/MahcT11RXfH///8KigqJigqKSQrJiikKigA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>concatenates the whitespace regex variable <code>w</code> with an <code>!</code> character. then replaces it with a single <code>!</code> in the string.</p>
","80214","","","","","2020-09-19 15:22:41","","","","0","","","","CC BY-SA 4.0"
"211316","2","","203524","2020-09-19 15:47:25","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 25 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>“&amp;ｘｏ+Ｍ0Fi&amp;W（d╷↓¹]│⁸Y↑ŗ³－„
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXUyMDFDJTI2JXVGRjU4JXVGRjRGKyV1RkYyRDBGaSUyNlcldUZGMDhkJXUyNTc3JXUyMTkzJUI5JTVEJXUyNTAyJXUyMDc4WSV1MjE5MSV1MDE1NyVCMyV1RkYwRCV1MjAxRQ__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<p>So I thought, &quot;What if I just lazily did number compression in Canvas?&quot; and this was the result. Somehow it worked.</p>
","80214","","","","","2020-09-19 15:47:25","","","","0","","","","CC BY-SA 4.0"
"211319","2","","891","2020-09-19 16:43:21","","1","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 11 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>+/≡∘∪⍨⍤⍭¨⍤⍳
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTflfra1frfGoa9GjzoWPOlZpPupd@6h3a@2hFY96N4MYXEB5FOklQBVw2f/a@mCJGUC5R70rELJAevP/tEdtEx719j3qan7Uu@ZR75ZD640ftU181Dc1OMgZSIZ4eAb/T1MwNAABAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Bubbler's tacit form. (-4 bytes)</p>
<p>-1 byte from Adám.</p>
<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 16 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{+/{(⊢≡∪)⍭⍵}¨⍳⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v1pbv1rjUdeiR50LH3Ws0nzUu/ZR79baQyse9W4GMf6nPWqb8Ki371FX86PeNY96txxab/yobeKjvqnBQc5AMsTDM/h/moKhAQgAAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Same approach as the J answer, <code>100000</code> runs under 10 secs on tio, so it should be all good.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{+/{(⊢≡∪)⍭⍵}¨⍳⍵} 
   {(⊢≡∪)⍭⍵}     square-free checking function
   {     ⍭⍵}     prime factors of ⍵
    (⊢≡∪)        are the unique values equal to the originals?
                 function ends
            ¨⍳⍵  map function to range 1-n
 +/              sum the resulting boolean array
</code></pre>
","80214","","80214","","2021-04-19 09:14:30","2021-04-19 09:14:30","","","","2","","","","CC BY-SA 4.0"
"211340","2","","193951","2020-09-20 12:05:45","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 22 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{(⌽⍪⊖)(⍉,⌽)⍵↑⍨-2/⌈/⍴⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v1rjUc/eR72rHnVN09R41NupA@RqPurd@qht4qPeFbpG@o96OvQf9W4BCtX@T3vUNuFRb9@jruZHvWuAgofWG4PU9U0NDnIGkiEensH/0xSAQuoeqTk5@eoK6uH5RTkp6gA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-20 12:05:45","","","","0","","","","CC BY-SA 4.0"
"211372","2","","211365","2020-09-21 04:05:16","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 21 bytes</h1>
<pre><code>RV_M(JRV(a&lt;&gt;#a/2)&lt;&gt;2)
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/KCzeV8MrKEwj0cZOOVHfSNPGzkjz////BoZGxiamZuYWlgA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>RV_M(JRV(a&lt;&gt;#a/2)&lt;&gt;2)
        (a&lt;&gt;#a/2)     split input into parts of size length/2
     JRV              reverse the list, and join it to string
                 &lt;&gt;2  split the joined string into parts of size 2
RV_M                  reverse each of those parts
                      implicit output
</code></pre>
","80214","","","","","2020-09-21 04:05:16","","","","0","","","","CC BY-SA 4.0"
"211394","2","","211365","2020-09-21 10:16:26","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü♠yαæ♠╟«ºñ
</code></pre>
<p><a href=""https://staxlang.xyz/#c=%3B%25h%2Fr%242%2FFrp&amp;i=MPORQTSVUXWZYBADCFEHGJILKN"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>What a wonderful online interpreter.</p>
<p>Link is to unpacked version of code.</p>
<h2>Explanation</h2>
<pre><code>;%h/r$2/Frp
;           copy input
 %          get it's length
  h         halve it
   /        split input into parts of that size
    r       reverse
     $      join to string
      2/    split into parts of size 2
        F   for each element in the resulting array:
         rp reverse, and print without newline.
</code></pre>
","80214","","","","","2020-09-21 10:16:26","","","","0","","","","CC BY-SA 4.0"
"211403","2","","58615","2020-09-21 13:10:12","","3","","<h1><a href=""https://github.com/Technohacker/spaghetti"" rel=""nofollow noreferrer"">Spaghetti</a>, 522 bytes</h1>
<pre><code>main:0&quot;n&quot;goto store goto l l:100&quot;n&quot;goto retrieve goto areEqual&quot;EOF&quot;goto jumpIfTrue&quot;n&quot;goto retrieve 1 2 goto add&quot;n&quot;goto store 15&quot;n&quot;goto retrieve 2 goto modulus 0 goto areEqual&quot;f&quot;goto jumpIfTrue 3&quot;n&quot;goto retrieve 2 goto modulus 0 goto areNotEqual&quot;b&quot;goto jumpIfTrue&quot;Fizz&quot;1 goto print goto b t:3&quot;n&quot;goto retrieve 2 goto modulus 0 goto areEqual&quot;l&quot;goto jumpIfTrue&quot;n&quot;goto retrieve 1 goto print goto l b:5&quot;n&quot;goto retrieve 2 goto modulus 0 goto areNotEqual&quot;t&quot;goto jumpIfTrue&quot;Buzz&quot;1 goto print goto l f:&quot;FizzBuzz&quot;1 goto print goto l

</code></pre>
<p>Requires a newline at the end, cause otherwise the interpreter throws a hissy fit.</p>
<p>Spaghetti is a stack based language that promotes using goto extensively. That means, every single operation you use requires a goto statement along with it.</p>
<p>That being said, this took a while.</p>
<p>Commented version is at the <a href=""https://github.com/Technohacker/spaghetti/blob/master/examples/fizzbuzz.spgh"" rel=""nofollow noreferrer"">Spaghetti examples.</a></p>
<p><a href=""https://technohacker.github.io/spaghetti/"" rel=""nofollow noreferrer"">Try it on the online interpreter!</a> (Code must be pasted in)</p>
","80214","","80214","","2020-10-29 03:53:25","2020-10-29 03:53:25","","","","0","","","","CC BY-SA 4.0"
"211406","2","","137588","2020-09-21 14:32:54","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 5 bytes</h1>
<h2>North: 3</h2>
<pre><code>2M:
2
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=2M%3A%0A2&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<h2>East: 4</h2>
<pre><code>22
 M
 :
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=2M%3A%0A2&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<h2>South: 2</h2>
<pre><code>  2
:M2
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=2M%3A%0A2&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<h2>West: 1</h2>
<pre><code>:
M
22
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=2M%3A%0A2&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<p>The existing 1 in the stack is very convenient here.</p>
","80214","","","","","2020-09-21 14:32:54","","","","0","","","","CC BY-SA 4.0"
"211458","2","","211411","2020-09-22 04:30:15","","0","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 78 bytes</h1>
<pre><code>%|0/[!843WWP843WWWA/]~[!88WP88WWA/]~[!86WP86WWA/]_1A![1A~M~]%!~!~/P\WA{0:.}?1:
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%25%7C0%2F%5B!843WWP843WWWA%2F%5D%7E%5B!88WP88WWA%2F%5D%7E%5B!86WP86WWA%2F%5D_1A!%5B1A%7EM%7E%5D%25!%7E!%7E%2FP%5CWA%7B0%3A.%7D%3F1%3A&amp;input=length"" rel=""nofollow noreferrer"">Try it!</a></p>
<p>Waiting for answer in 1+...</p>
<p>Uses the modulus method from Jonah's J answer.</p>
","80214","","","","","2020-09-22 04:30:15","","","","0","","","","CC BY-SA 4.0"
"211459","2","","4244","2020-09-22 04:56:53","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 21 bytes</h1>
<pre><code>YPPZsXa-_.'*X_M\,ay@0
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/MiAgqjgiUTdeT10rIt43Riex0sHg////xv918wA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>I don't know how pip recognizes this lambda, but it somehow does.</p>
<h2>Explanation</h2>
<pre><code>YPPZsXa-_.'*X_M\,ay@0 a → input
              M\,a    map inclusive range of 0 - a, loop var '_'
    sXa-_             repeat space (input - _) times
         .'*X_        repeat * _ times
         .            join them:               
  PZ                  palindromize the result: ' ***' → ' ***** '
YP                    print each item of the array with newline
                      and assign the array to variable y
                  y@0 return first element of y (always a single *)
                      implicitly print it
</code></pre>
<p><code>@y</code> cannot be used here, since it changes <code>\,a</code> in the first statement.</p>
","80214","","","","","2020-09-22 04:56:53","","","","0","","","","CC BY-SA 4.0"
"211460","1","","","2020-09-22 05:24:58","","14","1641","<h1>Intro</h1>
<p>Given radius <span class=""math-container"">\$r\$</span>, draw a circle in the center of the screen.</p>
<p><a href=""https://codegolf.meta.stackexchange.com/a/19221/80214"">Sandbox.</a></p>
<h1>The Challenge</h1>
<p>Here is a simple challenge.</p>
<p>Plot a circle using the formula <span class=""math-container"">\$x^2+y^2=r^2\$</span>, or any other formula that will plot a circle according to the given parameters.</p>
<p>You may use any units that your language provides, so long as they are well defined and give consistent output.</p>
<p>The circle must have it's center at the center of the canvas, and must have a padding of 5 units or more on all sides.</p>
<p>The circle can have any fill that does not match the outline.</p>
<p>You may have axes in the background of your plot.</p>
<p>The outline of the circle must be solid (no gaps), and it must be visible.  Here is an example:</p>
<p><a href=""https://i.stack.imgur.com/G4M3q.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/G4M3q.png"" alt=""enter image description here"" /></a></p>
<p>Input can be taken in any acceptable form. (function params, variables, stdin...)</p>
<p>Output can be in the form of a separate window, or an image format.</p>
<p>Standard loopholes and rules apply.</p>
<h1>Example Code (<code>Java + Processing</code>)</h1>
<pre><code>// Modified from the C language example from
// https:// en.wikipedia.org/wiki/Midpoint_circle_algorithm
int r = 70; //radius
void settings() {
  size(2*r+10, 2*r+10);
}
 
void draw() {
  background(255);
  drawCircle(width/2, height/2, r, 60);
  save(&quot;Circle.png&quot;);
}

 
void drawCircle(int x0, int y0, int radius, int angle) {
  int circCol = color(0, 0, 0);
  float limit = radians(angle);
  int x = radius;
  int y = 0;
  int err = 0;
 
  while (x &gt;= y &amp;&amp; atan2(y, x) &lt; limit) {
    set(x0 + x, y0 + y, circCol);
    set(x0 + y, y0 + x, circCol);
    set(x0 - y, y0 + x, circCol);
    set(x0 - x, y0 + y, circCol);
    set(x0 - x, y0 - y, circCol);
    set(x0 - y, y0 - x, circCol);
    set(x0 + y, y0 - x, circCol);
    set(x0 + x, y0 - y, circCol);
 
    y += 1;
    if (err &lt;= 0) {
      err += 2*y + 1;
    }
    if (err &gt; 0) {
      x -= 1;
      err -= 2*x + 1;
    }
  }
}
</code></pre>
<h1>Scoring</h1>
<p>This is a <a href=""/questions/tagged/graphical-output"" class=""post-tag"" title=""show questions tagged &#39;graphical-output&#39;"" rel=""tag"">graphical-output</a> question. No ascii art.</p>
<p>This is <a href=""/questions/tagged/code-golf"" class=""post-tag"" title=""show questions tagged &#39;code-golf&#39;"" rel=""tag"">code-golf</a>. shortest answer in each language wins.</p>
","80214","","80214","","2020-09-22 07:46:23","2021-04-21 09:21:15","Plot a centered circle","<code-golf><math><graphical-output>","17","14","1","","","CC BY-SA 4.0"
"211463","2","","140498","2020-09-22 06:43:44","","2","","<h1><a href=""https://www.r-project.org/"" rel=""nofollow noreferrer"">R</a>, 57 bytes</h1>

<pre class=""lang-r prettyprint-override""><code>(a=conf.design::primes(scan():1))[which(grepl(666,a))[1]]
</code></pre>
<p>-42 bytes from Dominic Van Essen's enormous golf.</p>
<p>uses <code>grepl</code> to coerce values to string(since 666 cannot be considered a regex) and check for truthy values.</p>
<p>Runs through the array in reverse to save 2 bytes.</p>
<h1><a href=""https://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> + <code>conf.design</code>, <sup><s>81 78</s></sup> 99 bytes</h1>

<pre class=""lang-r prettyprint-override""><code>library(conf.design);function(n){a=primes(1:n)
a[max(which(grepl(&quot;666&quot;,as.character(a),fixed=T)))]}
</code></pre>
<p><a href=""https://rdrr.io/snippets/embed/?code=library(conf.design)%0Ax%3Dfunction(n)%7B%0Aa%3Dprimes(1%3An)%0Aa%5Bmax(which(grepl(%22666%22%2Cas.character(a)%2C%20fixed%3DT)))%5D%7D%0Ax(6666)"" rel=""nofollow noreferrer"">Try it on rdrr.io!</a></p>
<p>My first R solution.</p>
<p>+21 bytes after including library name.</p>
<p>A simple filter. grepl returns true at indices with 666, which returns the truthy indices, and max gets the required index of the prime.</p>
","80214","","80214","","2020-09-22 07:44:33","2020-09-22 07:44:33","","","","5","","","","CC BY-SA 4.0"
"211472","2","","64944","2020-09-22 08:02:58","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 3 bytes</h1>
<pre><code>:d%
</code></pre>
<p><a href=""https://staxlang.xyz/#c=%3Ad%25&amp;i=1%0A2%0A12%0A30%0A60%0A97%0A100&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>It's the same size when packed.</p>
","80214","","","","","2020-09-22 08:02:58","","","","0","","","","CC BY-SA 4.0"
"211478","2","","151023","2020-09-22 09:01:35","","2","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 8 bytes</h1>
<pre><code>PZ_.BMPz
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/ICpez8k3oOr///@6eQA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-09-22 09:01:35","","","","0","","","","CC BY-SA 4.0"
"211526","2","","135073","2020-09-23 08:33:17","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 29 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{w←⍵⋄(⊢,⌽)↑{(-⍵+⍴w)↑⍵⌽w}¨⍳⍴⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkG/6vLgdSj3q2Puls0HnUt0nnUs1fzUdvEag1doKD2o94t5SAuSEHP3vLaQyse9W4GCgL5tf/TwDr7HnU1P@pdAxQ8tN4YpLRvanCQM5AM8fAM/p@moJ6YlJyizgUUACpXV@cCiQABqohzfkqqQnp@Tpo6FxcA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{w←⍵⋄(⊢,⌽)↑{(-⍵+⍴w)↑⍵⌽w}¨⍳⍴⍵} ⍵ → input
 w←⍵                          assign original input to w
                         ⍳⍴⍵  range from 0 to length of ⍵
           {           }¨     map range to function, loop var i
                    ⍵⌽w       input rotated i characters
            (-⍵+⍴w)           i + length of input, negated
                   ↑          take that much from the rotated string
                              (prepends spaces)
          ↑                   mix the array to create one side of the pattern
     (⊢,⌽)                    append the reverse of the matrix to itself 
</code></pre>
","80214","","","","","2020-09-23 08:33:17","","","","0","","","","CC BY-SA 4.0"
"211530","2","","123194","2020-09-23 10:22:15","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 18 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>⌠╟%╜«¥│▒g♦°pC₧╤WsV
</code></pre>
<p><a href=""https://staxlang.xyz/#c=%5E%22%5B%5EA-Z%5D%22zR%7BVVI0%3CFLcr%3D&amp;i=Dennis%0AMartin%0AMartin+Ender%0AAlex%0AAlex+A.%0ADoorknob%0AMego&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>^&quot;[^A-Z]&quot;zR{VVI0&lt;FLcr=
^                      capitalize input
 &quot;[^A-Z]&quot;zR            remove all non alphabet characters
           {     F     loop over modified string
            VV         &quot;AEIOU&quot;
              I        Index of character (-1 if not present)
               0&lt;      less than 0
                       push the result to stack
                  L    wrap the stack in an array
                   c   duplicate it
                    r  reverse it
                     = are they equal?
</code></pre>
","80214","","","","","2020-09-23 10:22:15","","","","0","","","","CC BY-SA 4.0"
"211566","2","","32267","2020-09-24 04:04:47","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 30 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{(0=3|⍵)∨'3'∊⍕⍵:'bzzt'⋄⍵}¨⍳500
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v1rDwNa45lHvVs1HHSvUjdUfdXQ96p0K5FupJ1VVlag/6m4BcmoPrXjUu9nUwOB/2qO2CY96@x51NT/qXfOod8uh9caP2iY@6psaHOQMJEM8PIP/pwEA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-09-24 04:25:06","2020-09-24 04:25:06","","","","0","","","","CC BY-SA 4.0"
"211570","2","","126613","2020-09-24 05:54:18","","2","","<h1><a href=""https://github.com/yanorestes/rockstar-py"" rel=""nofollow noreferrer"">Rockstar</a>, <sup><s>150</s></sup> 104 bytes</h1>
<pre><code>Listen to B
let B be-3
X's-1
say &quot;╔&quot;+&quot;╦&quot;*B+&quot;╗&quot;
While B-X
say &quot;╠&quot;+&quot;╬&quot;*B+&quot;╣&quot;
let X be+1

say &quot;╚&quot;+&quot;╩&quot;*B+&quot;╝&quot;
</code></pre>
<p><a href=""https://codewithrockstar.com/online"" rel=""nofollow noreferrer"">Copy Paste it here!</a></p>
<p>-46 bytes from Shaggy.</p>
<p>I was inspired by Shaggy from <a href=""https://codegolf.stackexchange.com/questions/4244/code-golf-christmas-edition-how-to-print-out-a-christmas-tree-of-height-n/211547?noredirect=1#comment498192_211547"">this comment.</a></p>
<p>Here's the <em>real</em> rock song (sort of).</p>
<pre><code>Listen to the bars
Knock the bars down, down, down
Let the end be the bars
Build the end up
Shout &quot;╔&quot;+&quot;╦&quot;*the bars+&quot;╗&quot;
While the end ain't nothing
say &quot;╠&quot;+&quot;╬&quot;*the bars+&quot;╣&quot;
Knock the end down

Shout &quot;╚&quot;+&quot;╩&quot;*the bars+&quot;╝&quot;
Let the prison be gone
</code></pre>
","80214","","80214","","2020-09-24 11:08:26","2020-09-24 11:08:26","","","","4","","","","CC BY-SA 4.0"
"211574","2","","188988","2020-09-24 07:14:35","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 4 bytes</h1>
<pre><code>aWVa
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/MTws8f///y75pUk5qQrBBamJ2QA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>A pip answer without loops.</p>
","80214","","","","","2020-09-24 07:14:35","","","","0","","","","CC BY-SA 4.0"
"211584","2","","49854","2020-09-24 10:21:06","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 11 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ú∙n90≤╣*.vâ
</code></pre>
<p><a href=""https://staxlang.xyz/#c=L%7CT%7B%24mc%7CmP%7CMp&amp;i=5+56+50"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Link is to unpacked version of code.</p>
<h2>Explanation</h2>
<pre><code>L|T{$mc|MP|mp implicit input
L             put all inputs in a list
 |T           get the unique orders of the list of inputs
   {$m        convert each list to string
      c       duplicate the array of strings
       |mP    print the minimum element
          |mp print the maximum element
</code></pre>
","80214","","","","","2020-09-24 10:21:06","","","","0","","","","CC BY-SA 4.0"
"211586","2","","210976","2020-09-24 10:59:59","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>7</sup></s> 6 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>║►yü[c
</code></pre>
<p><a href=""https://staxlang.xyz/#p=ba1079815b63&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>.Lo{cpvW
.Lo      push two letter string &quot;Lo&quot;
   {   W loop forever
    c    duplicate           → [&quot;Lo&quot;, &quot;Lo&quot;]
     p   print and pop       → [&quot;Lo&quot;]
      v  lowercase           → [&quot;lo&quot;]
         begin next iteration
</code></pre>
","80214","","80214","","2020-10-19 11:13:03","2020-10-19 11:13:03","","","","0","","","","CC BY-SA 4.0"
"211640","2","","211602","2020-09-25 04:46:52","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 70 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ç┼☺►┴┬φ3π╓ùδ±║≈§←¬b☻╬₧○ôT»╤↔ñ¢≤♣=≈î⌂╖ì(P┐Φ│xøïº9r═A,Åáï☼♀εwccù√╞Æ3äö▐π
</code></pre>
<p><a href=""https://staxlang.xyz/#p=80c50110c1c2ed33e3d697ebf1baf7151baa6202ce9e099354afd11da49bf3053df78c7fb78d2850bfe8b378008ba73972cd412c8fa08b0f0cee77636397fbc692338494dee3&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p><a href=""https://staxlang.xyz/#c=Va%27g-p%22%29%25EA%26%23%21jA*E%29.%27%22%21228s%2B35141380471727%3AB%7B2s-m%221%25%25%25%25%25%25%25%25%25%25%29%25-%25%29%25%25%29%29%256v9%5D.,Q%26kj%22%21%2B%2B%3A%2Bp&amp;i="" rel=""nofollow noreferrer"">Run and debug it uncompressed</a></p>
<p>This is my first proper answer to a compression based question. Hope I did well.</p>
<p>Uses a combo of stax's number array compression and binary to print the alphabet.</p>
<h2>Explanation</h2>
<p><code>Va'g-p</code> Print the lowercase alphabet without g</p>
<p><code>&quot;)%EA&amp;#!jA*E).'&quot;!</code> Deltas of first few symbols, compressed</p>
<p><code>228s+</code> add 228 to the beginning of it (first letter)</p>
<p><code>35141380471727:B</code> 35141380471727 converted to array of bits</p>
<p><code>{2s-m</code> subtract each bit from two</p>
<p><code>&quot;1%%%%%%%%%%)%-%)%%))%6v9].,Q&amp;kj&quot;!</code> deltas of last few symbols, compressed</p>
<p><code>++</code> join all the deltas together</p>
<p><code>:+</code> sums of all prefixes</p>
<p><code>p</code> print, converting ASCII values</p>
","80214","","","","","2020-09-25 04:46:52","","","","0","","","","CC BY-SA 4.0"
"211644","2","","211641","2020-09-25 08:47:51","","4","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 41 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⎕A[1+⍵/⍵⌿⍉⊤(⎕AV⍳'⌷⊤└¶⍝ ⎕¶&quot;í'),2/12 6 3]}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v/pR31THaEPtR71b9YH4Uc/@R72dj7qWaIDEwx71blZ/1LMdyH80ZcqhbY965x5aAJQ4tE3p8Fp1TR0jfUMjBTMF49ja/2mP2iY86u171NX8qHfNo94th9YbP2qbCFQbHOQMJEM8PIP/pykYcQEA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Letter <code>B</code> for colored pixels, <code>A</code> for transparent pixels.</p>
<p>Uses an <a href=""https://codegolf.stackexchange.com/a/206779/80214"">APL tip from Andriy Makukha</a> to compress integers.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⎕A[1+⍵/⍵⌿⍉⊤(⎕AV⍳'⌷⊤└¶⍝ ⎕¶&quot;í'),2/12 6 3]} ⍵ → n
                               2/12 6 3   12, 6 and 3 repeated in place
                 '⌷⊤└¶⍝ ⎕¶&quot;í'             String of compressed values
            (⎕AV⍳            )            The SBCS codepoints of the string
                              ,           Join them
          ⍉⊤                              convert to binary &amp; transpose
      ⍵/⍵⌿                                replicate each element n times along both axes
    1+                                    Add 1 to each for getting 1-based indices
 ⎕A[                                   ]  Index the grid into the alphabet
</code></pre>
","80214","","","","","2020-09-25 08:47:51","","","","0","","","","CC BY-SA 4.0"
"211669","2","","97352","2020-09-25 16:27:21","","2","","<h1><a href=""https://github.com/cairdcoinheringaahing/AddPlusPlus"" rel=""nofollow noreferrer"">Add++</a>, 90 bytes</h1>
<pre><code>+?
Fx,`i,j:i,-1,*&quot; &quot;,o,`j,x-,+1,+j,-1,*&quot;a&quot;,O
x-1
Fx,`i,+1,j:i,x-,+1,*&quot; &quot;,o,`j,*2,-1,*&quot;a&quot;,O
</code></pre>
<p><a href=""https://tio.run/##S0xJKSj4/1/bnsutQichUyfLKlNH11BHS0lBSSdfJyFLp0JXR9tQRzsLIpqopOPPVaFrCFUNlAFpgKhB6NEyQqj@//@/KQA"" rel=""nofollow noreferrer"" title=""Add++ – Try It Online"">Try it online!</a></p>
<p>Just two for loops.</p>
<p>My first Add++ answer!</p>
","80214","","","","","2020-09-25 16:27:21","","","","1","","","","CC BY-SA 4.0"
"211697","2","","136927","2020-09-26 13:30:13","","1","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 83 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>P5.size←2⌿32
g←P5.G
a←13 6 19 26
P5.draw←{r←g.rect
g.bg'f00'
g.stroke←⍬
r a
r 2⌽⌽a}
</code></pre>
<p>32x32 canvas:</p>
<p><a href=""https://i.stack.imgur.com/UogcH.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UogcH.png"" alt=""enter image description here"" /></a></p>
","80214","","","","","2020-09-26 13:30:13","","","","0","","","","CC BY-SA 4.0"
"211723","2","","97049","2020-09-28 03:42:06","","2","","<h1><a href=""https://www.r-project.org/"" rel=""nofollow noreferrer"">R</a>, <s><sup><sup>96</sup> 53 <sub>51</sub></sup></s> 58 bytes</h1>

<pre class=""lang-r prettyprint-override""><code>cat(intToUtf8((913:937)[-18]+32*!!length(commandArgs(T))))
</code></pre>
<p><a href=""https://tio.run/##K/r/PzmxRCMzryQkP7QkzUJDw9LQ2MrS2FwzWtfQIlbb2EhLUTEnNS@9JEMjOT83NzEvxbEovVgjRBMI/v//DwA"" rel=""nofollow noreferrer"" title=""R – Try It Online"">Try it online!</a></p>
<p>I tried to make an R answer with command line args, but it's a bit longer(now a lot, lot shorter) than the loop based approach by plannapus. I used some of the tricks in their answer.</p>
<p>A crazy -43 bytes from Dominic Van Essen.</p>
<p>-2 more bytes from Dominic Van Essen.</p>
<p>+7 bytes after removing <code>ς</code></p>
","80214","","80214","","2020-10-01 11:38:40","2020-10-01 11:38:40","","","","5","","","","CC BY-SA 4.0"
"211761","2","","120434","2020-09-29 03:39:02","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, <sup><s>21</s></sup> 29 bytes</h1>
<pre><code>|1A&lt;1:.&gt;1M\%_1A&lt;1:.&gt;\A{0:.}1:
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%7C1A%3C1%3A.%3E1M%5C%25_1A%3C1%3A.%3E%5CA%7B0%3A.%7D1%3A&amp;input=HiH"" rel=""nofollow noreferrer"">Try it!</a></p>
<p>Fixed for empty input(and single character input, after Lyxal pointed out). If input is empty, it checks if the existing 1 on the stack is still at the top. then checks the length of the input.</p>
","80214","","80214","","2020-09-29 04:32:28","2020-09-29 04:32:28","","","","0","","","","CC BY-SA 4.0"
"211768","2","","80736","2020-09-29 06:06:03","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>40</s></sup> 34 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{(⊢⍪⊖)(⊢,⌽)' |―'[∘.{1+⍺(≠+&lt;)⍵}⍨⍵]}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v1rjUdeiR72rHnVN0wQxdR717NVUV6h51DBVPfpRxwy9akPtR727NB51LtC20XzUu7X2Ue8KIBVb@z/tUduER719j7qaH/WuedS75dB640dtEx/1TQ0OcgaSIR6ewf/TFNTT8vNT1LmADAUwmYvKBcqmoXJzkLgFRfnpRYm5uZl56eoA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Uses Extended for character comparison.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{(⊢⍪⊖)(⊢,⌽)' |―'[∘.{1+⍺(≠+&lt;)⍵}⍨⍵]} ⍵ → input.
                 ∘.           ⍨⍵   cartesian product of ⍵, with the following function:
                   {1+⍺(≠+&lt;)⍵}     return 1 if equal, 2 if greater, 3 if lesser.
           ' |―'[               ]  index into the required characters
      (⊢,⌽)                        append the reverse of the pattern
 (⊢⍪⊖)                             append the y-axis reverse of the pattern
</code></pre>
","80214","","80214","","2020-10-09 13:59:37","2020-10-09 13:59:37","","","","0","","","","CC BY-SA 4.0"
"211821","2","","211763","2020-09-30 04:35:10","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>28</s></sup> 26 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>○+×1+∘(⊢÷10+∘√4-⊢)3×2*⍨-÷+
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn//9H0bu3D0w21H3XM0HjUtejwdkMDEPtRxywTXSBf0/jwdCOtR70rdA9v1/6f9qhtwqPevkddzY961zzq3XJovfGjtomP@qYGBzkDyRAPz@D/hgppCoZchnpGUNoURAMA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>ovs's conversion to a train.</p>
<p>-2 using <code>√</code>.</p>
<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 35 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{h←3×2*⍨⍺(-÷+)⍵⋄(○⍺+⍵)×1+h÷10+√4-h}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/vzrjUdsE48PTjbQe9a541LtLQ/fwdm3NR71bH3W3aDya3g0U0gbyNA9PN9TOOLzd0ED7UccsE92M2v9pQI2PevsedTU/6l3zqHfLofXGj9omPuqbGhzkDCRDPDyD/xsqpCkYchnqGUFpUzAN5gEA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Uses Equation 4.</p>
<p>Longer than the other APL answer because there's more than one usage of <span class=""math-container"">\$h\$</span>.</p>
","80214","","80214","","2021-02-17 07:11:52","2021-02-17 07:11:52","","","","1","","","","CC BY-SA 4.0"
"211828","2","","5178","2020-09-30 08:38:21","","4","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 46 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⎕A[26|{'N'∊⍞:⍉x,⍪(⎕A⍳w)+x←26?⍨⍴w←⍞⋄-⌿⎕A⍳↑⍞⍞}1]
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkGXI862guKwAKO0UZmNdXqfuqPOroe9c6zetTbWaHzqHeVBkjuUe/mck3tCqAWIzP7R70rHvVuKQdygOoedbfoPurZD1X0qG0iSKx3Xq1h7H@g2f@BhnO5@jkHRQaEcHm4@vj4cwFVAnWqq3OBpFxcIVK@QS7ekVwhYf5hvtgVODp5ezkG@gR5uQb7unN5OEVFRgaFeDr7hPm6AgA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>The current full program is the result of a <a href=""https://chat.stackexchange.com/transcript/message/55691568#55691568"">2hr long session at The APL Orchard.</a>, with a lot of golfing input from Adám (-13 bytes!).</p>
<p>Requires <code>⎕IO←0</code> (0-indexing).</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>⎕A[26|{'N'∊⍞:⍉x,⍪(⎕A⍳w)+x←26?⍨⍴w←⍞⋄-⌿⎕A⍳↑⍞⍞}1]
      {                                    }1  inner fn(called with junk param)
           ⍞                                   first input
       'N'∊                                    is 'N' present in it?
            :⍉x,⍪(⎕A⍳w)+x←26?⍨⍴w←⍞             if so, eNcrypt:
                               w←⍞              store message in w
                          26?⍨⍴                 generate 26 random numbers,
                        x←                      store in x
                 (⎕A⍳w)+                        add that to the indices in the alphabet
                ⍪                               table them
              x,                                join with the random numbers
             ⍉                                  transpose to get key and encrypted value
                                  ⋄-⌿⎕A⍳↑⍞⍞    else, decrypt:
                                         ⍞⍞     input key and value
                                        ↑       convert to matrix
                                     ⎕A⍳        get the indices of both in the alphabet
                                   -⌿           difference of all columns
   26|                                          mod the result of the inner fn.
  [                                          ] index the result of the program in 
⎕A                                             the capitalized alphabet.
</code></pre>
","80214","","","","","2020-09-30 08:38:21","","","","0","","","","CC BY-SA 4.0"
"211831","2","","120052","2020-09-30 09:29:04","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 15 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>(' ',⍞)[⊤7 5 7]
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qp/@jtgkGXI862tP@a6grqOs86p2nGf2oa4m5gqmCeex/oMR/zjSuRC4uoGKgUnV1Li4gXxkA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Indexes into a binary matrix.</p>
<p>Requires <code>⎕IO←0</code>(0-indexing)</p>
","80214","","","","","2020-09-30 09:29:04","","","","0","","","","CC BY-SA 4.0"
"211844","2","","211840","2020-09-30 13:08:26","","8","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 18 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>2∊+/↑(*3)2 10⊤¨0⌈⎕
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKO94L/Ro44ubf1HbRM1tIw1jRQMDR51LTm0wuBRT8ejvqkgJf8VwKCAy4gLxjKGs0zhLENDJKYBEhshfmi9KQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Jo King's 18 byte solution.</p>

<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <s><sup><sub>20</sub> 21 <sub>20</sub> 26</sup></s> 25 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{&lt;⍵:2∊+/↑(⊂×⍨⍎¨⍕⍵)⍪⊂⊤⍵⋄0}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v/pR71Y7AyujRx1d2vqP2iZqPOpqOjz9Ue@KR719h4DEVKC85qPeVUDhR11LgJxH3S0Gtf/THrVNAKp41NX8qHfNo94th9YbAzU/6psaHOQMJEM8PIP/pykYcaUpGAOxKRAbGoIJAzAJYh9abwoA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>+1 byte after correcting the answer(ovs).</p>
<p>-1 byte after ovs's suggestion.(yay!)</p>
<p>+7 bytes after properly accepting negative test cases.</p>
<p>-1 byte from Adám.</p>
<p>Inspired from the J solution.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⍵&gt;0:2∊+/↑(⊂2*⍨⍎¨⍕⍵)⍪⊂⊤⍵⋄0}
 ⍵&gt;0:                       If number is positive
                      ⊤⍵    Decode number to binary
            ×⍨⍎¨⍕⍵          square each digit
         ↑ ⊂        ⍪⊂      join into two rows
       +/                   sum each row
     2∊                     is two present in it?
                         ⋄0 otherwise return 0
</code></pre>
","80214","","80214","","2020-10-07 03:31:58","2020-10-07 03:31:58","","","","9","","","","CC BY-SA 4.0"
"211891","2","","204228","2020-10-01 06:16:05","","1","","<h1><a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, 17 bytes</h1>
<pre><code>%@[_2A{%M~}]%:1;:
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=%25%40%5B_2A%7B%25M%7E%7D%5D%25%3A1%3B%3A&amp;input=2%208%2010%209%209%203%207%208%209%208%206%201%202%209%208%203%208%209%205%0A2%203%201%208%206%202%2010%206%207%206%0A6%207%205%201%203%209%207%201%206%0A1%209%0A9%205%205%207"" rel=""nofollow noreferrer"">Try it!</a> (Only first line is taken as input)</p>
<p>Outputs sums in reverse.</p>
","80214","","","","","2020-10-01 06:16:05","","","","0","","","","CC BY-SA 4.0"
"211899","2","","3815","2020-10-01 09:06:22","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a> <code>-s</code>, <s><sup>22</sup></s> 21 bytes</h1>
<pre><code>La{PooMP:_+BoPU1oPB1}
</code></pre>
<p><a href=""https://tio.run/##K8gs@P/fJ7E6ID/fN8AqXtspPyDUMD/AybD2////usX/TQE"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>This was simpler than trying to map an iterable, and probably shorter.</p>
<p>-1 byte from Dlosc, using the <code>PU</code> and <code>PB</code> functions.</p>
<h2>Explanation (old)</h2>
<pre><code>La{Poo:1AL(_+BMPo)AL1} a → input, o → 1(predefined)
La{                  } loop a times
   Po                  print variable o(joined by spaces due to -s)
     o:                assign o to:
          (_+BMPo)     sums of pairs of it's elements
       1AL        AL1  with 1 added on both sides
</code></pre>
","80214","","80214","","2020-10-03 16:54:33","2020-10-03 16:54:33","","","","1","","","","CC BY-SA 4.0"
"211914","2","","1251","2020-10-01 15:15:42","","1","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 51 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>x←⎕⋄g←{(¯1 2⍴1↓x)×⍤1⊢⍵○⊃x}⋄∊⍉↑(⊂-/g⌽⍳2)⍪⊂',',¨+/g⍳2
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97X/Fo7YJj/qmPupuSQeyqjUOrTdUMHrUu8XwUdvkCs3D0x/1LjF81LXoUe/WR9O7H3U1V9QClT7q6HrU2/mobaLGo64mXf30Rz17H/VuNtJ81LsKKKCuo65zaIU2UBgoBrLlP2cal7GeoYmhqaWRmamxqYWluaWCoZ6BjoGegQIQ6wDZYL4hlA/EAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Reduced by a lot with dzaima's help at <a href=""https://chat.stackexchange.com/transcript/message/55704669#55704669"">The APL Orchard.</a> Apparently there's still room to save a few bytes, which I'll be golfing later.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>x←⎕⋄g←{(¯1 2⍴1↓x)×⍤1⊢⍵○⊃x}⋄∊⍉↑(⊂-/g⌽⍳2)⍪⊂',',¨+/g⍳2
x←⎕                                                 store input as x
   ⋄g←{                  }                          define function g:
                       ⊃x                           first element of x
                     ⍵○                             take sine &amp; cosine of it based on argument
                 ×⍤1⊢                               multiply with each row of
       (¯1 2⍴1↓x)                                   the points reshaped into pairs
                          ⋄                         finally,
                                              +/g⍳2 x sin theta + y cos theta
                                        ⊂',',¨      prepend comma to each
                                       ⍪            joined with
                              (⊂-/g⌽⍳2)             x cos theta - y sin theta
                            ⍉↑                      convert to matrix and transpose
                           ∊                        and enlist the elements                                               
</code></pre>
","80214","","","","","2020-10-01 15:15:42","","","","0","","","","CC BY-SA 4.0"
"211924","2","","35925","2020-10-02 05:27:27","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 18 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍵∊∊{⍵×/x}¨x←1↓⍳⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v/pR79ZHHV1ABGIdnq5fUXtoRcWjtgmGj9omP@rdDBSs/Z8G5D/q7XvU1fyod82j3i2H1hs/apv4qG9qcJAzkAzx8Az@n6ZgxpWmYGgEJIwNgIQZiLA0AIuBmZZgpiGQBKkxNAYA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⍵∊∊{⍵×/x}¨x←1↓⍳⍵} 
           x←1↓⍳⍵  assign range from 2 to n to x
          ¨        map over range using function
    {⍵×/x}         get products of subsets of size ⍵ in x
                   (this gets all reuquired products of consecutive numbers &gt; 1)
   ∊               enlist/flatten the vector of vectors
 ⍵∊                is n present in the products?
</code></pre>
","80214","","","","","2020-10-02 05:27:27","","","","0","","","","CC BY-SA 4.0"
"211954","2","","211925","2020-10-02 15:54:10","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 21 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{+/|⍵×⍳≢⍵}(⌈2÷⍨⍴)↓⊢-⌽
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v1pbv@ZR79bD0x/1bn7UuQjIrNV41NNhdHj7o94Vj3q3aD5qm/yoa5Huo569/9MetU141Nv3qKv5Ue8aoNyh9caP2iY@6psaHOQMJEM8PIP/pykAWaHOwQrqiYnqXAheUmISMjcxKRlFOjkpMSUVWSAjNScnX10BWUl@Sqpuen5OGopoXmpZalF@Skp@EZCRhyLlhyoFAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-02 15:54:10","","","","0","","","","CC BY-SA 4.0"
"211970","1","","","2020-10-03 07:11:51","","19","1934","<h1>Intro</h1>
<p><a href=""https://i.stack.imgur.com/MaKOj.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/MaKOj.png"" alt=""enter image description here"" /></a></p>
<p>Given a whole number <span class=""math-container"">\$&lt; 100,\$</span> extend/shorten the english representation of the number to have as many characters as it's value.</p>
<p><a href=""https://codegolf.meta.stackexchange.com/questions/2140/sandbox-for-proposed-challenges/19297#19297"">Sandbox</a></p>
<h1>Rules</h1>
<p>Take the number <span class=""math-container"">\$n\$</span>, and get it in words from <a href=""https://github.com/razetime/code-golf/raw/master/R-code/numbers"" rel=""noreferrer"">this dictionary.</a> You may take this dictionary in any way you prefer. (a list, read from link, command line arg, STDIN, variable, so on.)</p>
<p><a href=""https://gist.github.com/Lyxal/117cbe9be10abd5cb454344071bbceaa"" rel=""noreferrer"">Here's the file as a JSON Array.</a> (Courtesy of Lyxal)</p>
<p>Then, do the following with the string:</p>
<ul>
<li>If the string's length is lower than the number, repeat some of its characters in place until the length matches the number.</li>
<li>The first and last characters should not be repeated, and the numbers of repetitions of the other characters should differ by at most one (so you can repeat some of them 5 times and others 6 times, for example; it doesn't matter which ones exactly).</li>
<li>If the string's length is greater than the number, remove any of its characters except the first and last to make the length match the number.
<strong>1 and 0 are exceptions, since they are too small.</strong></li>
<li>The order of the letters in the string must be maintained.</li>
<li>Example:</li>
</ul>
<pre><code>50 → f[ift]y → 3 letters must be duplicated 16 times
61 → s[ixtyon]e → 5 letters must be duplicated 10 times, 1 character must be duplicated 9 times
</code></pre>
<h2>Step by step run-through</h2>
<p>Taking 11 as an example,</p>
<p>(formatted as <code>word → length</code>)</p>
<pre><code>eleven → 6
 ^
elleven → 7
   ^
elleeven → 8
     ^
elleevven → 9
       ^
elleevveen → 10
  ^
ellleevveen → 11 (end)
</code></pre>
<h2>Examples</h2>
<pre><code>2 → to
3 → the or tre or tee
4 → four
5 → fiive or fivve
7 → seevven or sevveen or seeveen 
10 → teeeeeeeen

Special cases:
0 → (Any null value/no output)
1 → o
</code></pre>
<h2>Winning Criteria</h2>
<p>This is <a href=""/questions/tagged/code-golf"" class=""post-tag"" title=""show questions tagged &#39;code-golf&#39;"" rel=""tag"">code-golf</a>. Shortest code in each language wins.</p>
<h2><s>LoTM Bounty</s> <a href=""https://codegolf.stackexchange.com/a/212055/80214"">Claimed by Dominic Van Essen!</a></h2>
<p>The first Husk answer to this question will get a +50 rep bounty from me on top of Zgarb's bounty, if it satisfies the criteria put up <a href=""https://codegolf.meta.stackexchange.com/questions/19386/language-of-the-month-for-october-2020-husk"">here in the <strong>Additional Efforts</strong> part.</a></p>
","80214","","80214","","2020-10-05 08:55:18","2020-10-15 05:32:24","Size up a number","<code-golf><string><number>","16","5","2","","","CC BY-SA 4.0"
"211973","2","","121320","2020-10-03 08:57:34","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s>6</s> 4 bytes</h1>
<pre><code>ΛE∂↔
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9xs10cdTY/apvz//z862kzHXMdCx1LHKFYn2kQHygOyDXWgPCDbQAfKi40FAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p><a href=""https://chat.stackexchange.com/transcript/message/55721763#55721763"">-2 bytes</a> from Zgarb.</p>
<p>My first Husk answer! (Language Of The Month)</p>
<p>Takes matrix as command line argument.</p>
<p>Returns length of longest diagonal for true, and 0 otherwise.</p>
<h2>Explanation</h2>
<pre><code>ΛE∂↔
   ↔ reverse the rows
  ∂  get antidiagonals
Λ    Check if all elements satisfy condition:
 E   Are all the elements equal?
</code></pre>
","80214","","80214","","2020-10-03 12:26:43","2020-10-03 12:26:43","","","","2","","","","CC BY-SA 4.0"
"211985","2","","199055","2020-10-03 12:44:19","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>Λ&lt;0Ẋ*Ẋ-
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9xsG4OHu7q0gFj3////0YY6RjrGsQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Algorithm taken from the APL answer.</p>
<h2>Explanation</h2>
<pre><code>Λ&lt;0Ẋ*Ẋ-
     Ẋ- subtract pairs of consecutive elements
   Ẋ*   multiply pairs of consecutive elements
Λ       return truthy value if all elements are:
 &lt;0     lesser than 0
</code></pre>
","80214","","","","","2020-10-03 12:44:19","","","","0","","","","CC BY-SA 4.0"
"211991","2","","103497","2020-10-03 16:29:15","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 4 bytes</h1>
<pre><code>mΣT0
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/fc4hCD////R0cb6hjpGOuYxOpEGwKxKYgHpM10DGNjAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>mΣT0
  T0 Transpose matrix, padding with 0's where needed
mΣ   map each column to its sum
</code></pre>
","80214","","","","","2020-10-03 16:29:15","","","","1","","","","CC BY-SA 4.0"
"212008","2","","209314","2020-10-04 04:27:16","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>12</s></sup> 8 bytes</h1>
<pre><code>►=mLmf√w
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9G0Xba5Prlpjzpmlf///98jNScnX6E8vygnRUehJCOzWCGxKFWhJLW4pBgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Previous answer was badly optimized.(-4 bytes)</p>
<p>From Zgarb:</p>
<blockquote>
<p>► has a second mode. If you give it a binary function f, it returns an element x that maximizes the number of elements y for which fxy holds.</p>
</blockquote>
<blockquote>
<p>So ►= is a 2-byte max by frequency.</p>
</blockquote>
<h2>Explanation</h2>
<pre><code>►=fImLmf√ġK√
         ġK√ group string on non alphabet-characters.
       f√    filter out non-alphabet characters
      m      map that to each word ↑
    mL       Length of each word
  fI         filter out zeroes (empty string length)
►=           max by frequency
</code></pre>
","80214","","80214","","2020-11-08 13:03:02","2020-11-08 13:03:02","","","","0","","","","CC BY-SA 4.0"
"212009","2","","100898","2020-10-04 05:00:53","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>9</s></sup> 8 bytes</h1>
<pre><code>CL¹Σ∂RL¹
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/39nn0M5zix91NAUBGf///4821DHSMdYx0TGNBQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Zgarb.</p>
<h2>Explanation</h2>
<pre><code>CL¹Σ∂*L¹;
       ¹  input(appends a ¹ to the end)
        ; enclosed
     *L   repeated length times
    ∂     antidiagonals
   Σ      flattened into a single list
C         cut into pieces of size
 L¹       of the length of the input       
</code></pre>
","80214","","71256","","2020-10-04 09:08:33","2020-10-04 09:08:33","","","","0","","","","CC BY-SA 4.0"
"212013","2","","181958","2020-10-04 07:05:35","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>U¡oΠd
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/TQwvxzC1L@//9vZA4GFmBgaQkA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>U¡oΠd
 ¡    iterate infinitely, collecting results of each iteration
  o   combination of 2 functions
    d get digits
   Π  multiply all of them
U     cut at first duplicate value
</code></pre>
","80214","","","","","2020-10-04 07:05:35","","","","0","","","","CC BY-SA 4.0"
"212014","2","","131719","2020-10-04 09:31:33","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>&amp;&lt;3Lp+2¹ṗ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X83G2KdA2@jQzoc7p////98QAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>&amp;&lt;3Lp+2¹ṗ
        ṗ input is prime?
&amp;         and
   L      Length of
    p     prime factorization of
     +2¹  input + 2
 &lt;3       less than 3?
</code></pre>
","80214","","","","","2020-10-04 09:31:33","","","","0","","","","CC BY-SA 4.0"
"212017","2","","90067","2020-10-04 10:21:31","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>11 10</s></sup> 9 bytes</h1>
<pre><code>ḋṁS↑o→Σgḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@GO7oc7G4MftU3Mf9Q26dzidKDA////zUwNDAwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from <a href=""https://chat.stackexchange.com/transcript/message/55728012#55728012"">H.PWiz.</a></p>
<p>-1 byte from Jo King.</p>
<h1>Alternative 9-byter</h1>
<pre><code>ḋṁ?uIΛ¬gḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@GO7oc7G@1LPc/NPrQmHcj7//@/mamBgQEA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>ḋṁ?uIΛ≠1gḋ
         ḋ get binary digits
        g  group equal runs of digits
 ṁ         map each group to the following, and concatenate:
  ?  Λ≠1   if all elements are not equal to 1
   u       uniquify the group
    I      else leave it as is
ḋ          convert back to base-10
</code></pre>
","80214","","80214","","2020-10-05 02:33:11","2020-10-05 02:33:11","","","","0","","","","CC BY-SA 4.0"
"212018","2","","206289","2020-10-04 11:12:28","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>13</sup></s> 12 bytes</h1>
<pre><code>↓¬uO†_mf√ġK√
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1Hb5ENrSv0fNSyIz0171DHryEJvIPn//38jSwMNNXNLC2OjRMdEDS01BS1zSwVdXVsnJ6ckzaQkpyQFDYUKBU2tFAXd5AqgkngA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Jo King.</p>
<h2>Explanation</h2>
<pre><code>↓¬uO†_mf√ġK√
         ġK√ Group the input on non alphabet chars
      mf√    filter out non-alphabet chars.
    †_       convert all characters to lowercase
   O         sort in ascending order
  u          uniquify
↓¬           drop all empty strings at the beginning
</code></pre>
","80214","","80214","","2020-10-04 13:39:34","2020-10-04 13:39:34","","","","1","","","","CC BY-SA 4.0"
"212019","2","","153846","2020-10-04 11:26:20","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>←LumḋQḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbBJ/S3Ic7ugOB@P///0YGBhYA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>←LumḋQḋ
      ḋ binary digits of the input
     Q  all possible sublists
   mḋ   convert each back to base-10
  u     uniquify
 L      get the length
←       decrement (since one of the sublists will be 0)
</code></pre>
","80214","","80214","","2020-10-04 13:33:35","2020-10-04 13:33:35","","","","0","","","","CC BY-SA 4.0"
"212020","2","","98373","2020-10-04 12:19:20","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>ΣẊ≠:0ḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zih7u6HnUusDJ4uKP7////RhZmxsaGhqbGBgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Algorithm from Popov's APL answer.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>←LU¡ȯḋm¬ḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbBJ/QQwtPrH@4ozv30Bog@f//fyMLM2NjQ0NTYwMA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>The approach shown in the question.</p>
<h2>Explanation</h2>
<pre><code>←LU¡ȯḋm¬ḋ
   ¡      apply function pinfinitely, collecting results
    ȯ     composition of three function
        ḋ convert to binary digits
      m¬  negate each bit
     ḋ    convert back to base-10
  U       split infinite list at first non-unique value
 L        get the length of the list
←         decrement   
</code></pre>
","80214","","","","","2020-10-04 12:19:20","","","","0","","","","CC BY-SA 4.0"
"212021","2","","125879","2020-10-04 12:44:54","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 3 bytes</h1>
<p><sub>Look ma, no Unicode!</sub></p>
<pre><code>tuP
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/v6Q04P///8mJiQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>05AB1E, but reversed, and cooler, cause it's ASCII only.</p>
","80214","","","","","2020-10-04 12:44:54","","","","0","","","","CC BY-SA 4.0"
"212022","2","","84673","2020-10-04 12:55:53","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>8 7</sup></s> 6 bytes</h1>
<pre><code>¬Sn´×+
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9Ca4LxDWw5P1/7//3@0oY6JjqmOeSwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Zgarb.</p>
<p>Same method as the Pyth solution.</p>
<h2>Explanation</h2>
<pre><code>¬Sn´×+ implicit input
   ´   double: ´ f x = f x x
    ×+ map sum to all pairs
 S     hook: S f g x = f x (g x)
  n    intersection of sums with input
¬      negate
</code></pre>
","80214","","80214","","2020-10-07 12:18:33","2020-10-07 12:18:33","","","","2","","","","CC BY-SA 4.0"
"212031","2","","74960","2020-10-04 17:01:37","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>85 80 67</s></sup> 62 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍵⎕NPUT(⎕A,⎕D,¯1⎕C⎕A)[?62/⍨?12]1}¨⊃,/{⍵⊆⍨(⍋⊃¨⊂)?⍴⍨≢⍵}¨⊃⎕NGET⍞1
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qKM97X/1o96tj/qm@gWEhmgAaUcdIOGic2i9IZB2BgloRtubGek/6l1hb2gUa1h7aMWjrmYdfbC2rjagsMaj3m6gEEi8SdP@Ue8WoNijzkVAeYhakOHuriGPeucZgmz8z5nGpZ6RmpOTr1dSUaIOAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>This was a fun one.</p>
<p>Full program which takes a string as input, and outputs files to wherever the <code>]cd</code> command points to in the Dyalog workspace.</p>
<p>Done with some advice from dzaima.</p>
<p>-13 bytes from Bubbler, by removing ⎕UCS 10.
-5 more bytes from Bubbler after some more smaller golfs and change to the sorting idiom.</p>
<h2>Output</h2>
<p>Input file is a list of numbers from 1-99 from my &quot;Size Up a Number&quot; challenge.</p>
<p><a href=""https://i.stack.imgur.com/twyDH.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/twyDH.gif"" alt=""enter image description here"" /></a></p>
<h2>Explanation</h2>
<p><code>⊃⎕NGET⍞1</code> read file from location as APL array, take first element, split on newlines. (mode 1)</p>
<p>(last two elements are file attributes)</p>
<p><code>{⍵⊆⍨(⊂∘⍋⌷⊢)?(/⍨≢⍵)}¨</code> <em>for each line, execute the following:</em></p>
<p><code>            (/⍨≢⍵)  </code> create a list of the length repeated length times</p>
<p><code>           ?        </code> generate random numbers within those ranges</p>
<p><code>    (⊂∘⍋⌷⊢)         </code> sort in ascending order</p>
<p><code>⍵⊆⍨                 </code> partition the line according to the sorted array</p>
<p><code>⊃,/</code> join into a single vector and remove nesting</p>
<p><code>{⍵⎕NPUT(⎕A,(¯1∘⎕C⎕A),⎕D)[?(?12)/62]1}</code> for each partition, do the following:</p>
<p><code>      (⎕A,             )             </code> create a list with the uppercase alphabet,</p>
<p><code>      (   (¯1∘⎕C⎕A)    )             </code> the lowercase alphabet,</p>
<p><code>      (             ,⎕D)             </code> and numbers from 0-9.</p>
<p><code>                        [ (?12)  ]   </code> generate a random number in range 1-12</p>
<p><code>                        [     /62]   </code> replicate 62 that many times</p>
<p><code>                        [?       ]   </code> create that many random numbers in range 1-62, and index into the list.</p>
<p><code> ⍵⎕NPUT                            1 </code> write the partition into the random filename, creating it if necessary.</p>
","80214","","80214","","2020-10-05 02:37:26","2020-10-05 02:37:26","","","","3","","","","CC BY-SA 4.0"
"212038","2","","205336","2020-10-05 02:12:42","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>8</s></sup> 7 bytes</h1>
<pre><code>←LU¡mhg
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbBJ/QQwtzM9L///8fbaADgoZAaKBjDIZGOkaxAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>A different method, which is <s>slightly longer</s> now the same length.</p>
<h2>Explanation</h2>
<pre><code>←LU¡mhg
      g group runs of consecutive equal elements
   ¡    apply function infinitely, collecting it's results
    mh  drop the last element from each run
  U     cut at fixed point
←L      Get length, decrement.      
</code></pre>
","80214","","80214","","2020-11-09 09:48:22","2020-11-09 09:48:22","","","","0","","","","CC BY-SA 4.0"
"212041","2","","91725","2020-10-05 03:29:01","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>R¹!&quot;/¦
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P@jQTkUl/UPL/v//bwQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-4 bytes from Zgarb.</p>
<p><code>¦</code> is an alias for <code>\</code> in a string.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>*⁰;!⁰&quot;/\\&quot;
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X@tR4wZrRSChpB8To/T//38zAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>*⁰;!⁰&quot;/\\&quot;
   !⁰&quot;/\\&quot; get element at index n in string &quot;/\&quot; (wraps around)
  ;        create singleton list from it
*⁰         repeat list n times
</code></pre>
","80214","","80214","","2020-10-05 05:16:56","2020-10-05 05:16:56","","","","0","","","","CC BY-SA 4.0"
"212044","2","","11080","2020-10-05 04:32:18","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>9 8</s></sup> 7 bytes</h1>
<pre><code>ḟȯ=⁰LḊN
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9G0PWkn1ts@atzg83BHl9/////NAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Zgarb.</p>
<p>-1 byte from Jo King. (Simplifying range)</p>
<h2>Explanation</h2>
<pre><code>▼fȯ=¹LḊḣΠ
       ḣΠ range from 1..factorial(n)
 f        filter values using the following predicate:
     LḊ   length of list of divisors
   =¹     = n.
▼         take the minimum value.
</code></pre>
","80214","","80214","","2020-10-05 07:50:52","2020-10-05 07:50:52","","","","2","","","","CC BY-SA 4.0"
"212045","2","","118597","2020-10-05 05:24:34","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>8</sup></s> 7 bytes</h1>
<pre><code>ṁ?IĊ2←g
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HORnvPI11Gj9ompP///z/aUMcACCEkmBULAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>might be shorter with strings.</p>
<p>-1 byte from Zgarb.</p>
<h2>Explanation</h2>
<pre><code>ṁ?Io←½←g
       g group equal runs of elements
ṁ        map each group to function, and concatenate
 ?    ←  if first element is truthy
  I      leave as is
   o←½   else remove the second half
</code></pre>
","80214","","80214","","2020-10-05 07:32:22","2020-10-05 07:32:22","","","","2","","","","CC BY-SA 4.0"
"212047","2","","142893","2020-10-05 06:17:46","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>!m?I_%2İZ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XzHX3jNe1ejIhqj///8bAgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>1-indexed.</p>
<h2>Explanation</h2>
<pre><code>!m?I_%2İZ
       İZ List of all integers (builtin) [0,1,-1,2,-2,...]
 m        map to the following function
  ?  %2   if the number is even,
    _     negate it.
   I      otherwise return it
!         find element at input index
</code></pre>
<h1>Alternate solution, 9 bytes</h1>
<pre><code>!⌊½¹¡_⌊½→
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/FRT9ehvYd2HloYD2Y9apv0//9/QwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Uses the same equation as the SOGL answer.</p>
","80214","","","","","2020-10-05 06:17:46","","","","0","","","","CC BY-SA 4.0"
"212048","2","","81212","2020-10-05 06:33:26","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>ḋṁo↔‰2B4
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@GO7oc7G/MftU151LDByMnk////JuamRqYA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same as the Jelly solution.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>9</sup></s> 8 bytes</h1>
<pre><code>ḋṁ↔C_2Θḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@GO7oc7Gx@1TXGON7IyAPL@//9vYm5qZAoA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>General method.</p>
<p>-1 byte from Jo King. (using <code>Θ</code>)</p>
","80214","","80214","","2020-10-05 08:26:59","2020-10-05 08:26:59","","","","1","","","","CC BY-SA 4.0"
"212049","2","","89943","2020-10-05 07:09:27","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>!fö`¦2ṁo□LgpN
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XzHt8LaEQ8uMHu5szH80baFPeoHf////DQ0MAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>!fö`¦2ṁo□LgpN
            N List of natural numbers
 fö           filtered by the following 4 functions:
          gp  prime factorization, grouped into equal runs
      ṁo□L    get length of each run, square and sum
   `¦2        is 2 divisible by the sum?
!             nth element in filtered list
</code></pre>
","80214","","","","","2020-10-05 07:09:27","","","","3","","","","CC BY-SA 4.0"
"212052","2","","186548","2020-10-05 07:40:23","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 23 bytes</h1>
<pre><code>+mo`:'\R' ŀ¹mo`:'/R' ↔ŀ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Xzs3P8FKPSZIXeFow6GdYI4@kPOobcrRhv///1saAAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>There is probably a way to halve the size of this program.</p>
","80214","","","","","2020-10-05 07:40:23","","","","0","","","","CC BY-SA 4.0"
"212054","2","","66127","2020-10-05 08:23:06","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>÷*Π¹Π→¹ΠD
</code></pre>
<p><a href=""https://tio.run/##yygtzv7///B2rXMLDu08t@BR2yQQ5fL//38DAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Uses the formula in the description of the <a href=""http://oeis.org/A000108."" rel=""nofollow noreferrer"">OEIS page.</a></p>
<p>0-indexed.</p>
","80214","","","","","2020-10-05 08:23:06","","","","0","","","","CC BY-SA 4.0"
"212060","2","","207459","2020-10-05 09:27:52","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>Λ€¹Pu
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zsR01rDu0MKP3//7@SoZGxoZGhsZGhEgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same as the Jelly answer.</p>
","80214","","","","","2020-10-05 09:27:52","","","","0","","","","CC BY-SA 4.0"
"212065","2","","78896","2020-10-05 12:22:46","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 22 bytes</h1>
<pre><code>+*□256₁m→∫¹₁:1
%65521Σ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X1vr0bSFRqZmj5oacx@1TXrUsfrQTiDbypBL1czU1Mjw3OL///9Hm1nqWJrrGBoYA7EFEBvqGBqa6hgbgUUNTcAiQB5YAZQLljHTMTaOBQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>May be shorter with a lambda.</p>
<h2>Explanation</h2>
<pre><code>%65521Σ Function ₁:
      Σ sum of elements of the argument
%65521Σ modulo 65521

+*□256₁m→∫¹₁:1 main program:
           ₁:1 prepend 1(to the input), apply Function ₁
+              plus
         ∫¹    cumulative sums of the input
       m→      increment each sum
      ₁        apply function 1
 *□256         multiply with 256² (65536)
</code></pre>
","80214","","","","","2020-10-05 12:22:46","","","","0","","","","CC BY-SA 4.0"
"212071","2","","39951","2020-10-05 13:52:02","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 27 bytes</h1>
<pre><code>&amp;=O¹ḣ□³Λ=mΣ+mo►L∂Se↔C³¹S+TC
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X83W/9DOhzsWP5q28NDmc7Ntc88t1s7NfzRtl8@jjqbg1EdtU5wPbT60M1g7xPn///8m/6ONdAzNdAyNdYx1DA11THUsdAwNdMx1LHUMjXSA4iY6JjqGQBWxAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>I don't know any other techniques to golf this further, but it would be really cool if I could get it any lower.</p>
<p>Explanation coming later.</p>
<p>Takes inputs as 2 command line args, since Husk does not have the feature of taking from STDIN.</p>
","80214","","","","","2020-10-05 13:52:02","","","","0","","","","CC BY-SA 4.0"
"212075","2","","130382","2020-10-05 15:10:43","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>↑tfλΛȯεnḊ¹Ḋd)N
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbxJK0c7vPzT6x/tzWvIc7ug7tBBIpmn7///83AQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>↑tfλΛȯεnḊ¹Ḋd)N
  fλ        )N filter all natural numbers by the following lambda:
    Λȯ     d   map each digit of the natural number, and check if all are truthy:
        Ḋ¹Ḋ    divisors of the digit and divisors of the argument
       n       set intersection
      ε        has length 1? (co primality check)
 t             remove the first element
↑              take n items from the sequence(n → input)
</code></pre>
","80214","","","","","2020-10-05 15:10:43","","","","0","","","","CC BY-SA 4.0"
"212081","2","","172171","2020-10-05 17:03:46","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>ṁz*İ1zR:1İ2İ½
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxiqtIxsMq4KsDI9sMDqy4dDe//8B"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Abuses the built in sequences to the fullest.</p>
<p>Outputs an infinite list.</p>
<h2>Explanation</h2>
<pre><code>ṁz*İ1zR:1İ2İ½
           İ½ powers of ½
       :1İ2   powers of 2, with 1 prepended
     zR       zip replicate the second by the first
 z*           then zip multiply that with:
   İ1         odd numbers
ṁ             map to each of the power arrays, and concatenate into single list
</code></pre>
","80214","","","","","2020-10-05 17:03:46","","","","0","","","","CC BY-SA 4.0"
"212090","2","","210497","2020-10-06 03:36:16","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 20 bytes</h1>
<pre><code>?*¨H◄⁰ω]!¨L¹¨Ėr¨Λ='h
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/317r0AqPR9NbHjVuON8Zq3hohc@hnYdWHJlWdGjFudm26hn////PAIMiAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>An if statement with compressed strings using <a href=""https://tio.run/##S0oszvj/PzlFQT@/oEQ/o7Q4m6uoNC8jsTg7NSdHITk/t6Aotbg4uKQoMy9dL6NYQSm1qEjp/38A"" rel=""nofollow noreferrer"" title=""Bash – Try It Online"">This utility</a></p>
","80214","","","","","2020-10-06 03:36:16","","","","1","","","","CC BY-SA 4.0"
"212092","2","","80788","2020-10-06 05:05:24","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>18</sup></s> <s><sup><sub>16</sub></sup></s> <s><sup>19</sup></s> 16 bytes</h1>
<pre><code>SṠ·e;¥▲mΣTmṠom=▲
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/jhzgWHtqdaH1r6aNqm3HOLQ3KBAvm5tkDe////o6PNdSyNY3WizSx1jE2BtLm5jrFBbCwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Probably my best use of combinators in Husk.</p>
<p>-2 bytes from Jo King.</p>
<p>+3 bytes after satisfying first test case.</p>
<p>-3 bytes from Jo King(again!)</p>
<h2>Explanation</h2>
<pre><code>§eṠoW=▲o;▲mΣTmṠom=▲
             m      map each row to the following:
              Ṡ     hook: Ṡ f g x = f (g x) x
                m=  map each element of the row by equality
                  ▲ to the maximum of the row
            T       transpose the matrix
          mΣ        map each column to its sum
§                   fork: § f g h x = f (g x) (h x)
 e                  create two element list from:
  Ṡ                 hook: Ṡ f g x = f (g x) x
   oW=              indices of elements wich equal
      ▲             maximum, and:
       o;▲          number of maxima
</code></pre>
","80214","","80214","","2020-10-06 06:13:56","2020-10-06 06:13:56","","","","0","","","","CC BY-SA 4.0"
"212095","2","","96923","2020-10-06 07:09:27","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>13</s></sup> 7 bytes</h1>
<pre><code>▲m§-▼▲X
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9G0TbmHlus@mrYHyIr4//@/8f9oMx1LHRMdcyA2jAUA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-6 bytes from Jo King.</p>
<h2>Explanation</h2>
<pre><code>▲m§-▼▲X Slices of length n
 m      map to
  §-    difference between
    ▼▲  min and max
▲       take the maximum of that
   
</code></pre>
","80214","","80214","","2021-02-04 05:06:02","2021-02-04 05:06:02","","","","1","","","","CC BY-SA 4.0"
"212097","2","","47562","2020-10-06 07:36:06","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>OmoΣB²`z^R¹⁴ŀ
</code></pre>
<p><a href=""https://tio.run/##ASIA3f9odXNr//9PbW/Oo0LCsmB6XlLCueKBtMWA////M/8y/zIw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>OmoΣB²`z^R¹⁴ŀ
            ŀ range from 0..n-1
         R¹⁴  a replicated n times
      `z^     zip both with power
 moΣB²        convert each power to base n, and sum digits
O             Sort in ascending order
</code></pre>
","80214","","","","","2020-10-06 07:36:06","","","","0","","","","CC BY-SA 4.0"
"212101","2","","51178","2020-10-06 09:07:29","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>11</sup></s> 10 bytes</h1>
<pre><code>¶tfoΛε`B¹ḣ
</code></pre>
<p><a href=""https://tio.run/##AR4A4f9odXNr///CtnRmb86bzrVgQsK54bij////ODIwMDA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Zgarb.</p>
<h2>Explanation</h2>
<pre><code>¶tfoΛ&lt;2`B¹ḣ
          ḣ list from 1..n
  f         filter based on the result of the following
   o        composition of 2 functions
       `B¹  the input in base n as digits
    Λ&lt;2     are all digits &lt; 2?
 t          remove first element
¶           join with newlines
</code></pre>
","80214","","80214","","2020-10-06 10:05:46","2020-10-06 10:05:46","","","","3","","","","CC BY-SA 4.0"
"212106","2","","209146","2020-10-06 10:20:37","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>#1ṁd…
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X9nw4c7GlEcNy/7//2/439DAAAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Jelly, but reversed.</p>
","80214","","","","","2020-10-06 10:20:37","","","","0","","","","CC BY-SA 4.0"
"212110","2","","117440","2020-10-06 11:16:55","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>→d÷⁰*²!İ⁰
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbpJTD2x81btA6tEnxyAYg4////4aG/83/GwEA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-06 11:16:55","","","","0","","","","CC BY-SA 4.0"
"212112","2","","66197","2020-10-06 11:53:28","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>¦m_⁰…'a'z
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9Cy3PhHjRseNSxTT1Sv@v//f0hGqkJhaWZytkJSUX55nkJafoVCVmluQWqKQn5ZapFCCVA@J7GqUiElP71YT8HJ39PPHZkEAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>¦m_⁰…'a'z
    …'a'z inclusive range from a to z
 m_⁰      convert input to lowercase
¦         are all alphabets present in it?
</code></pre>
","80214","","95126","","2020-10-06 18:50:59","2020-10-06 18:50:59","","","","0","","","","CC BY-SA 4.0"
"212114","2","","66409","2020-10-06 12:21:02","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>!föṗdf≤9B16İf
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XzHt8LaHO6enpD3qXGLpZGh2ZEPa////DY0B"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Using Husk here is just about cheating cause it has an infinite fibonacci sequence builtin.</p>
<h2>Explanation</h2>
<pre><code>!föṗdf≤9B16İf
           İf infinite list of fibonacci numbers
 fö           filtered on the following four functions:
        B16   base 16 digits of the number
     f≤9      filter out the digits &gt; 9
    d         interpret in base 10
   ṗ          is that prime?
!             get element at input index 
</code></pre>
","80214","","","","","2020-10-06 12:21:02","","","","0","","","","CC BY-SA 4.0"
"212115","2","","99781","2020-10-06 12:35:32","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>¤=ȯOud¹^3
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9AS2xPr/UtTDu2MM/7//7@RqaGFpSkA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-06 12:35:32","","","","0","","","","CC BY-SA 4.0"
"212121","2","","70696","2020-10-06 14:03:41","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>Tzṙm→İ-T' 
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P6Tq4c6ZuY/aJh3ZoBuirnBo2////z1Sc3LydRTK84tyUhS5PBUScxUS8/JLMlKLFLiKS4oy89IVSvIVklIVuErKM4tLUlMUAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>(there's a space at the end.)</p>
<h2>Explanation</h2>
<pre><code>Tzṙm→İ-T' 
       T'  transpose, padding with spaces
 zṙ        zip and rotate each column by
     İ-    negative integers
   m→      each incremented
T          transposed back
</code></pre>
","80214","","","","","2020-10-06 14:03:41","","","","0","","","","CC BY-SA 4.0"
"212124","2","","74789","2020-10-06 14:54:18","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>12</sup></s> 9 bytes</h1>
<pre><code>ΠΣ→½∂↔´Ṫ-
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9yCc4sftU06tPdRR9OjtimHtjzcuUr3////0YY6RkBoHAsA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>(Apparently the only one of the three which was correct)</p>
<p>-3 bytes by calculating difference instead of pairs.</p>
<h2>Explanation</h2>
<pre><code>ΠΣ→½∂↔´Ṫ-
       Ṫ- cartesian difference of pairs of the array
      ´   double: f x = f x x
     ↔    reverse
    ∂     take antidiagonals
  →½      halve and take the last part (triangle) 
 Σ        concatenate into list of pairs
Π            multiply all values
</code></pre>
","80214","","80214","","2020-10-07 03:11:09","2020-10-07 03:11:09","","","","2","","","","CC BY-SA 4.0"
"212127","2","","109425","2020-10-06 15:36:17","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>UΣSze↔mȯUΣSze↔
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/Tc4uCq1EdtU3JPrIez////H61kaGRsYqqko2RmbgEkLZViAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>This doesn't work with a reusable function since a function can only support one type of arguments.</p>
","80214","","","","","2020-10-06 15:36:17","","","","0","","","","CC BY-SA 4.0"
"212140","2","","59922","2020-10-07 03:36:54","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>Ẋ-Θmȯ⌊*100/Σ¹∫
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@GuLt1zM3JPrH/U06VlaGCgf27xoZ2POlb///8/2lAHCGMB"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##yygtzv7/P/dRUyPXw11duudm5J5Y/6inS8vQwED/3OJDOx91rP7//390tKGOgY5RrA6QBkIQbWBgoAMioGJGOiZAloEOCJrqGMTGAgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify all test cases</a></p>
<p>Algorithm from Dennis' answer.</p>
<h2>Explanation</h2>
<pre><code>Ẋ-Θmȯ⌊*100/Σ¹∫
             ∫ cumulative sums
   mȯ          map to the follwing 4 functions
          /Σ¹  divide by sum of input
      *100     times 100
     ⌊         floored
  Θ            prepend a zero
Ẋ-             fold consecutive pairs with subtraction
</code></pre>
","80214","","80214","","2020-10-07 07:43:27","2020-10-07 07:43:27","","","","1","","","","CC BY-SA 4.0"
"212141","2","","114927","2020-10-07 03:40:06","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>6</sup></s> 4 bytes</h1>
<pre><code>;htw
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3zqjpPz///9e@Rl5Cl6JyflJCl6Zeek5qRmpmbmpRQrByRm5mSklAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Zgarb.</p>
","80214","","80214","","2020-10-07 05:11:55","2020-10-07 05:11:55","","","","3","","","","CC BY-SA 4.0"
"212144","2","","82981","2020-10-07 07:11:05","","4","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>13</s></sup> 12 bytes</h1>
<pre><code>!uΞ´Ṫ§+^`^tN
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X7H03LxDWx7uXHVouXZcQlyJ3////y2MAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p><s>Tied with MATL, with a similar method.</s></p>
<p>-1 byte from Zgarb!</p>
<h2>Explanation</h2>
<pre><code>!uΞ´Ṫ§+^`^tN
           N list of all natural numbers
          t  tail: remove 1
   ´         double: f x = f x x
    Ṫ        cartesian product with the following function
     §       fork: f g h x y = f (g x y) (h x y)
       ^     x^y
      +      plus
        `    reverse: f x y = f y x
        `^   y^x
  Ξ          merge all results together
 u           uniquify
!            take element at input index
</code></pre>
","80214","","80214","","2020-10-07 08:24:55","2020-10-07 08:24:55","","","","2","","","","CC BY-SA 4.0"
"212146","2","","52175","2020-10-07 09:35:30","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>14</s></sup> 20 - 8 = 12 bytes</h1>
<pre><code>→!¡otS:o+2§-←o*34→ḋ2
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbJMVDC/NLgq3ytY0OLdd91DYhX8vYBCj8cEe30f///w0NAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Uses the same recurrence relation as the CJam answer. There's probably a better way to do this.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 - 4 = 4 bytes</h1>
<pre><code>!Θf£∫Nİ□
</code></pre>
<p><a href=""https://tio.run/##ARkA5v9odXNr//8hzphmwqPiiKtOxLDilqH///8z"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>it can theoretically output square triangular numbers of any size, <s>but list intersection causes a stack overflow for anything above 3.</s></p>
<p>Instead of <code>n</code> uses <code>f£</code>, which is optimized for infinite lists.</p>
<p>Getting numbers takes a long, long, long time after 4.</p>
","80214","","80214","","2020-11-12 14:55:55","2020-11-12 14:55:55","","","","2","","","","CC BY-SA 4.0"
"212148","2","","66193","2020-10-07 09:52:06","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 12 - 5 = 7 bytes</h1>
<pre><code>J'+msḟo=¹ΣQḣ
</code></pre>
<p><a href=""https://tio.run/##ARwA4/9odXNr//9KJyttc@G4n289wrnOo1HhuKP///84"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Removing the first 5 bytes for joining, it still scores the same.</p>
<h2>Explanation</h2>
<pre><code>J'+msḟo=¹ΣQḣ
           ḣ range from 1..n
          Q  all possible sublists
     ḟ       get the first value which satisfies:
       =¹Σ   sum = input.
   ms        convert each number to string
J'+          join on '+'
</code></pre>
","80214","","","","","2020-10-07 09:52:06","","","","1","","","","CC BY-SA 4.0"
"212150","2","","11861","2020-10-07 11:33:22","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>20</s></sup> 19 bytes</h1>
<pre><code>₁ḣ
ṁo=¹⁰(moF-¥)uPṘ2
</code></pre>
<p><a href=""https://tio.run/##ASkA1v9odXNr///igoHhuKMK4bmBbz3CueKBsChtb0YtwqUpdVDhuZgy////NA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Can be shortened further.</p>
<p>returns 1 for 0.</p>
<p>-1 byte from Jo king.</p>
<h2>Explanation</h2>
<pre><code>ṁo=ḣ¹`(moF-¥)ḣ¹uPṘ2ḣ
                   ḣ range from 1..n
                 Ṙ2  replicate each element 2 times
               uP    unique permutations of the list
ṁo                   map each permutation to the following two functions
                     and sum the results
     `               flip: f x y = f y x
      (mo   )        map each number to the following:
      (    ¥)ḣ¹      index of each number in 1..n in the permutation
      (  F- )        folded by subtraction
  =ḣ¹                are the differences equal to 1..n?
</code></pre>
","80214","","80214","","2020-10-08 03:20:17","2020-10-08 03:20:17","","","","0","","","","CC BY-SA 4.0"
"212152","2","","109657","2020-10-07 12:07:18","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>10 9</s></sup> 8 bytes</h1>
<pre><code>ΣnḊ³m^⁰ḣ
</code></pre>
<p><a href=""https://tio.run/##ASAA3/9odXNr///Oo27huIrCs21e4oGw4bij////NDAzMjD/Mg"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Jo King.</p>
<p>-1 more byte from Jo King.</p>
<h2>Explanation</h2>
<pre><code>ΣnḊ³m^⁰ḣ
       ḣ range 1..n
    m^⁰  each raised to power k
 n       set intersection with
  Ḋ³     divisors of n
Σ        sum the list
</code></pre>
","80214","","80214","","2020-10-07 13:33:01","2020-10-07 13:33:01","","","","0","","","","CC BY-SA 4.0"
"212157","2","","126172","2020-10-07 15:53:47","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>↔T' ↑moR'#→İr
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HblBB1hUdtE3Pzg9SVH7VNOrKh6P///8ZGAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>I saw a ruler sequence builtin(<code>İr</code>), so I just went ahead and found a challenge I could cheat on.</p>
","80214","","","","","2020-10-07 15:53:47","","","","0","","","","CC BY-SA 4.0"
"212158","2","","119430","2020-10-07 15:58:35","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>13</s></sup> 11 bytes</h1>
<pre><code>↔T' †K'#mḊḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HblBB1hUcNC7zVlXMf7uh6uGPx////TQ0A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Ko King(No, not JoKing).</p>
","80214","","80214","","2020-10-10 08:39:42","2020-10-10 08:39:42","","","","4","","","","CC BY-SA 4.0"
"212167","2","","107050","2020-10-08 03:40:22","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>↑&lt;⁰foΛṗo§e#0Σḋİp
</code></pre>
<p><a href=""https://tio.run/##AScA2P9odXNr///ihpE84oGwZm/Om@G5l2/Cp2UjMM6j4biLxLBw////MTA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-10-08 06:05:41","2020-10-08 06:05:41","","","","0","","","","CC BY-SA 4.0"
"212172","2","","99200","2020-10-08 05:27:30","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>20</s></sup>  17 bytes</h1>
<pre><code>↑fo§&amp;ȯṗB⁰↔S≠↔B⁰İp
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbxLT8Q8vVTqx/uHO606PGDY/apgQ/6lwApEC8IxsK/v//b/Tf0AAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>The type inference is odd here.</p>
<p>-3 bytes from Jo King.</p>
","80214","","80214","","2020-10-08 06:17:29","2020-10-08 06:17:29","","","","0","","","","CC BY-SA 4.0"
"212174","2","","132137","2020-10-08 08:32:23","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 18 bytes</h1>
<pre><code>!ṁSeDfȯ¬%2öL→x1ḋḣ¹
</code></pre>
<p><a href=""https://tio.run/##ASkA1v9odXNr//8h4bmBU2VEZsivwqwlMsO2TOKGkngx4biL4bijwrn///8yOA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same method as the 05AB1E solution from Emigna.</p>
<p>Both are 1-indexed.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 19 bytes</h1>
<pre><code>!!¡S+ȯSeD←S-ȯḣ→▲ḣ2¹
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X1Hx0MJg7RPrg1NdHrVNCNY9sf7hjsWP2iY9mrYJyDA6tPP///9GFgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Uses infinite iteration to generate the sequence.</p>
<h2>Explanation</h2>
<pre><code>!!¡S+ȯSeD←S-ȯḣ→▲ḣ2¹
                ḣ2  array [1,2]
  ¡                 apply function repeatedly on array, yielding intermediate results
   S                hook: S f g x = s f x (g x)
    +               f → list addition
     ȯ              g → compose 3: ȯ f g h x = f (g (h x))
      S                 f → hook: S f g x = s f x (g x)
       e                    f → list of two elements
        D                   g → number doubled
         ←              g → decrement
          S             h → hook: S f g x = s f x (g x)
           -                f → list subtraction
            ȯ               g → compose 3: ȯ f g h x = f (g (h x))
             ḣ                  f → range 1..n
              →                 g → increment
               ▲                h → maximum
                    altogether, this appends the first element of
                    1..max+1 not in the array,
                    and it's double.
 !                  take the nth result
!                   take the nth value
</code></pre>
","80214","","","","","2020-10-08 08:32:23","","","","0","","","","CC BY-SA 4.0"
"212175","2","","91154","2020-10-08 08:43:42","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>11</s></sup> 7 bytes</h1>
<pre><code>!¡o→Π;2
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/HQwvxHbZPOLbA2@v//vykA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>1-indexed.</p>
<p>-4 bytes from Leo.</p>
","80214","","80214","","2021-02-15 10:57:14","2021-02-15 10:57:14","","","","3","","","","CC BY-SA 4.0"
"212176","2","","135288","2020-10-08 09:01:04","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>Vṗ(§e+-2
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P@zhzukah5anausa/f//39AQAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-08 09:01:04","","","","0","","","","CC BY-SA 4.0"
"212177","2","","104508","2020-10-08 09:11:52","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>§&amp;o£İ2→ṗ
</code></pre>
<p><a href=""https://tio.run/##ARkA5v9odXNr///CpyZvwqPEsDLihpLhuZf///8z"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-08 09:11:52","","","","0","","","","CC BY-SA 4.0"
"212180","2","","5891","2020-10-08 12:01:24","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>11</s></sup> 8 bytes</h1>
<pre><code>Ωεȯtṙ←⁰ḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zKc1tPrC95uHPmo7YJjxo3PNyx@P///4ZGQGQMAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Algorithm from <a href=""https://codegolf.stackexchange.com/a/177098/80214"">Kamil Drakari's answer.</a></p>
","80214","","80214","","2020-11-12 12:16:54","2020-11-12 12:16:54","","","","0","","","","CC BY-SA 4.0"
"212181","2","","5891","2020-10-08 13:49:58","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 17 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{¯1↓⍺⌽⍵}⍣{1=≢⍺}∘⍳
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v/rQesNHbZMf9e561LP3Ue/W2ke9i6sNbR91LgIK1T7qmPGod/P/tEdtEx719j3qan7Uu@ZR75ZD640ftU181Dc1OMgZSIZ4eAb/N1RIUzDnMgKTxmDSECJkASKBPJCUoZExAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Takes input as <code>k  f  n</code>.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{¯1↓⍺⌽⍵}⍣{2=≢⍵}∘⍳
               ∘⍳ list from 1..n
        ⍣         (f⍣g) → apply f repeatedly till g is true
{¯1↓⍺⌽⍵}          f: rotate list through k elements, drop last
         {1=≢⍺}   g: is the length = 1, for the previous iteration?
</code></pre>
<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 36 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>1+{⍺&gt;1:⍺|⍵+⍵∇⍨⍺-1⋄0}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///31C7@lHvLjtDKyBZ86h3qzYQP@pof9S7Aiiga/iou8Wg9n/ao7YJj3r7HnU1P@pd86h3y6H1xo/aJj7qmxoc5AwkQzw8g/8bKqQBNSmYcxnBGMYwhiFczgLKAIpBlRkaGQMA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Recursive function.</p>
","80214","","","","","2020-10-08 13:49:58","","","","0","","","","CC BY-SA 4.0"
"212183","2","","195775","2020-10-08 14:46:26","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>41</s></sup> 35 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{4÷⍨(+/(1○2×⍵×t)÷2*⍨1○t)-⍺÷3○t←○÷⍺}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG9qQMCjtgnm/6tNDm9/1LtCQ1tfw/DR9G6jw9Mf9W49PL1E8/B2Iy2gBEiwRFP3Ue@uw9uNQWygLiAF0rSr9n8aiNfb96ir@VHvmke9Ww6tN37UNhFoenCQM5AM8fAM/m@ikKZgCIFcpgg2lGcEZZuBZWA8czgPiLkswDxjCA8A"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Uses <a href=""https://codegolf.stackexchange.com/a/195777/80214"">Arnauld's expression</a> for calculating the area.</p>
<p>-6 bytes from ovs. (removing inner dfn)</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{4÷⍨(+/(1○2×⍵×t)÷2*⍨1○t)-⍺÷3○t←○÷⍺} ⍺ → n, ⍵ → l
                             t←○÷⍺  assign t to Π/n (○÷n = (○1)÷n)
    (                  )            apply the following to each element of l:
       (1○2×⍵×t)                       sin(2×element×t)
                ÷                      divided by
                 2*⍨1○t                sin(t)²
    (+/                             sum the results
                        -           minus:
                         ⍺          n
                          ÷         divided by
                           3○t      tan(t)
 4÷⍨                                divide that whole expression by 4  
</code></pre>
","80214","","80214","","2020-10-08 15:32:46","2020-10-08 15:32:46","","","","1","","","","CC BY-SA 4.0"
"212206","2","","201176","2020-10-09 05:39:48","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>mod´Rḣ9
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Pzc/5dCWoIc7Flv@/w8A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>mdg´Ṙḣ9
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Pzcl/dCWhztnPNyx2PL/fwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-09 05:39:48","","","","0","","","","CC BY-SA 4.0"
"212207","2","","144980","2020-10-09 07:14:27","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>¡Ṡ!o_→
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9DChzsXKObHP2qb9P///2gTHWMdw1gA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Figured this out after a lot of frustration with Jo King's help.</p>
","80214","","80214","","2020-10-09 08:16:58","2020-10-09 08:16:58","","","","7","","","","CC BY-SA 4.0"
"212208","2","","152688","2020-10-09 07:42:09","","3","","<h1>Use <code>,</code> , <code>e</code> and <code>ė</code> to debug your functions</h1>
<p>Since Husk is a functional programming language, a lot of times you'll find yourself in a situation where you have a function with two arguments passed to it, which returns an unexpected result.</p>
<p>You can replace any two argument function with <code>e</code>/<code>ė</code>, so long as it's arguments are homogeneous(have the same datatype)</p>
<p><code>,</code>, on the other hand makes a pair. It can only be used for 2 argument functions, but it supports heterogeneous types.</p>
<p>For example,</p>
<pre><code>S+ȯ□½→
</code></pre>
<p>returns the number added to itself incremented, halved then squared in that order (<span class=""math-container"">\$x + \frac{(x+1)^2}4\$</span>)</p>
<pre><code>Seȯ□½→
</code></pre>
<p>will return a two element list with the original element, and the result of the function composition.</p>
<p>For example,</p>
<pre><code>1 → [1,1]
2 → [2,9/4]
3 → [3,4]
</code></pre>
<p>and so on.</p>
","80214","","66833","","2020-10-22 13:39:20","2020-10-22 13:39:20","","","","2","","","","CC BY-SA 4.0"
"212210","2","","128021","2020-10-09 08:37:22","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>!¡ȯΣṁḊ↑_2ŀ2
</code></pre>
<p><a href=""https://tio.run/##ASAA3/9odXNr//8hwqHIr86j4bmB4biK4oaRXzLFgDL///8xMw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>!¡ȯΣṁḊ↑_2ŀ2
         ŀ2 array [0,1]
 ¡          iterate on the array, expanding it:
  ȯ         using the following 4 functions:
      ↑_2   get last 2 elements
    ṁḊ      get divisors of both
   Σ        sum them
!           Get element at index n
</code></pre>
","80214","","","","","2020-10-09 08:37:22","","","","0","","","","CC BY-SA 4.0"
"212213","2","","78985","2020-10-09 09:16:57","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>!¹OuṠ×^tḣ→
</code></pre>
<p><a href=""https://tio.run/##ARwA4/9odXNr//8hwrlPdeG5oMOXXnThuKPihpL///8y"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>!¹OuṠ×^tḣ→ Range 1..n+1 (ḣ called with 1 given an empty list)
    Ṡ      hookf: Ṡ f g x = f (g x) x
     ×^     f: apply power to all possible pairs from two lists
       t    g: tail (1..n → 2..n)
   u       all unique powers
  O        sort in ascending order
!¹         element at index n
</code></pre>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>!¹uO§×^…2ḣ
</code></pre>
<p><a href=""https://tio.run/##ARsA5P9odXNr//8hwrl1T8Knw5de4oCmMuG4o////zE"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Dominic Van Essen's solution.</p>
<h2>Explanation</h2>
<pre><code>!¹uO§×^…2ḣ
    §      fork: § f g h x = f (g x) (h x)
     ×^     f: apply power to all possible pairs from two lists
       …2   g: inclusive range from 2..n (works for n&lt;2)
         ḣ  h: range from 1..n
   O        sort in ascending order
  u         all unique powers
!¹         element at index n
</code></pre>
","80214","","80214","","2020-10-09 14:04:32","2020-10-09 14:04:32","","","","3","","","","CC BY-SA 4.0"
"212214","2","","178256","2020-10-09 09:32:16","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>→U¡ödṁoṁodΣC2gd
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbpNBDCw9vS3m4szEfhFPOLXY2Sk/5//@/oaGlpYUFAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-09 09:32:16","","","","0","","","","CC BY-SA 4.0"
"212216","2","","73128","2020-10-09 09:53:09","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>14</s></sup> 12 bytes</h1>
<pre><code>U¡o⌊?^1.5√%2
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/TQwvxHPV32cYZ6po86Zqka/f//3xQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>U¡ȯ⌊?^1.5√%2
 ¡             iterate over the input infinitely, creating a list
  ȯ            with the following three functions:
               take the previous result
          %2   modulo 2
    ?^1.5      if truthy, raise to 3/2th power
         √     else take square root
   ⌊           floor the result
U              cut the list at fixed point
</code></pre>
","80214","","","","","2020-10-09 09:53:09","","","","0","","","","CC BY-SA 4.0"
"212225","2","","96230","2020-10-09 14:33:05","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>B¹ṙ_1tḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3@nQzoc7Z8Ybljzcsfj///@mAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-09 14:33:05","","","","0","","","","CC BY-SA 4.0"
"212226","2","","179108","2020-10-09 15:04:47","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>#S≠uṁ∂Se↔
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Xzn4UeeC0oc7Gx91NAWnPmqb8v///@hoQx0jHSiO1QHzjHVMdEx1zIA8MyBtAuQDZYE8uDogLxYA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>#S≠uṁ∂Se↔
      S   hook: S f g x = f x (g x)
       e  pair the matrix
        ↔ with its reverse
    ṁ∂    get the antidiagonals of each, in a single list
#         count all diagonals which satisfy the following:
 S        hook: S f g x = f x (g x)
  ≠       diagonal does not equal
   u      itself uniquified?
</code></pre>
","80214","","80214","","2020-10-10 05:07:29","2020-10-10 05:07:29","","","","2","","","","CC BY-SA 4.0"
"212230","2","","140321","2020-10-09 15:22:50","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 12 bytes</h1>
<pre><code>ṁo►L∂Se↔C¹ḣ□
</code></pre>
<p><a href=""https://tio.run/##ASMA3P9odXNr///huYFv4pa6TOKIglNl4oaUQ8K54bij4pah////Mw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>indices are unordered.</p>
","80214","","","","","2020-10-09 15:22:50","","","","0","","","","CC BY-SA 4.0"
"212231","2","","153978","2020-10-09 15:28:16","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>F₁►L∂↔
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3@1RU@Ojabt8HnU0PWqb8l/fSPv//@hoIx1jHZNYnWhTHTMdcyBtoWOpY2gQGwsA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>takes function in the footer.</p>
<p>Folds from the left.</p>
","80214","","","","","2020-10-09 15:28:16","","","","0","","","","CC BY-SA 4.0"
"212237","2","","165294","2020-10-09 17:01:54","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>m∫T0m´R
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/dRx@oQg9xDW4L@//8fbaRjqGOsYxgLAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Dennis' method.</p>
","80214","","","","","2020-10-09 17:01:54","","","","0","","","","CC BY-SA 4.0"
"212238","2","","203135","2020-10-09 17:17:04","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>←½Ṡz+↔↓¬%2¹m´Rŀ→
</code></pre>
<p><a href=""https://tio.run/##ASkA1v9odXNr///ihpDCveG5oHor4oaU4oaTwqwlMsK5bcK0UsWA4oaS////Nw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-09 17:17:04","","","","0","","","","CC BY-SA 4.0"
"212253","2","","212240","2020-10-10 04:02:25","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>hṙ_Σ¹`-ḣ7
</code></pre>
<p><a href=""https://tio.run/##AR8A4P9odXNr//9o4bmZX86jwrlgLeG4ozf///9bMiw0LDdd"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-10-10 05:10:12","2020-10-10 05:10:12","","","","4","","","","CC BY-SA 4.0"
"212256","2","","201176","2020-10-10 09:30:58","","1","","<h1><a href=""https://mlochbaum.github.io/BQN/"" rel=""nofollow noreferrer"">mlochbaum/BQN</a>, 7 bytes</h1>
<pre><code>⥊˜¨1+↕9
</code></pre>
<p><a href=""https://mlochbaum.github.io/BQN/try.html#code=4qWKy5zCqDEr4oaVOQ=="" rel=""nofollow noreferrer"">Try it!</a></p>
<h2>Explanation</h2>
<pre><code>⥊˜¨1+↕9
     ↕9 range from 0 to 8
   1+   add 1 to each
  ¨     for each element n,
⥊˜      replicate n times
</code></pre>
","80214","","","","","2020-10-10 09:30:58","","","","1","","","","CC BY-SA 4.0"
"212258","2","","53265","2020-10-10 09:49:53","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 30 bytes</h1>
<pre><code>mȯσ&quot; &quot;&quot;  &quot;σ&quot;&lt;&quot;&quot;/¦&quot;σ&quot;&gt;&quot;&quot;¦/&quot;T' ↔
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/qKnx0Lb/uSfWn29WUlBSUlBQAjJslJT0Dy0DseyUlA4t01cKUVd41Dbl////dnYKCjY2XDYgyo4LSACxnQ0A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>I made the clunkiest possible solution.</p>
","80214","","","","","2020-10-10 09:49:53","","","","0","","","","CC BY-SA 4.0"
"212260","2","","140410","2020-10-10 10:36:20","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>#ṗumdQ↑İπ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/nhzumluSmBj9omHtlwvuH///@GBgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Freezes beyond n=10 on tio. Reverse of the 05AB1E program.</p>
","80214","","","","","2020-10-10 10:36:20","","","","0","","","","CC BY-SA 4.0"
"212261","2","","112088","2020-10-10 10:39:21","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>fȯṗΣd↑İp
</code></pre>
<p><a href=""https://tio.run/##ARkA5v9odXNr//9myK/huZfOo2TihpHEsHD///8y"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-10 10:39:21","","","","0","","","","CC BY-SA 4.0"
"212267","2","","57264","2020-10-10 13:32:21","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>14</s></sup> 12 bytes</h1>
<pre><code>↑fṠöV¬thM%ḣN
</code></pre>
<p><a href=""https://tio.run/##AR8A4P9odXNr///ihpFm4bmgw7ZWwqx0aE0l4bijTv///zIw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Jo King.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>↑fȯ≠2LḊN
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbxLQT6x91LjDyebijy@////@mAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Uses the <code>Ḋ</code>ivisors function, if that is okay.</p>
","80214","","","","","2020-10-10 13:32:21","","","","0","","","","CC BY-SA 4.0"
"212270","2","","110812","2020-10-10 14:49:38","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>?K2ȯ!İp₀←ε
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/397b6MR6xSMbCh41NTxqm3Bu6////y0A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>A recursive function.</p>
","80214","","","","","2020-10-10 14:49:38","","","","0","","","","CC BY-SA 4.0"
"212271","2","","130390","2020-10-10 15:01:08","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 2 bytes</h1>
<pre><code>ṗṗ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HO6UD0//9/cwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>One of the cases when the behaviours of functions returning non booleans is really helpful.</p>
<p>user's solution.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 4 bytes</h1>
<pre><code>ṗ£İp
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HO6YcWH9lQ8P//f1MA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##yygtzv6f@6ip8f/DndMPLT6yoeD////RRjrGOiY6pjrmOoaGOobGOobmOuYGljoWpoY6lpaGsQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify all test cases</a></p>
","80214","","80214","","2020-10-11 04:38:28","2020-10-11 04:38:28","","","","3","","","","CC BY-SA 4.0"
"212272","2","","101961","2020-10-10 15:24:01","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>¡öd↑4d□1111
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9DCw9tSHrVNNEl5NG2hIRD8/w8A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-10 15:24:01","","","","0","","","","CC BY-SA 4.0"
"212274","2","","131503","2020-10-10 16:23:03","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>&gt;D¹Σ§e₁←₁→
ḟṗt¡
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/387l0M5ziw8tT33U1PiobQKYnMT1cMf8hzunlxxa@P//f2MA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-10 16:23:03","","","","0","","","","CC BY-SA 4.0"
"212276","2","","136318","2020-10-10 16:27:53","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>!fṗmȯ→‼`^2N
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XzHt4c7puSfWP2qb9KhhT0Kckd////9NAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-10 16:27:53","","","","0","","","","CC BY-SA 4.0"
"212277","2","","15228","2020-10-10 16:35:50","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>22</s></sup> 19 bytes</h1>
<pre><code>?¨ÿċ◊¨¨ø±¨ΛoṗdSṀṙŀd
</code></pre>
<p><a href=""https://tio.run/##ATIAzf9odXNr//8/wqjDv8SL4peKwqjCqMO4wrHCqM6bb@G5l2RT4bmA4bmZxYBk////MTE5Mw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-3 bytes from Jo King. (simplified using <code>Ṁ</code>)</p>
","80214","","80214","","2020-10-11 09:37:58","2020-10-11 09:37:58","","","","1","","","","CC BY-SA 4.0"
"212279","2","","50020","2020-10-10 17:20:26","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <code>10 - ⍨ 2 × 27</code> = 44</h1>

<pre class=""lang-apl prettyprint-override""><code>f←{⎕←⍵⍴⍨⌽∧\1⍭⍵,1+2×⍵⋄∇⍵+1}1+⊢
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qW9CjtgmGRhbmXEBOQACQY2zyPw1IVQP5QOpR79ZHvVse9a541LP3UcfyGMNHvWuBYjqG2kaHp4Mku1sedbQDGdqGtYbaj7oW/f@fpmAIAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Made with some golfing help and general APL help from dzaima.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⎕←⍵⍴⍨⌽∧\1⍭⍵,1+2×⍵⋄∇⍵+1}1+⊢
                        1+⊢ add 1 to the input (initially, 1)
             1+2×⍵          double and increment it
         1⍭⍵,               prepend the primality check(1 or 0)
       ∧\                   and scan with LCM
   ⍵⍴⍨⌽                     reverse &amp; reshape using self
                            (if test is falsy, then this results in ⍬)
 ⎕←                         and display it with newline
</code></pre>
","80214","","80214","","2020-10-30 05:49:49","2020-10-30 05:49:49","","","","0","","","","CC BY-SA 4.0"
"212295","2","","129596","2020-10-11 04:42:27","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>6</s></sup> 5 bytes</h1>
<pre><code>¦DΣd¹
</code></pre>
<p><a href=""https://tio.run/##yygtzv6f@6ip8f@hZS7nFqcc2vn///9oCwMdQwMDHTMgZaFjaKRjogOkzHSMDHXMgQxDoLChoY6xpUEsAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Dominic Van Essen.</p>
<p>The existing answer doesn't use enough builtins, and Martin Ender is inactive, so I decided to post this.</p>
","80214","","80214","","2020-11-30 17:10:48","2020-11-30 17:10:48","","","","2","","","","CC BY-SA 4.0"
"212297","2","","166177","2020-10-11 05:39:28","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 12 bytes</h1>
<pre><code>←ḟΛ=Um`CẊ≠⁰N
</code></pre>
<p><a href=""https://tio.run/##AUEAvv9odXNr///ihpDhuJ/Omz1VbWBD4bqK4omg4oGwTv///1s2LDExLDEzLDE4LDIwLDI1LDI3LDMyLDM0LDM5LDQxXQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##RcwhDgIxFADRC43o/@22XYHC41BNEyQJWUU4wCJIQOERcAQk4RDcYXuRstSg52W2h/2uDuU41nK6Tq/757ZYD5vl9L6U86OMz1WtNSXBEekRg1gkIBHpUUU9GtCYSR6RliNq0O4XrGIdtsfJLBT/X6g0E5vxOIOzuDCzbmYh5y8"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify all test cases</a></p>
","80214","","","","","2020-10-11 05:39:28","","","","0","","","","CC BY-SA 4.0"
"212298","2","","97146","2020-10-11 06:17:20","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>9</s></sup> 7 bytes</h1>
<pre><code>ΛS=↔G*p
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zsYNtHbVPctQr@//9vCQUA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Jo King.</p>
","80214","","80214","","2020-10-11 11:19:22","2020-10-11 11:19:22","","","","2","","","","CC BY-SA 4.0"
"212299","2","","203098","2020-10-11 11:43:47","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>Λ=mO½´×oΣzo□-
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9xs21z/Q3sPbTk8Pf/c4qr8R9MW6v7//z862lDHJFYn2lTHCEia6BgASQMgOxYA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>I'm not sure if this is correct.</p>
<p>It takes Euclidean distance between all pairs and checks if the resulting array is symmetric.</p>
","80214","","","","","2020-10-11 11:43:47","","","","0","","","","CC BY-SA 4.0"
"212302","2","","125427","2020-10-11 13:15:56","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 38 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{(⌽¨≡⊢)(⊢,⊢/¨,⍥⊂⊃¨)⍵⊆⍨w⍴∊⍴⍨¨1+2×⍳w←≢⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qp/@jtgkG/6s1HvXsPbTiUefCR12LNDWAhA4Q6x9aofOod@mjrqZHXc2HVmg@6t36qKvtUe@K8ke9Wx51dIHI3hWHVhhqGx2e/qh3cznQrEedi4DKav@ngdi9fUCNj3rXABUeWm/8qG0i0MbgIGcgGeLhGfw/TUHd0MzAzNDUwNRQHQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>The cuts are of size <code>1,3,5,7...</code>, so that is used with <code>⊆</code> to get the appropriate array.</p>
<p>Requires <code>⎕IO←0</code> for zero indexing.</p>
<p>Shortened with a lot of help from Marshall and dzaima.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{(⌽¨≡⊢)(⊢,⊢/¨,⍥⊂⊃¨)⍵⊆⍨w⍴∊⍴⍨¨1+2×⍳w←≢⍵}
                                   ≢⍵  length of the string
                                 w←    assign to var w
                                ⍳      range from 0..length-1
                            1+2×       convert each to 2n+1 (odd numbers)
                         ⍴⍨¨           replicate each element times itself
                        ∊              flatten that
                      w⍴               reshape to string's length
                   ⍵⊆⍨                 partition the string based on that
       (⊢,⊢/¨,⍥⊂⊃¨)                    Train:
       (⊢,        )                    concatenate the partition with:
       (  ⊢/¨     )                    last character of each partition
       (        ⊃¨)                    first character of each partition
       (      ⍥⊂  )                    both enclosed into two strings
  ⌽¨                                   do the reverses of each part
    ≡                                  match
     ⊢                                 the parts?                           
</code></pre>
","80214","","","","","2020-10-11 13:15:56","","","","0","","","","CC BY-SA 4.0"
"212308","2","","50845","2020-10-11 14:25:14","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 24 bytes</h1>
<pre><code>LΣΣU¡(fo¬εṁm₁);;
ḟo=¹ΣQḣ
</code></pre>
<p><a href=""https://tio.run/##ATIAzf9odXNr//9MzqPOo1XCoShmb8KszrXhuYFt4oKBKTs7CuG4n289wrnOo1HhuKP///8yNA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##yygtzv6f@6ip8eGOxSYG/33OLT63OPTQQo20/ENrzm19uLMRKNekaW3N9XDH/HzbQzvPLQ4Eqvz/HwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify first 40 values</a></p>
<h2>Explanation</h2>
<pre><code>Function ₁: Get the longest slice of numbers
ḟo=¹ΣQḣ
      ḣ range 1..n
     Q  all subsequences
ḟo      get the first value which satisfies:
    Σ   sum
  =     equals
   ¹    argument?
</code></pre>
<p>Taking the first value works because Husk orders subsequences lexicographically, and the longest sequence will always be the one which is lexicographically smallest.</p>
<pre><code>LΣΣU¡(fo¬εṁm₁);;
              ;; nest the input twice: 24 → [[24]]
                 (conversion to node)
    ¡            iterate infinitely, producing intermediate results
          ṁ      map each node list to
           m₁    it's elements converted to their fissions
          ṁ      and join them
     fo          filter using two functions
       ¬ε        is it not of length &lt;1?
                 (this removes all nodes which cannot be broken down)
   U             cut at first non-unique element
 ΣΣ              join all the nested nodes into one list
L                length
</code></pre>
","80214","","80214","","2020-10-11 14:50:51","2020-10-11 14:50:51","","","","0","","","","CC BY-SA 4.0"
"212314","2","","212300","2020-10-11 15:09:11","","5","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>15</sup></s> 13 bytes</h1>
<pre><code>fo=¹§+Πṁ□π2…0
</code></pre>
<p><a href=""https://tio.run/##ASMA3P9odXNr//9mbz3CucKnK86g4bmB4pahz4Ay4oCmMP///zE5Ng"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Zgarb.</p>
<p>Outputs <code>[]</code> for non-Loeschians.</p>
<h2>Explanation</h2>
<pre><code>fo=¹§+Πṁ□π2…0
           …0 range from 0..n
         π2   create all possible pairs using 0..n
fo            filter by the following two functions:
    §         f: fork: § f g h x = f (g x) (h x)
     +           add
       ṁ□        sum of squares
      Π          and fold by multiplication
  =¹          g: is that equal to 1?
</code></pre>
","80214","","80214","","2020-10-12 02:20:59","2020-10-12 02:20:59","","","","1","","","","CC BY-SA 4.0"
"212321","2","","212305","2020-10-11 15:57:01","","2","","<h1><a href=""https://mlochbaum.github.io/BQN/"" rel=""nofollow noreferrer"">mlochbaum/BQN</a>, 21 bytes</h1>
<pre><code>10{+⟜(𝕨⊸×)´⌽𝕩}'0'-˜¨
</code></pre>
<p><a href=""https://mlochbaum.github.io/BQN/try.html#code=MTB7K+KfnCjwnZWo4oq4w5cpwrTijL3wnZWpfScwJy3LnMKoIkhpISI="" rel=""nofollow noreferrer"">Try it!</a></p>
<p>The online BQN REPL does not have a method of taking input(<code>⍞</code> in APL), so append the string to the end of the program.</p>
","80214","","","","","2020-10-11 15:57:01","","","","0","","","","CC BY-SA 4.0"
"212360","2","","49307","2020-10-12 05:36:49","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 89 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{,⌿{⍪(⌽,2∘↓∘⊢)⍵,'  _'}¨⍪⍎¯1↓('\d+'⎕R{'(',⍵.Match})('[P]' '[N]'⎕R'⍴''- ''),' '⍴''=''),')⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v1rnUc/@6ke9qzQe9ezVMXrUMeNR22QQ2bVI81HvVh11BYV49dpDK4AqHvX2HVpvCJTWUI9J0VZ/1Dc1qFpdQ10HqEzPN7EkOaNWU0M9OiBWXUE92i8WLK/@qHeLurqugrq6JtAkCM8WzAEZXvs/7VHbBKCxj7qaH/WuAcoeWm/8qG0iUGdwkDOQDPHwDP6fpqBu4mcSYOlnHmDoZxhg5GcUoA4A"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A huge, clunky solution with a lot of regex and <code>⍎</code>.</p>
<h2>Explanation</h2>
<p><code>('[P]' '[N]'⎕R'⍴''- ''),' '⍴''=''),')⍵</code> Replace <code>N</code> with code for producing '=' and <code>P</code> for producing '- ' with a closing bracket</p>
<p><code>('\d+'⎕R{'(',⍵.Match})</code> prepend an opening bracket to each digit
('\d+'⎕R{'(',⍵.Match})</p>
<p><code>⍎¯1↓</code> drop the last character, and execute (gives the road markings)</p>
<p><code>⍪</code> table it</p>
<p><code>⍵,'  _'}¨</code> add two spaces and underscore for each marking</p>
<p><code>⍪(⌽,2∘↓∘⊢)</code> Palindromize that, table it</p>
<p><code>,⌿</code> join all the columns into a single road</p>
","80214","","80214","","2020-10-30 06:19:23","2020-10-30 06:19:23","","","","0","","","","CC BY-SA 4.0"
"212362","2","","126863","2020-10-12 06:29:59","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 1071 bytes</h1>
<pre><code>x';!x'%¨AλḞ↕¥βα, »Ṅ'tαt◄l²Za;ṅȦẏ£₇,İ⌊⌋§,ẋZȦṅ´%ḃ⁸ṙż⁸rḃ6ΔbΨËŀ⁶⁶bȦ†;Ḃ⌉säeḃ⁸►,ḃĿ¦İ'mḃβø»)%¥◄£Ẏα¢ȧ×ẏ₅,ŀY4s;Cȧc₇gc₂ȧ≥*εyẏ⁹X∫cẊ←ρ%ż‡ṪeαŸ]1₀fḋ₄k◄ΨdżḊİ'ÿ#G;żδτÖ$,Ḋo¬ḟ×DΦε÷~←ẇ%Eȧ:ØoŸḊ*ωwȧ‼Äd√ṘżẎ₃;£Γφ£⁹&amp;,⁷ŻË□=Ṫ%Γ2u,⌈Λ,£Γü,ẋ=Λ;Flÿ»Jθ Ḟ₂&lt;f¦τḞŻ€εψ=Ȧ%GïΓ≥*Ġτ,⌊⁶lσ₀sżȯ γĿ‰;GẎτ'Ŀ? ¹¬ï gÄmẆwËgø₅t%Hit¦mıḣ,Ż¦Γ□±h,Ïσ»Ψ;Hey«₈öÿ#İ,ä&gt; 'em«‼jαtÿrȮ³₆γ%żẊo¹do∟z,İ¹Ẋz…;Inα'ŸȦṪ,İ'∟l²Ë↕α'≥×8ṡṫ%ȷ;Jd₀¬mΨj≥₄←↕JhĖiŀ?üȷ&lt;θ↕'ȷȷ5;ȷΨJ,¹t's⌋≈ṁm, ẇJγyȷ⌋l%◄/↓İ'mŻ?¹◄lȷk∫θ ΞkΦ;Ka►†ẏ&lt;kγPβ&gt;∫↕γy□&lt;D%←Ṫṁm∟ıα«g←‡,γ₇Ψï◄⌊J$¹sλ≥e;LȦm¦oμW⌋'←ø†oγy£?√%MΨΔ`mφkŀ₂↑ṁØs,□ṡ▲;λ%√ÄdṁØ,Ṁẏ□KΦωζİ've⁶2₃%ȷNgasη@p⌋Ẇηİ'mẏ[ ,£γa;γŻK, ṅṘ←&lt;,ṁ^□ȯ,ṄOṅ◄%ẎO,₀pΠΦ,Öf⁰t⁷ṗΦ;üt₀fŻḣg,øo₀fṁ%,ωχẎ₈Ġ£ρŀs%⁶ḟ3₉□m,λḟ&gt;Ẏπ±⁷¬;Püψ⁷~ÿ/†ẇṖ,Γ%Ṗ¹¬mΨpṘβ%₂Q₈&quot;,□□‰Π&lt;□□&quot;¹t'sμQψ⌋n;⌊Q→Ėsα↕'t≥*α□ṙ_₀fωζẇe≥*, uh%γ⌊lrȧwrȧφ,Ÿṙİüp⁷¿δ;⌋□1ε□↔₁ḋ₂¥ωτ%üṗṠ₂ŀ‡{⁵θ∂ä#żġḢ;ẋ≥lṗ€⌈β⁵ȧφȦ…äeḞJs%Tλ$₂nïż◄/…,θσ□ö↔;ȧΣȦ…,ŀ½¦Ės,ġṪαŸ≥ üp%λ&quot;⁵,ÿÜÜ,żμX;ÿ₈U⌋₇/, Ë►ω²¥Ξ%⁸βV√[⁷Övȷ⌈⁰ẏ←d;£×V√↕₆₅Ȧ…äeż▼ ,ṁ^¦m□▼´%Ẇ¿İ'm◄lẆ⌉,ωζαẇ≈eÖrżΔ#⌋≈;ẇψ▼üpẇ., wẊ)ρ ΦγyȮk⌋⌈≤%⌋XΞ, mΨX-żσ↕«½*Ξτa←⁴;X-hġ`λƒζȦ xy⌊₂₉£Yø%«ωŀ-₆k,γ⌋ẏ«Ḣu, γμȯε'ÿ?ws;ŸΨY'sĿwnŸψ⌐Ȧ¦,İ¥;ω%Zig-ZagŀΓḂs, zo₂σ†oεŻΩh;żZr↕,ΩΩŻ⁰↔s,√oż◄↑Ξ¿ψZEA-LOTS!¨-96ṁ½
</code></pre>
<p><a href=""https://tio.run/##NVX9b9NWFP1XzIcXDb0OjW1omwvdNBhb2QZobCtF@yhraaENRU1ZKZOQbUKatBWwlbmwTaVZqBtoRZOUNnZiFOk9e/JP13@D3z/SnRc0KR8vfi/3nnvuueeN3ciN7@3dzBj7bmZ0Xv2Y2qm3Igt/8DVqUJ1pvJ36@cw01aflcn6CNwaHjNS/G7tp6z6vSHuOhTW5OC8XF/g6S1sLg9jx7/KXeurdkZaX@o@jAN9T@HmUHl6iqliITGnt4nUpdqW5aqSeLRdLOfF05PVfpNNiWIUd7oa1TBZLagiPt9/U@Rog8Eraukd1/k@8LpYBQtp3WWReeDdnfBKv/wxAo/iw43VZWjtEO7PqhOUPyOLGz2lrXhYeJJYORGY59Z@PUD3yvn9b2ubl1FuQdn4c8ak6HAWpN4/conPglBEF9DLJC@cgQM1P8s3UeyKWT5BLO6J5G/HS1px@Ml7/UDyajDwcOZSUZpDdDER@WBb/TP1HCNe6J@07Bq/QUlIAa5b/BpNWM2qLBemUjwGKTktHbjC5WKS/mDomAkXmMfrL@HRCdHi7nzxN9cW2ey9zN8ljHbWlvUk7SfFY7OqnxBYtqZLD1STPVEOs3YnkDkrLRUG8pdF22JFmzTgFKEk@E3b6NO7zTbGljYp8Nm0VZsTCqPBA5rT@2ZVp7mbDeupVWNTmLgI7ZV4fY@J@coe3qWp8NjLLN6RdFLugKKwx8fS4lhnJ4pkZXIVSRGcqfsG3pV2gbV2VD@L84UlZfHILcuE@HtySpmt8fo3qmchTknmOjQwOQGEgpfAHNlCOWH4/9dGqDT1uGv3DKIdvZql6FVtoF9jHyf6x0LkSmX0iiJu95OFJJm7GzfeMuEnVfsb96UwO8pSlYupbWaahYf20PRs38XBCR8cPy8KSUlrU7uO@EnncHIdewDitjJNrnB6CJKFUSKl3nLbPUuM4thXG7Vkw03tCVzLwn6vwqCCsQ50bowqcWWYEFuag@i0ERlv6D3I/R23gHzG@iN0sdycp@A5IMjgP/s3VSUTllT5IR/@SqvTwp2xSGMfI2LYs/IYU4lGOIStokU7DoLaOk5Bad4elvqkE75RPk5uUaBdl/TICKRyB/EDhV6NDOWp@dB350HJqduerdf@ipjS3PWTQdtQ@DYb8u5AtAPUioPUDwsVbWOXPYANl6NDQGYZeXKdVcplwLkurNg09p/4y6BLBtJqoCD5SGWXCm@zOl2/pLCklc91RKIarvJJYkZnTAQ4T9Y60S0iTZcp9nhxXIjV5HSH5pnFWBEkRy9uic7jbhbnUdxgt6fhSGoYergMuNXRwdA7B9yt@1Mus0Wrv6/X@rgwoOIdQiwvXDLTinCz8Hjo5qivFTHftot4l9vGPCrGiD7lG1AbTbozp6OTi/MRUvD6Dd1JgkTK3sCaC6wpnh14aSmVO@W3aUTkLD6VtdW3F5muoPK@LAASl/iqeoJ9m@Vdp7UCvRVs8PRAFYTn1/jEw9Eg4gYMYbmUHDRxS6ZRXul2PXOnP6eepfRBhrokteJlSsOky8jDvTlnsIrURr1Ol@xd4I38FJ3VyLFSepywPGTTA1qm9H9GZ6Ii/xd8MRhcMGKIDBr9Rldhzh5mmDKqVlHgD18EKmuVR41sI7iJKFs4vaobQmprSXOHBMAxOLKttMIrZh5n8jxoonUDrqgnW0m1JoO6IVoF3lAjV1OEH7gGmeKc6mMfAjghnCrAeHng9v2BnDv1zAoDH8i2mzcBJ3kwsDXaMiX4xrs4BUempjtUArTAN6hjoiQJQgyttg786RCtJfkgNp/XSGOgZC8s/Ufvf32k3drWbs8o4MWh2iVcuCE/nG0kpMntQy7gaZDU19/kG@nSDwVEJxko7uCX6ZnJG5FH1QiYXdmauRZ4S2YPY5a5yuzUjKemDV0Z7BodGI5OWcN/lmHYLY2EDlRr4nahNz8Zw0wxOASWjZ/QM5m7V0EjMevHPyW6TMf60wjtJcfDkxz1fnDn/9T5e7fngKDjlr/b29i79Bw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Another lazy answer using built in compression.</p>
","80214","","","","","2020-10-12 06:29:59","","","","0","","","","CC BY-SA 4.0"
"212364","2","","123173","2020-10-12 06:40:00","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 3 bytes</h1>
<pre><code>ṁ\ḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxpiHOxb////fFAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Output is a fraction.</p>
","80214","","","","","2020-10-12 06:40:00","","","","0","","","","CC BY-SA 4.0"
"212365","2","","68143","2020-10-12 06:50:00","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>z*:1İ⁰↔M*d
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/v0rLyvDIhkeNGx61TfHVSvn//7/hfwsA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-12 06:50:00","","","","0","","","","CC BY-SA 4.0"
"212367","2","","7320","2020-10-12 07:07:51","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>m(ṁ§:osL←g
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P1fj4c7GQ8ut8ot9HrVNSP///3@0UkYqEOTk5CvpKJXnA0FRTopSLAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-12 07:07:51","","","","0","","","","CC BY-SA 4.0"
"212368","2","","12902","2020-10-12 07:13:11","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>9</s></sup> 7 bytes</h1>
<pre><code>ṁΓ·RrC2
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxnOTD20PKnI2@v//v5WhiYmOobohAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-10-12 08:34:09","2020-10-12 08:34:09","","","","2","","","","CC BY-SA 4.0"
"212377","2","","212371","2020-10-12 09:22:41","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>13</s></sup> 12 bytes</h1>
<pre><code>F+ṀΓ·:f≠⁰↕≠⁰
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/30374c6Gc5MPbbdKe9S54FHjhkdtUyGM////Gxr8jzbVMdUxNAAhOCsWAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>user's answer.(-3 bytes, then -1 byte.)</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>J²fI§e←of≠²→↕≠²⁰
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3@vQpjTPQ8tTH7VNyE971Lng0KZHbZMetU2FMBs3/P//3@R/tLkOMjTG4BmC6FgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p><s>Can probably be shortened with <code>Γ</code>.</p>
<p>There may be an extremely short solution with <code>ü</code> as well.</s><a href=""https://codegolf.stackexchange.com/a/212417/80214"">user's answer</a></p>
<p>+2 bytes after supporting numbers not in the list.</p>
","80214","","80214","","2020-10-12 17:15:56","2020-10-12 17:15:56","","","","3","","","","CC BY-SA 4.0"
"212404","2","","206838","2020-10-12 14:43:08","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>EẊoF/z-
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3/Xhrq58N/0q3f///0dHG@oYxupEG@kYAUljHePYWAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-12 14:43:08","","","","0","","","","CC BY-SA 4.0"
"212407","2","","210437","2020-10-12 14:54:19","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>§^←Lp
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9DyuEdtE3wK/v//b2hsbAgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-12 14:54:19","","","","0","","","","CC BY-SA 4.0"
"212413","2","","86773","2020-10-12 16:46:28","","1","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 39 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{+/1⍭2⊃¨¯1⎕DT{⍵/⍨3=7|⍵}⊃↓∘⍳/1⎕DT,¨⍵+⍳2}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qp/@jtgkGXI862lxCgKxqQ9tHvbusHvU0pSRWFh9a8ah3qw6Q7GoyVDBUeNTdogCWKUkFy9T@TwNp0dY3fNS71uhRV/OhFYfWG4KNqgZK6z/qXWFsa14DUgmUfNQ2@VHHjEe9m/UhSnTAZmgDBYxqQS4BGpWmYGhpaMSFxDFB4lggcyzN4BwjAzNjBMfQ1ACJY2mJ4BgZG/8HAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Just <em>that</em> much away from MATL.</p>
<p><code>∆DT</code> is polyfilled in this answer  because it isn't available on tio.</p>
<p>It was created by Adám(I simply cannot thank him enough for his help).</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{+/1⍭2⊃¨¯1⎕DT{⍵/⍨3=7|⍵}⊃↓∘⍳/1⎕DT,¨⍵+⍳2}
                                  ⍵+⍳2  year and year+1
                            1⎕DT,¨      convert each of those to their day numbers
                        ↓∘⍳/            get inclusive range between them
                       ⊃                remove nesting
             {⍵/⍨3=7|⍵}                 Wednesday filter:
                 3=7|⍵                  7 mod &lt;daynum&gt; always returns day of the week (starting on Monday)
              ⍵/⍨                       filter dates by that bitmask
        ¯1⎕DT                           convert the filtered day numbers to mm dd yy
     2⊃¨                                pick 2nd element of each(dd)
   1⍭                                   check if prime(1 or 0)
 +/                                     sum the array
</code></pre>
","80214","","","","","2020-10-12 16:46:28","","","","0","","","","CC BY-SA 4.0"
"212419","2","","194929","2020-10-12 17:28:14","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>€§×+ḣṫ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HTmkPLD0/Xfrhj8cOdq////59UlF@anlGikJGZq5CokJ6flw4UysxLBwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-12 17:28:14","","","","0","","","","CC BY-SA 4.0"
"213430","2","","66159","2020-10-13 04:11:11","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>moJ',msfo=¹Σπ²
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/PzffS10ntzgt3/bQznOLzzcc2vT//3/j/@YA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>with the correct output format.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>fo=¹Σπ²
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Py3f9tDOc4vPNxza9P//f@P/5gA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Inputs are taken as <span class=""math-container"">\$n,m\$</span>.</p>
<h2>Explanation</h2>
<pre><code>fo=¹Σπ²
     π   cartesian power of n, with range 1..m
f        filter the terms where
    Σ    sum
  =      equals
   ¹     m
</code></pre>
","80214","","","","","2020-10-13 04:11:11","","","","0","","","","CC BY-SA 4.0"
"213434","2","","64812","2020-10-13 07:58:37","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>#¹´×+m□ṡ
</code></pre>
<p><a href=""https://tio.run/##ARoA5f9odXNr//8jwrnCtMOXK23ilqHhuaH///8xMA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##AR8A4P9odXNr/23igoHFgDI2/yPCucK0w5crbeKWoeG5of//"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify first 25 values</a></p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>#¹mṁ□π2ṡ
</code></pre>
<p><a href=""https://tio.run/##ARoA5f9odXNr//8jwrlt4bmB4pahz4Ay4bmh////MA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-13 07:58:37","","","","0","","","","CC BY-SA 4.0"
"213435","2","","88732","2020-10-13 08:09:09","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>€¹m§+Πṁ□π2ṡ
</code></pre>
<p><a href=""https://tio.run/##ASMA3P9odXNr///igqzCuW3CpyvOoOG5geKWoc@AMuG5of///zk5OQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-13 08:09:09","","","","0","","","","CC BY-SA 4.0"
"213437","2","","199353","2020-10-13 08:13:10","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>§&lt;ΣoD▲
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9Bym3OL810eTdv0////aEMdIIwFAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-13 08:13:10","","","","1","","","","CC BY-SA 4.0"
"213439","2","","61430","2020-10-13 08:43:42","","1","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 38 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>s⌿⍨1=≢∘∪⍤1⍪+/,⍤⊢⌺1 2 2⊢s←3 3⍴⍤1⌂pmat 9
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97X/xo579j3pXGNo@6lz0qGPGo45Vj3qXGD7qXaWtrwNkPepa9Khnl6GCkYIRkFn8qG2CsYLxo94tYEU9TQW5iSUKliCT/qdxAQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Uses the builtin <code>dfns.pmat</code> to generate required permutations.</p>
<p>Will add an explanation soon.</p>
<p>Made with golfing help from Adám, who also ran the program on his machine for checking. ↓</p>
<p><a href=""https://i.stack.imgur.com/IQbdl.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IQbdl.gif"" alt=""enter image description here"" /></a></p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>s⌿⍨1=≢∘∪⍤1⍪+/,⍤⊢⌺1 2 2⊢s←3 3⍴⍤1⌂pmat 9
                             1⌂pmat 9 matrix of permutations of 1..9
                      s←3 3⍴⍤         convert each to 3x3 matrix, and store in s
              ⊢⌺1 2 2⊢                get all overlapping 2x2 squares in each of those   
        1⍪+/,⍤                        sum the flattened 2x2's of each
  1=≢∘∪⍤                              is there only 1 unique sum?
                                      this creates a bitmask for filtering each 3x3
s⌿⍨                                   filter s by that
</code></pre>
","80214","","80214","","2020-10-30 05:59:40","2020-10-30 05:59:40","","","","0","","","","CC BY-SA 4.0"
"213441","2","","6228","2020-10-13 09:33:22","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>↑≤⁰¡+⁴²
</code></pre>
<p><a href=""https://tio.run/##ASIA3f9odXNr///ihpHiiaTigbDCoSvigbTCsv///zEuNf8z/zEy"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-13 09:33:22","","","","0","","","","CC BY-SA 4.0"
"213444","2","","52089","2020-10-13 12:25:06","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>↑¡ȯ↔Σ↑_2ŀ2
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbxEMLT6x/1Dbl3GIgO97oaIPR////DS0A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-13 12:25:06","","","","0","","","","CC BY-SA 4.0"
"213445","2","","58328","2020-10-13 12:32:49","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>ΣU¡ȯdẊ≠d
</code></pre>
<p><a href=""https://tio.run/##AR8A4P9odXNr///Oo1XCocivZOG6iuKJoGT///84Njc1MzA5"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-13 12:32:49","","","","0","","","","CC BY-SA 4.0"
"213448","2","","59805","2020-10-13 13:01:40","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>ḋ`Ṙİ¬↔OmLgḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@GO7oSHO2cc2XBozaO2Kf65PulAkf///5uaGwIA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-13 13:01:40","","","","0","","","","CC BY-SA 4.0"
"213453","2","","59805","2020-10-13 14:27:07","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>32</s></sup> 30 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⊥{⍵/(≢⍵)⍴⊤2}⊃¨∨{⍴¨⍵⊂⍨1,2≠/⍵}⊤⎕
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97f@jrqXVj3q36ms86lwEpDUf9W551LXEqPZRV/OhFY86VgAltwAZvVsfdTU96l1hqGP0qHOBPpAPVLHkUd9UkCn/07hMzQ0B"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>-2 bytes for full program.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>⊥{⍵/(≢⍵)⍴⊤2}⊃¨∨{⍴¨⍵⊂⍨1,2≠/⍵}⊤⎕
                            ⊤⎕ convert input to binary
                       2≠/⍵    inequality of overlapping pairs
                     1,        prepend 1
                  ⍵⊂⍨          partition bits on that
                ⍴¨             get length of each part
              ∨                sort in descending order
            ⊃¨                 unenclose each
          ⊤2                   array [1,0]
    (≢⍵)⍴                      reshape to ⍵'s length
  ⍵/                           filter ⍵ by that(every other element)
⊥                              convert that back to binary
</code></pre>
","80214","","80214","","2020-10-30 06:09:25","2020-10-30 06:09:25","","","","0","","","","CC BY-SA 4.0"
"213455","2","","75587","2020-10-13 15:24:30","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>Σz*İ_∂
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9ziKq0jG@IfdTT9//8/OtpQx0jHWMckVifaVMdMx1zHAsiy1AGLxsYCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same idea as <a href=""https://codegolf.stackexchange.com/questions/150117/boustrophedonise/150135#comment499944_150135"">Zgarb's Boustrophedonize solution.</a></p>
","80214","","","","","2020-10-13 15:24:30","","","","0","","","","CC BY-SA 4.0"
"213465","2","","213457","2020-10-13 16:25:15","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>18</sup></s> 17 bytes</h1>
<pre><code>ḟ(EM⌋m+¹ṡ1)fo¬ṗ↓N
</code></pre>
<p><a href=""https://tio.run/##AScA2P9odXNr///huJ8oRU3ijIttK8K54bmhMSlmb8Ks4bmX4oaTTv///zI"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##yygtzv6f@6ip8f/DHfM1XH0f9XTnah/a@XDnQkPNtPxDax7unP6obbLf////o410THXMdAwNdAyNdIzMdYyNdIxNdIzNdSyAyELHwhIobgjExjpGBpaxAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify all test cases</a></p>
<p>-1 byte after rearranging stuff.</p>
<h2>Explanation</h2>
<pre><code>ḟ(EM⌋m+¹ṡ1)fo¬ṗ↓N
               ↓N drop first b elements from natural numbers.
           fo¬ṗ   filter out primes
ḟ                 get first element which satisfies the following:
 (        )       co-prime check
        ṡ1        range -1..1
     m+¹          add each to b
   M⌋             GCD of each and b
  E               are all equal?
</code></pre>
","80214","","80214","","2020-10-13 16:33:55","2020-10-13 16:33:55","","","","0","","","","CC BY-SA 4.0"
"213501","2","","212328","2020-10-14 08:38:43","","2","","<h1>18. <a href=""https://esolangs.org/wiki/%EF%BD%9B%EF%BD%9D"" rel=""nofollow noreferrer"">{} (Level 8)</a>, 4 available bytes</h1>
<pre><code>{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{{}{}{}{}{}}[]
</code></pre>
<p><code>{} (Level 8)</code> is a brainfuck clone.</p>
<p>According to the esolangs wiki page, <code>{}</code> evaluates to <code>+</code> in brainfuck, and <code>{{}{}{}{}{}}</code> evaluates to <code>.</code>.</p>
<p>Here's the same program, translated to brainfuck: <a href=""https://tio.run/##SypKzMxLK03O/v9fm1yg9/8/AA"" rel=""nofollow noreferrer"" title=""brainfuck – Try It Online"">Try it online!</a></p>
<p>This program prints <code>9</code>.</p>
<p><code>[]</code> does nothing in this program, since it isn't a command.</p>
<p>The next program must use the following 13 bytes taken from <a href=""https://www.reddit.com/r/AskReddit/comments/45gq2q/besides_69_what_is_the_funniest_number_and_why/"" rel=""nofollow noreferrer"">this thread</a>:
<code>[2,5,8,10,22,25,31,40,77,80,96,101,137]</code></p>
<p>Or, as hex:</p>
<p><code>02 05 08 0A 16 19 1F 28 4D 50 60 65 89</code> (courtesy of PkmnQ)</p>
","80214","","80214","","2020-10-14 14:19:02","2020-10-14 14:19:02","","","","3","","","","CC BY-SA 4.0"
"213505","2","","98132","2020-10-14 09:36:02","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>Tz*İ_ze
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P6RK68iG@KrU////e6Tm5OTr/A/PL8pJUQQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Outputs are reversed.</p>
","80214","","","","","2020-10-14 09:36:02","","","","0","","","","CC BY-SA 4.0"
"213521","2","","210071","2020-10-14 15:26:56","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 1 byte</h1>
<pre><code>Π
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9yC////GxoBAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-14 15:26:56","","","","0","","","","CC BY-SA 4.0"
"213570","2","","212328","2020-10-15 02:48:02","","2","","<h1>20. <a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP v1.1</a>, 21 available bytes</h1>
<pre><code>!!!!!!::::::&quot;#$%&amp;()*+&lt;&gt;?@^_{|}~
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=!!!!!!%3A%3A%3A%3A%3A%3A%22%23%24%25%26()*%2B%3C%3E%3F%40%5E_%7B%7C%7D%7E&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<p>Prints <code>111111</code>,</p>
<p>Using the bytes <code>!&quot;#$%&amp;()*+:&lt;&gt;?@^_{|}~</code>.</p>
<p>The first 12 bytes do the hard work(cloning the existing 1 and printing it), then the rest do a whole lot of nothing. <code>()</code> does othing since nothing is on the stack, and the rest fo the characters don't change anything since <code>:</code> needs to be there for outputting their result.</p>
<h2>Restriction</h2>
<p>The next answer must only use the currency symbols shown <a href=""https://usefulshortcuts.com/alt-codes/currency-symbol-alt-codes.php"" rel=""nofollow noreferrer"">here</a>, and %:</p>
<p><code>¤£€$¢¥₧ƒ%</code></p>
<p><code>[37,164,156,128,36,155,157,158,159]</code></p>
<p><code>[0x25,0xa4,0x9c,0x80,0x24,0x9b,0x9d,0x9e,0x9f]</code></p>
<p>or</p>
<p><code>0x24-0x25, 0x80, 0x9b-0x9f, 0xa4</code> (from Bubbler)</p>
","80214","","80214","","2020-10-16 05:01:19","2020-10-16 05:01:19","","","","1","","","","CC BY-SA 4.0"
"213576","2","","200363","2020-10-15 05:28:38","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>#ȯ=2→dḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/nEelujR22TUh7uWPz//39DAwMA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-15 05:28:38","","","","4","","","","CC BY-SA 4.0"
"213577","2","","191529","2020-10-15 06:17:29","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>18</s></sup> 15 bytes</h1>
<pre><code>fΛ¦ufo=¹ΠṖmΠtṖp
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P@3c7EPLStPybQ/tPLfg4c5puecWlACpgv///1sAAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Similar to Grimmy's 05AB1E answer.</p>
<p>-3 bytes from Zgarb.</p>
","80214","","80214","","2020-10-15 08:03:52","2020-10-15 08:03:52","","","","2","","","","CC BY-SA 4.0"
"213578","2","","122215","2020-10-15 06:26:48","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>ṁ!İfḊ!İf
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HORsUjG9Ie7ugCUf///zcDAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-15 06:26:48","","","","0","","","","CC BY-SA 4.0"
"213586","2","","213543","2020-10-15 08:27:11","","1","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 36 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{∧∪{⍵/⍨w∊¨⍵}⊃,/⊃¨(⊢,,¨)/¨↓⌂pmat⊢w←⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v/pRx/JHHauqH/Vu1X/Uu6L8UUfXoRVATu2jrmYdfSBxaIXGo65FOjqHVmjqA2XaJj/qaSrITSwBCpY/apsAUvo/DczoA6p@1LvmUe@WQ@uNH7VNfNQ3NTjIGUiGeHgG/09TMAYA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Uses <a href=""https://codegolf.stackexchange.com/a/211449/80214"">Bubbler's APL tip</a> for generating subsequences of a vector.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{∧∪{⍵/⍨w∊¨⍵}⊃,/⊃¨(⊢,,¨)/¨↓⌂pmat⊢w←⍵}
                                w←⍵  assign input to w for later
                          ⌂pmat⊢     generate matrix of all permutations of 1..input
                                     (⌂ is an extended symbol)
                         ↓           convert matrix to list of vectors
                 (⊢,,¨)/¨            generate all subsequences of each,
                                     which include the last item
            ⊃,/⊃¨                    remove nesting for each, and join into a list of vectors
    ⍵/⍨                              filter the vectors by:
       w∊¨⍵                          whether the input exists in them
  ∪                                  remove duplicates
 ∧                                   Sort lexicographically (Extended symbol)
</code></pre>
","80214","","","","","2020-10-15 08:27:11","","","","0","","","","CC BY-SA 4.0"
"213593","2","","198790","2020-10-15 11:28:03","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>Σṁ↔C2C3
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zihzsbH7VNcTZyNv7//79zfkqqgnt@ThoA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-15 11:28:03","","","","0","","","","CC BY-SA 4.0"
"213596","2","","122087","2020-10-15 12:27:41","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 4 bytes</h1>
<pre><code>±£∫N
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9DGQ4sfdaz2@///vyUYAAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Since it reqiures a constant truthy value, <code>±</code>(sign) is used.</p>
","80214","","","","","2020-10-15 12:27:41","","","","0","","","","CC BY-SA 4.0"
"213604","2","","200985","2020-10-15 16:02:19","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>14 12</s></sup> 10 bytes</h1>
<pre><code>ṁ`Jḋ3MRİ12
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxgSvhzu6jX2DjmwwNPr/HwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Infinite list.</p>
<p>-1 byte from Dominic Van Essen.</p>
<p>-2 bytes from Zgarb using voodoo magic.</p>
","80214","","80214","","2020-10-17 11:55:02","2020-10-17 11:55:02","","","","4","","","","CC BY-SA 4.0"
"213608","2","","205252","2020-10-15 16:53:13","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>14</s></sup> 10 bytes</h1>
<pre><code>£ḣ∞0OfΛ¬gḋ
</code></pre>
<p><a href=""https://tio.run/##AR8A4P9odXNr///Co@G4o@KInjBPZs6bwqxn4biL////NDk1"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-4 bytes from Zgarb.</p>
","80214","","80214","","2020-10-17 10:59:43","2020-10-17 10:59:43","","","","2","","","","CC BY-SA 4.0"
"213645","1","","","2020-10-16 05:29:34","","22","1641","<h1>Intro</h1>
<p>Find the result of number cannibalism.</p>
<p>Why was 6 scared of 7? Becase 7 <code>8</code> 9.</p>
<p>Your program will have to find the result of applying the <code>8</code> operation(defined below) on a number, repeatedly.</p>
<p><a href=""https://codegolf.stackexchange.com/questions/66603/why-was-6-afraid-of-7"">Related</a>, <a href=""https://codegolf.meta.stackexchange.com/a/19390/80214"">Sandbox</a></p>
<h1>Challenge</h1>
<p>Your input will be a single positive integer, n.</p>
<p>You need to find each <code>8</code> in the integer, and substitute it for <code>+</code> or <code>-</code> based on the following conditions.</p>
<ul>
<li>remove all <code>8</code>s at the beginning or end of the string.</li>
<li>If there are multiple <code>8</code>s, then collapse them into a single <code>8</code>.</li>
<li><span class=""math-container"">\$a\$</span> and <span class=""math-container"">\$b\$</span> are the chunks to the left and right of the <code>8</code> respectively. Since <code>8</code> is an operator, the numbers are delimited by <code>8</code>.</li>
<li>If <span class=""math-container"">\$ a ≥ b,\$</span> <code>8</code> becomes <code>+</code>.</li>
<li>else, it becomes <code>-</code>.</li>
</ul>
<p>Then evaluate the expression from left to right, and take the absolute value.</p>
<p>If the result has any <code>8</code>s in it, the repeat the above steps again till there are none.</p>
<p>For example, <code>12384568789</code> becomes:</p>
<pre><code>123 456 7 9
123 &lt; 456: 123 - 456 7 9
456 ≥ 7  : 123 - 456 + 7 9
7 &lt; 9    : 123 - 456 + 7 - 9 = -335
= abs(-335)
= 335
</code></pre>
<p>Hence 335 is the final answer.</p>
<h1>Example Input and Output</h1>
<pre><code>789 → 2
180 → 1
42312348 → 4231234
2389687 → 66
12384568789 → 335
13749547874394873104972349 → 7309154
808 → 0
7800482 → 13
14458883442 → 1997
88888 → indeterminate
388182 → 2
08182 → 3
</code></pre>
<p>Here are the testcases as an array:</p>
<p><code>[789,180,42312348,2389687,12384568789,13749547874394873104972349,808,7800482,14458883442,88888]</code></p>
<h2>Scoring Criteria</h2>
<p>This is <a href=""/questions/tagged/code-golf"" class=""post-tag"" title=""show questions tagged &#39;code-golf&#39;"" rel=""tag"">code-golf</a>. Shortest answer in each language wins.</p>
","80214","","80214","","2020-11-14 16:11:30","2020-11-14 16:11:30","Eating Persistence","<code-golf><number>","18","10","2","","","CC BY-SA 4.0"
"213649","2","","213612","2020-10-16 06:28:29","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 79 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Çφ`¶J╙╜úº╢ßJ╒♂é↔1S├p$@¢☺&lt;ME⌡┐α∟0/δ-/⌂╙Γâ∙╗-ó≡æñ↕S-α.Wì*°yf╞≈♣⌐Y/)\┬░╛₧níë╛♂9=%▀
</code></pre>
<p><a href=""https://staxlang.xyz/#p=80ed60144ad3bda3a7b6e14ad50b821d3153c37024409b013c4d45f5bfe01c302feb2d2f7fd3e283f9bb2da2f091a412532de02e578d2af87966c6f705a9592f295cc2b0be9e6ea189be0b393d25df&amp;i=How+do+I+make+coffee%3F"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Can probably be shortened by a lot. I'm not too familiar with string manipulation in stax yet.</p>
<p>Since stax does not have a random number function, this program uses the length of the string as <strong>n</strong>.</p>
","80214","","","","","2020-10-16 06:28:29","","","","0","","","","CC BY-SA 4.0"
"213656","2","","115436","2020-10-16 09:52:06","","1","","<h1><a href=""https://github.com/ETHproductions/japt"" rel=""nofollow noreferrer"">Japt</a>, 9 <a href=""https://en.wikipedia.org/wiki/ISO/IEC_8859-1"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ð864e7+Kj
</code></pre>
<p><a href=""https://petershaggynoble.github.io/Japt-Interpreter/?v=1.4.6&amp;code=0Dg2NGU3K0tq"" rel=""nofollow noreferrer"">Test it</a></p>
<p>My first Japt answer!</p>
<p>A port of the existing JS answer.</p>
","80214","","","","","2020-10-16 09:52:06","","","","0","","","","CC BY-SA 4.0"
"213670","2","","213664","2020-10-16 15:07:14","","3","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a> + <code>i18n</code> + <code>numbers_and_words</code>, <sup><s>96 93</s></sup> 91 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>require'i18n'
require'numbers_and_words'
I18n.with_locale(:pt){p gets.to_i.to_words[0]==?d}
</code></pre>
<p><a href=""https://repl.it/join/wdtvwtgv-razetime"" rel=""nofollow noreferrer"">Try it on repl.it!</a></p>
<p>It's probably longer than a simple pattern matching solution, but I wanted to try it anyway.</p>
<p>-3 bytes from ovs.</p>
<p>-2 bytes from Dingus.</p>
","80214","","80214","","2021-02-19 09:17:19","2021-02-19 09:17:19","","","","1","","","","CC BY-SA 4.0"
"213671","2","","213664","2020-10-16 15:19:53","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>41 <sub>33</sub></s></sup> 42 bytes</h1>
<pre><code>§|§&amp;ȯ€B19 26441084r↑2o₁L§&amp;o='2←ȯ¬₁Ls
€d258
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9DymkPL1U6sf9S0xsnQUsHIzMTE0MDCpOhR20Sj/EdNjT5A2XxbdaNHbRNOrD@0BiRSzAVUnGJkavH//39DIwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-8 bytes from Dominic Van Essen.</p>
<p>+9 bytes after corrections.</p>
","80214","","80214","","2020-10-16 15:35:26","2020-10-16 15:35:26","","","","4","","","","CC BY-SA 4.0"
"213689","2","","119430","2020-10-16 17:13:30","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 11 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ñ┌½♠å←ⁿ╨║x╦
</code></pre>
<p><a href=""https://staxlang.xyz/#p=a4daab06861bfcd0ba78cb&amp;i=10"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-10-16 17:13:30","","","","0","","","","CC BY-SA 4.0"
"213729","2","","169724","2020-10-17 03:31:54","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>5</sup></s> 4 bytes</h1>
<pre><code>¬F≠ḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9Aat0edCx7u6P7//7@ZmRkA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Jo King.</p>
","80214","","80214","","2020-10-17 05:51:21","2020-10-17 05:51:21","","","","0","","","","CC BY-SA 4.0"
"213733","2","","200363","2020-10-17 06:58:00","","2","","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 4 bytes</h1>
<pre><code>8+ĳ∖
</code></pre>
<p>the easy solution.</p>
<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a> <code>Ms</code>, 6 bytes</h1>
<pre><code>ƛSt\2=
</code></pre>
<p>-2 bytes from Lyxal.</p>
<h2>Explanation</h2>
<pre><code>ƛSt\2=
ƛ      map range 1..n to the following:
 S     convert to string
  t    get last character 
   \2= is it equal to '2'?
       sum the results(s flag)
</code></pre>
","80214","","80214","","2020-10-17 07:03:52","2020-10-17 07:03:52","","","","3","","","","CC BY-SA 4.0"
"213744","2","","53417","2020-10-17 13:45:01","","0","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 31 bytes</h1>
<pre><code>Ｂ⁷¦⁷Ｍ±⁴¦²Ｂ⁷¦⁷Ｍ²¦²Ｂ⁷¦⁷Ｍ²→|Ｍ³¦²¦¹
</code></pre>
<p><a href=""https://tio.run/##S85ILErOT8z5/98pv0LDXMdck8s3vyxVQ9dEx0iTC1XMCJuQVVBmekaJJldAUWZeiYZSjRJUxhikGCJoqPn//3/dnDIA"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
<p>Link is to verbose version of code.</p>
<p>It's pretty fun to have a box function.</p>
<p>Basically draws three boxes at the required location, and patches the required places.</p>
","80214","","","","","2020-10-17 13:45:01","","","","0","","","","CC BY-SA 4.0"
"213748","2","","129965","2020-10-17 15:58:55","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 13 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╨E⌡u╥Diüaë¬~▼
</code></pre>
<p><a href=""https://staxlang.xyz/#p=d045f575d24469816189aa7e1f&amp;i=%5B3,2,5%5D%0A7"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>If I can find a way to read in the array and the number as is instead of evaluating them from string, this program will be shorter.</p>
","80214","","","","","2020-10-17 15:58:55","","","","0","","","","CC BY-SA 4.0"
"213749","2","","69060","2020-10-17 17:11:39","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>ḟ§&amp;o=1ṁ\o=¹ΣṖḣ
</code></pre>
<p><a href=""https://tio.run/##ASQA2/9odXNr///huJ/CpyZvPTHhuYFcbz3Cuc6j4bmW4bij////NTA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Husk's usage of fractions is really beneficial for this challenge.</p>
<p>Just like all the answers except Cameron's, is very slow for larger test cases.</p>
","80214","","","","","2020-10-17 17:11:39","","","","0","","","","CC BY-SA 4.0"
"213777","2","","102563","2020-10-18 05:15:36","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>m€↔O¹
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/dR05pHbVP8D@38//9/tJmOkY6ljjmQNNMx1TEGQpNYAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>m€↔O¹
   O¹ sort the input in ascending order
  ↔   reverse it
m   ¹ map the input to:
 €    it's index in that list
</code></pre>
","80214","","","","","2020-10-18 05:15:36","","","","0","","","","CC BY-SA 4.0"
"213780","2","","144868","2020-10-18 07:15:51","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>T' m?SRȯ-64ca;√
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P0RdIdc@OOjEel0zk@RE60cds/7//x9QlJ9elJibm5mXrhBQWlWVk1qsoKbgnJ@SquCen5OmCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>repeat each character, then transpose-pad.</p>
","80214","","","","","2020-10-18 07:15:51","","","","0","","","","CC BY-SA 4.0"
"213782","2","","62095","2020-10-18 08:48:10","","0","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 72 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>G←P5.G
d←0
P5.draw←{G.bg¯1
d+←○÷1800
G.stroke←'800080'
G.pt 50+38×2 1○d}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pSszMTfz/3/1R24QAUz13rhQgw4ALyEwpSiwHsqvd9ZLSD6035ErRBvIeTe8@vN3QwsCAy12vuKQoPzsVKKgO5BtYGKgDxQpKFEwNtI0tDk83UjAEKk6p/f8fAA"" rel=""nofollow noreferrer"" title=""APL (dzaima/APL) – Try It Online"">Try it online!</a></p>
<p>A port of the Processing solution with some APL tweaks.</p>
","80214","","","","","2020-10-18 08:48:10","","","","0","","","","CC BY-SA 4.0"
"213786","2","","122466","2020-10-18 11:55:46","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>12</s></sup> 11 bytes</h1>
<pre><code>fo=Σ¹ṁΣüOπ2
</code></pre>
<p><a href=""https://tio.run/##AR0A4v9odXNr//9mbz3Oo8K54bmBzqPDvE/PgDL///8yMw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p><code>Σ</code> has a mode where it returns the n<sup>th</sup> triangular number, which is very useful here.</p>
<p>-1 byte from Dominic van Essen.</p>
<h2>Explanation</h2>
<pre><code>fo=Σ¹ṁΣüOπ2
         π2  cartesian power 2 for range 1..n(all possible pairs)
       üO    uniquify, ignoring ordering
fo           filter by the following 2 functions:
     ṁΣ      triangular numbers of the pair summed
  =          equals
   Σ¹        nth triangular number?
</code></pre>
","80214","","80214","","2020-10-18 13:30:43","2020-10-18 13:30:43","","","","2","","","","CC BY-SA 4.0"
"213798","2","","6215","2020-10-18 16:37:36","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>ḟo=⁰ΣṖİ\
</code></pre>
<p><a href=""https://tio.run/##AR4A4f9odXNr///huJ9vPeKBsM6j4bmWxLBc////NDMvNDg"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Larger denominators take very long, as we are calculating the powerset of an infinite list.</p>
<p>Takes input as a fraction <code>a/b</code>.</p>
<h2>Explanation</h2>
<pre><code>ḟo=⁰ΣṖİ\
      İ\ Infinite list [1,1/2,1/3...]
     Ṗ   Powerset
ḟo       first sublist which satisfies:
    Σ    sum
  =⁰     equals input?
</code></pre>
","80214","","","","","2020-10-18 16:37:36","","","","0","","","","CC BY-SA 4.0"
"213825","2","","187152","2020-10-19 11:24:50","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>€mdPfIṁdṘN
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HTmtyUgDTPhzsbUx7unOH3////aENzHRMdg9j/hiYm5gA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Similar to the Japt answer.</p>
<p>Takes <code>[bronze,silver,gold]</code> as first argument, <code>rep</code> as second argument.</p>
<h2>Explanation</h2>
<pre><code>€mdPfIṁdṘN  
         N natural numbers
        Ṙ  repeat medals that many times
      ṁd   get all their digits as a single array
    fI     filter out zeroes
   P       permutations
 md        mapped to their base-10 numbers
€          is rep in the list?
</code></pre>
","80214","","","","","2020-10-19 11:24:50","","","","0","","","","CC BY-SA 4.0"
"213830","2","","201094","2020-10-19 15:12:45","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 18 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>+.×⍨1,2+/⊢(-!⊢)⍳,⊢
</code></pre>
<p><a href=""https://tio.run/##DY67SoNREIRfZeyUPzF7OZc9tY2pBOMLBCQ2gdhaC4EETtBCrLVKIVjoE8Q32Rf53WZmd/mWmeXjenr/tFxvHkY/vM1vfPtC43D59@79yBMZZr7/PJ@ehV54/5mEj6tgvB98/@z9y/vv6Vt9@xrfi9ur0Lvr@WIUFHCCJliCkCGzgaUVqOQ4ckxClQhZEiWwSksC1WrVYIU4NuEmjQQ5N@MUUFKyIKClMLVKaForaTb47gORHc1WpyN4iK5C/w"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Bubbler's port of the Jelly solution(-14 bytes!).</p>
<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>35</sup></s> 32 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{+/(×⍨((⍵-1+⊢)!1+⊢)+⊢!⍨⍵-⊢)⍳1+⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkG/6u19TUOT3/Uu0JD41HvVl1D7UddizQVIRSIUARKgSRA/Ee9m4ESvVtr/6cB9T7q7XvU1fyod82j3i2H1hs/apsINDU4yBlIhnh4Bv9PUzAFAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkG/6u19TUOT3/Uu0JD41HvVl1D7UddizQVIRSIUARKgSRA/Ee9m4ESvVtr/6cB9T7q7XvU1fyod82j3i2H1hs/apsINDU4yBlIhnh4Bv9/1Lsq7RBQ72YjAwA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Verify all test cases</a></p>
<p>Uses the formula from the Bash answer(which is very, very cool, go upvote it!).</p>
<p>Requires <code>⎕IO←0</code> for 0-indexing.</p>
<p>-3 bytes from ovs (Converted inner dfn to train, removing assignment to n).</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{+/{×⍨((n-⍵+1)!⍵+1)+(n-⍵)!⍵}⍳1+n←⍵}
                               n←⍵  store input in n
                            ⍳1+     range 0..n
   {                       }        apply the following to it's elements k:
                    (n-⍵)!⍵         k C (n-k)
                   +                plus 
      ((n-⍵+1)!⍵+1)                 (k+1) C (n-(k+1))
    ×⍨                              squared
 +/                                 sum the resulting array
</code></pre>
<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 42 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{+/(≢=2×+/)¨{⍵/⍨{⍱/0 3∊⍵}¨3+/¨⍵}↓⍉⊤⍳2*2×⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qp/@jtgkG/6u19TUedS6yNTo8XVtf89CK6ke9W/Uf9YLojfoGCsaPOrqAIrWHVhhr6x9aAWI@apv8qLfzUdeSR72bjbSA@kCC/9OApj3q7XvU1fyod82j3i2H1hs/apsItCc4yBlIhnh4Bv9PUzAFAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Brute force method, which is much slower and longer.</p>
","80214","","80214","","2020-10-21 06:07:37","2020-10-21 06:07:37","","","","7","","","","CC BY-SA 4.0"
"213831","2","","156013","2020-10-19 15:27:45","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>wm?↔Io&gt;5Lw
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/vzzX/lHbFM98O1Of8v///3ukViqkpebk5JcrJOenpCqk5@ekpRYVAwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-19 15:27:45","","","","0","","","","CC BY-SA 4.0"
"213865","2","","75081","2020-10-20 05:58:52","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>ωöΠmF`^C2d
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//3zn4W3nFuS6JcQ5G6X8///f0MjYBAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>ωöΠmF`^C2d
ωö         apply the following functions till a fixed point is reached:
         d get base-10 digits
       C2  split into groups of two
   mF`^    map each pair to power
  Π        multiply all the powers.
</code></pre>
","80214","","","","","2020-10-20 05:58:52","","","","0","","","","CC BY-SA 4.0"
"213872","2","","148865","2020-10-20 08:07:41","","0","","<h1><a href=""http://sagemath.org"" rel=""nofollow noreferrer"">SageMath</a>, 39 bytes</h1>

<pre class=""lang-python prettyprint-override""><code>lambda z:[lambert_w(l,z)for l in[0,-1]]
</code></pre>
<p><a href=""https://sagecell.sagemath.org/?z=eJxLs43hyknMTUpJVKiyigaxUotK4ss1cnSqNNPyixRyFDLzog10dA1jY7m40jR0DfQMNQHM-Q_a&amp;lang=sage&amp;interacts=eJyLjgUAARUAuQ=="" rel=""nofollow noreferrer"">Try it on SageCell!</a></p>
","80214","","","","","2020-10-20 08:07:41","","","","0","","","","CC BY-SA 4.0"
"213878","2","","85084","2020-10-20 09:51:48","","1","","<h1><a href=""https://github.com/ETHproductions/japt"" rel=""nofollow noreferrer"">Japt</a>, <sup><s>27 23 19</s></sup>  15 <a href=""https://en.wikipedia.org/wiki/ISO/IEC_8859-1"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Kj z86400 s t3n
</code></pre>
<p><a href=""https://petershaggynoble.github.io/Japt-Interpreter/?v=1.4.6&amp;code=S2ogejg2NDAwIHMgdDNu"" rel=""nofollow noreferrer"">Test it</a></p>
<p>Javascript port.</p>
<p>I hope I've done it correctly.</p>
<p>-4 bytes from Shaggy.</p>
<p>-4 more bytes from Shaggy.</p>
<p>-4 more more bytes from Shaggy.</p>
","80214","","80214","","2020-10-20 15:54:17","2020-10-20 15:54:17","","","","10","","","","CC BY-SA 4.0"
"213895","2","","85590","2020-10-20 15:43:59","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>€ṁdİpd
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HTmoc7G1OObChI@f//v7GhCQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Prime number infinite list babyyyyy</p>
","80214","","","","","2020-10-20 15:43:59","","","","2","","","","CC BY-SA 4.0"
"213896","2","","90119","2020-10-20 16:01:49","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>21</sup></s> 20 bytes</h1>
<pre><code>f₁N
=⁰dΣf←Ṡzem#d⁰ŀ10
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P@1RU6Mfl@2jxg0p5xanPWqb8HDngqrUXOUUoMjRBkOD////GxoYGRobGRkBAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Not sure if it will complete in one day, but it does a straightforward test and filters the infinite list of natural numbers by it. No hardcoding.</p>
<p>Theoretically, it will definitely print all autobiographical numbers, and proceed  to check till the heat death of the universe.</p>
<p>-1 byte after correcting the algorithm.</p>
","80214","","80214","","2020-10-21 02:25:37","2020-10-21 02:25:37","","","","8","","","","CC BY-SA 4.0"
"213918","2","","208982","2020-10-21 07:04:17","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>§=T†_
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9By25BHDQvi////Hx1toGOgYxirA6YNgLSuIZgRCwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-21 07:04:17","","","","0","","","","CC BY-SA 4.0"
"213919","2","","208982","2020-10-21 08:24:48","","0","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 3 bytes</h1>
<pre><code>N⁼Z
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8/9/vUeOeqP///0dHG@gY6BjG6oBpAyCtawhmxAIA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>Posting before caird coinheringaahing finds this question.</p>
","80214","","","","","2020-10-21 08:24:48","","","","0","","","","CC BY-SA 4.0"
"213922","2","","213899","2020-10-21 09:46:44","","1","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a> <code>-rmatrix</code>, <sup><s>23</s></sup> 19 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a{Matrix[*a].inv}
</code></pre>
<p><a href=""https://tio.run/##KypNqvyfZvtf1y6x2jexpCizIlorMVYvM6@s9n@BQlp0dLSCiY6usY6CQaxOtC6Qaa6jYAZkKpjqKICZsbH//@UXlGTm5xX/1y3KBRsBAA"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
<p>Returns the result as a Ruby matrix object.</p>
<p>-4 bytes from Dingus.</p>
","80214","","80214","","2020-10-21 12:54:50","2020-10-21 12:54:50","","","","1","","","","CC BY-SA 4.0"
"213923","2","","192707","2020-10-21 09:55:19","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>fȯ¦⁰upŀ²
</code></pre>
<p><a href=""https://tio.run/##ASEA3v9odXNr//9myK/CpuKBsHVwxYDCsv///zE1/1syLDUsN10"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-10-21 11:03:41","2020-10-21 11:03:41","","","","0","","","","CC BY-SA 4.0"
"213926","2","","130158","2020-10-21 12:50:04","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>15</sup></s> 12 bytes</h1>
<pre><code>!!¡S`JẊ+d166
</code></pre>
<p><a href=""https://tio.run/##yygtzv6fm/CoqdH44Y7FZv8VFQ8tDE7werirSzvF0Mzs/38A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-3 bytes from Dominic Van Essen.</p>
<p>Same method as the MATL answer, except it uses an infinite list of rows of Clark's triangle.</p>
","80214","","80214","","2020-10-22 12:43:45","2020-10-22 12:43:45","","","","1","","","","CC BY-SA 4.0"
"213959","2","","119075","2020-10-22 16:18:28","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>F&lt;mΣ½
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/qKkx5b@bTe65xYf2/v//39DI2MTUzNwCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Input as an array of integers.</p>
","80214","","","","","2020-10-22 16:18:28","","","","0","","","","CC BY-SA 4.0"
"214000","2","","209665","2020-10-23 08:15:38","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>!foṗS%ȯ↔↔ΠN
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XzEt/@HO6cGqJ9Y/apsCROcW@P3//98IAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>!foṗS%ȯ↔↔ΠN
 f        N filter list of natural numbers by:
         Π  take factorial
       ↔↔   reverse twice, remove trailing zeros
     S%     mod itself
    ṗ       is prime?
!           get element at index n
</code></pre>
","80214","","","","","2020-10-23 08:15:38","","","","0","","","","CC BY-SA 4.0"
"214002","2","","185102","2020-10-23 08:27:58","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>!fȯS=uṁdḊN
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XzHtxPpg29KHOxtTHu7o8vv//7@hAQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same method as Jelly.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 19 bytes</h1>
<pre><code>!f(Λo¬Fnfo¬Eπ2mdḊ)N
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XzFN49zs/ENr3PLSgKTr@Qaj3JSHO7o0/f7//29oAAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>The more manual cehcker.</p>
","80214","","","","","2020-10-23 08:27:58","","","","0","","","","CC BY-SA 4.0"
"214013","2","","63064","2020-10-23 11:46:47","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>m(cḋm¬↔ḋc
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P1cj@eGO7txDax61TQEykv///@@RmpOTr6MQnl@Uk6IIAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-23 11:46:47","","","","0","","","","CC BY-SA 4.0"
"214014","2","","62752","2020-10-23 11:49:06","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>6</s></sup> 4 bytes</h1>
<pre><code>→¤nḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbpENL8h7uWPz///@U1ILEopLc1LwSKLO0KBUA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Dominic Van essen.</p>
","80214","","80214","","2020-10-23 17:20:11","2020-10-23 17:20:11","","","","1","","","","CC BY-SA 4.0"
"214015","2","","63999","2020-10-23 11:58:53","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>¬ωoσḋ2øḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9Ca853555sf7ug2OrwDSP7//9/QEAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##yygtzv6f9qip8eGOxYYGBv8PrTnfmX@@@eGObqPDO4Dk//8A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify first 100 results</a></p>
","80214","","","","","2020-10-23 11:58:53","","","","0","","","","CC BY-SA 4.0"
"214016","2","","213990","2020-10-23 12:41:44","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>15 14 13</s></sup> 12 bytes</h1>
<pre><code>#ȯΛ⌊G*m+.πḋ2
</code></pre>
<p><a href=""https://tio.run/##ASQA2/9odXNr/23igoHhuKMxMP8jyK/Om@KMikcqbSsuz4DhuIsy//8"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Dominic van Essen.</p>
<p>-1 more byte from Dominic van Essen.</p>
<p>-1 more more byte from Dominic van Essen(<a href=""https://codegolf.stackexchange.com/a/214009/80214"">Or is it?</a>).</p>
<p>Same method as Bubbler's answer.</p>
","80214","","80214","","2020-10-23 15:35:30","2020-10-23 15:35:30","","","","5","","","","CC BY-SA 4.0"
"214024","2","","64639","2020-10-23 15:34:31","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 38 bytes</h1>
<pre><code>↓2↓≠←⁰¶mJ' ¶¨qw²yuiop₄sdfghjkl¶zxcvbnm
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbZCMgftS54FHbhEeNGw5ty/VSVzi07dCKwvJDmypLM/MLHjW1FKekpWdkZecc2lZVkVyWlJf7////dAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-10-23 17:21:10","2020-10-23 17:21:10","","","","2","","","","CC BY-SA 4.0"
"214061","2","","214044","2020-10-24 04:35:55","","5","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>20</s></sup> 17 bytes</h1>
<pre><code>§:oa←tm!¨Ḃ+q²&quot;ṗen
</code></pre>
<p><a href=""https://tio.run/##ASoA1f9odXNr///CpzpvYeKGkHRtIcKo4biCK3HCsiLhuZdlbv///1sxLDEsOV0"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>input as a list of digits.</p>
<p>There's probably a better way to do the titlecasing part.</p>
<p>-3 bytes from Dominic van Essen.</p>
<h2>Explanation (old)</h2>
<pre><code>§:oa←tmo!¨nḂ+q²&quot;ṗe¨→
                   → increment input to accomodate 0-indexing
      mo             map each digit to
        !¨nḂ+q²&quot;ṗe¨  it's index value in the compressed string
§:                   join the
  oa←                first letter uppercased
     t               with it's tail
</code></pre>
","80214","","80214","","2020-10-24 08:25:44","2020-10-24 08:25:44","","","","4","","","","CC BY-SA 4.0"
"214069","2","","99996","2020-10-24 11:00:17","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 3 bytes</h1>
<pre><code>uOP
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/v9Q/4P///0mlVVUA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>No Unicode!</p>
","80214","","","","","2020-10-24 11:00:17","","","","0","","","","CC BY-SA 4.0"
"214074","2","","68685","2020-10-24 12:32:46","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>:'1Oṁs…2
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/30rd0P/hzsbiRw3LjP7//29oAAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Corrected my previous answer.</p>
","80214","","80214","","2020-10-27 13:57:41","2020-10-27 13:57:41","","","","0","","","","CC BY-SA 4.0"
"214208","2","","84735","2020-10-27 06:45:14","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>13</s></sup> 11 bytes</h1>
<pre><code>§ṁ€ȯm*5tQda
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9DyhzsbHzWtObE@V8u0JDAl8f///7qGIAAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>similar to 05AB1E.</p>
<p>-2 bytes from Dominic Van Essen and Jo King.</p>
","80214","","80214","","2020-10-27 09:21:38","2020-10-27 09:21:38","","","","2","","","","CC BY-SA 4.0"
"214210","2","","175027","2020-10-27 09:36:46","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>▲fo=⁰ΣQ²
</code></pre>
<p><a href=""https://tio.run/##ASQA2/9odXNr///ilrJmbz3igbDOo1HCsv///1stMiwtNCwtMl3/LTY"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Brachylog is <strong>insane.</strong></p>
","80214","","","","","2020-10-27 09:36:46","","","","0","","","","CC BY-SA 4.0"
"214212","2","","68504","2020-10-27 09:48:47","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 22 bytes</h1>
<pre><code>σ…'A'Z…'Z'Aσ…'a'z…'z'a
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//3zzo4Zl6o7qUSAqSt0Rwk9UrwJRVeqJ////T0xKTklNS8/IzMrOyc3LLygsKi4pLSuvqKwCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-27 09:48:47","","","","0","","","","CC BY-SA 4.0"
"214213","2","","126935","2020-10-27 09:53:38","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 17 bytes</h1>
<pre><code>ṁS↑ṁ#¨aeıuAEIOU¨w
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxuBHbROBlPKhFYmpRzaWOrp6@oceWlH@//9/j9ScnHyF8PyinBQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Even without a builtin, does pretty well.</p>
","80214","","","","","2020-10-27 09:53:38","","","","0","","","","CC BY-SA 4.0"
"214243","2","","18592","2020-10-27 16:37:08","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>→fṗmrQ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbpLSHO6fnFgX@//9fydjU3FAJAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-27 16:37:08","","","","0","","","","CC BY-SA 4.0"
"214274","2","","126336","2020-10-28 04:52:35","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 14 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>2÷⍨1⊥2-/⍤×∘⌽/⊢
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/3@jw9ke9KwwfdS010tV/1Lvk8PRHHTMe9ezVf9S16H/ao7YJj3r7HnU1P@pd86h3y6H1xo/aJj7qmxoc5AwkQzw8g/@naZgomGgqKGgYKBiCqEPrjRRMIQwzBQMIw1Dh0HqwGlMgwwjEAOsBAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Same formula as in Arnauld's answer.</p>
<p>Takes input as a list of points, sorted in counterclockwise order.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>2÷⍨1⊥2-/⍤×∘⌽/⊢
             ⊢ take the input (list of pts)
     2      /  reduce overlapping pairs by the following function:
         ×       multiply the first
          ∘⌽     with the second reversed
      -/⍤        reduce the multipled pair by subraction
   1⊥          sum the resultant array (using decoding)
2÷⍨            halve it
</code></pre>
","80214","","","","","2020-10-28 04:52:35","","","","0","","","","CC BY-SA 4.0"
"214300","2","","6994","2020-10-28 16:47:25","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>!fȯ=2LḊ¡oΣ↑_2ḋ3
</code></pre>
<p><a href=""https://tio.run/##ASAA3/9odXNr//8hZsivPTJM4biKwqFvzqPihpFfMuG4izP//w"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-28 16:47:25","","","","0","","","","CC BY-SA 4.0"
"214329","2","","214301","2020-10-29 03:43:48","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>%2`%25Πmc
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X9UoQdXI9NyC3OT////75Jel6oIIAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same method as Jonathan Allan's answer.</p>
","80214","","","","","2020-10-29 03:43:48","","","","0","","","","CC BY-SA 4.0"
"214330","2","","162637","2020-10-29 06:03:13","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>!z*:1İ_¡ȯ↔S:→∫;1
</code></pre>
<p><a href=""https://tio.run/##ASQA2/9odXNr//8heio6McSwX8KhyK/ihpRTOuKGkuKIqzsx////MTM"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>There may be a better way for arriving at the rows in the correct order. To get the correct output, this program reverses every other row.</p>
<h2>Explanation</h2>
<pre><code>!z*:1İ_¡ȯ↔S:→∫;1
              ;1 array [1]
       ¡ȯ        apply the following functions repeatedly on it, collecting results:
             ∫   cumulative sum
          S:→    repeat the last element
         ↔       reverse it
                 this generates all the required rows
 z*              zip multiply that with:
   :1İ_          [1,-1,1,-1,1,-1,...]
                 which reverses every other row
!                Get row at input index
</code></pre>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>?I↔%2¹!¡ȯ↔S:→∫;1
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/397zUdsUVaNDOxUPLTyxHsgOtnrUNulRx2prw////xsaAwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Uses a ternary instead.</p>
","80214","","","","","2020-10-29 06:03:13","","","","0","","","","CC BY-SA 4.0"
"214331","2","","162637","2020-10-29 06:17:50","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>22</s></sup> 18 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⊖⍣⍵{⌽+\⍵,0}⍣⍵,1} 
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v/pR17RHvYsf9W6tftSzVzsGyNAxqIWI6BjWKvxPe9Q24VFv36Ou5ke9ax71bjm03vhR28RHfVODg5yBZIiHZ/D/NAVTAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Same method as my Husk answer.</p>
<p>-4 bytes from coltim.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⊖⍣⍵{⌽(⊢,⊢/)+\⍵}⍣⍵,1} ⍵ ← input(n)
                  ,1  convert 1 to an array [1]
    {          }⍣⍵    apply the following n times:
            +\⍵       cumulative sum
      (⊢,⊢/)          duplicate the last element
     ⌽                reverse
 ⊖⍣⍵                  then reverse n times
</code></pre>
","80214","","80214","","2020-11-01 02:55:16","2020-11-01 02:55:16","","","","1","","","","CC BY-SA 4.0"
"214332","2","","8815","2020-10-29 06:59:38","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <s><sup>45</s></sup> 36 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>10↑⌷⍨∘⊂∘⍋∘⌽⍨{⍺':',≢⍵}⌸∊⎕(∊⊆⊣)⍥⎕C⎕D,⎕A
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT/9/eNqjtgnVGo96twKRwqPeXZpADEQIka2atVyPOtqcgeosDC0f9WwD8trT/hsaPGqb@Khn@6PeFY86ZjzqagKRvd0gsmcvULAaaIi6lbrOo85FQDNqH/XseNTR9ahvqgaI6mp71LVY8/A0BbDBfVNddICE43@gwf/TFLjUPVJzcvLVAQ"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A full program which accepts a string as input. tio link uses polyfills for <code>⍥</code> and <code>⎕C</code>.</p>
<p>Shortened and tested with help from Bubbler.</p>
<p>-12 bytes from Adám.</p>
<p><s>Doesn't work on tio due to some problem with <code>⎕C</code>.</s>(Now works, thanks to Adám's help)</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>10↑⌷⍨∘⊂∘⍋∘⌽⍨{⍺':',≢⍵}⌸∊⎕(∊⊆⊣)⍥⎕C⎕D,⎕A 
                             ⍥⎕C      lowercase the following:
                                ⎕D,⎕A string of the alphabet and digits
                       ⎕              and the input
                        (∊⊆⊣)         filter out nonalphanumerics
                      ∊               flatten the string
            {⍺':',≢⍵}⌸                create a frequency table for each letter key
   ⌷⍨∘⊂∘⍋∘⌽⍨                          sort the table based on the last row
10↑                                   take the first 10 elements
</code></pre>
","80214","","80214","","2020-10-30 05:41:28","2020-10-30 05:41:28","","","","3","","","","CC BY-SA 4.0"
"214335","2","","15999","2020-10-29 08:49:13","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>22</s></sup> 20 bytes</h1>
<pre><code>ṁȯeøJ'+msufo=¹ΣṖt↑İf
</code></pre>
<p><a href=""https://tio.run/##ASkA1v9odXNr///huYHIr2XDuEonK21zdWZvPcK5zqPhuZZ04oaRxLBm////NQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-2 bytes with an empty list trick.</p>
<h2>Explanation</h2>
<pre><code>moJ'+msufo=¹ΣṖt↑İf
               ↑İf Take input number of fibonacci numbers
              t    remove first 1
             Ṗ     get it's powerset
        fo         filter the sublists by the following:
          =¹Σ      sum equals input?
       u           uniquify it
mo                 map each sublist to
     ms            it's elements as strings
  J'+              Joined by '+'
</code></pre>
","80214","","80214","","2020-11-10 17:24:13","2020-11-10 17:24:13","","","","3","","","","CC BY-SA 4.0"
"214338","2","","200950","2020-10-29 10:13:54","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>ΘẊ+mṠ-o⌊√ḣ
</code></pre>
<p><a href=""https://tio.run/##AR8A4P9odXNr///OmOG6iitt4bmgLW/ijIriiJrhuKP///81"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-29 10:13:54","","","","0","","","","CC BY-SA 4.0"
"214341","2","","1791","2020-10-29 10:34:17","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 55 bytes</h1>
<pre><code>mλ:'F+s¹+&quot; = &quot;σ&quot;1]&quot;&quot;1/1}&quot;σ&quot;[0&quot;&quot;{0/1&quot;sOutfεmF/π2ŀ→)fImi¶
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/fcbit1N@3iQzu1lRRsFZTONysZxiopGeob1oLY0QZKStUG@oZKxf6lJWnntua66Z9vMDra8KhtkmaaZ27moW3///834TLmMuQyAgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>It was interesting messing with strings in Husk.</p>
<p>This gives the exact required output for the given test case.</p>
<p>There's a strange husk-ism in the <code>mi¶</code> function that gives intermediate 0's in the output. Hence, those are filtered out. <a href=""https://chat.stackexchange.com/transcript/message/55983590#55983590"">Here's an explanation from Zgarb.</a></p>
<h2>Explanation</h2>
<pre><code>mλ:'F+s¹+&quot; = &quot;σ&quot;1]&quot;&quot;1/1}&quot;σ&quot;[0&quot;&quot;{0/1&quot;sOutfεmF/π2ŀ→)fImi¶
                                                      ¶ split input on newlines
                                                    mi  map to integers
                                                  fI    filter out zeroes
mλ                                               )      map each number through this function:
                                               ŀ→       range (0..n)
                                             π2         all possible pairs
                                          mF/           map each to it's fraction
                                        fε              keep elements ≤ 1
                                       t                remove first value (Any)
                                     Ou                 uniquify, sort ascending
                                    s                   convert to string
                         σ&quot;[0&quot;&quot;{0/1&quot;                    change 0 → 0/1
              σ&quot;1]&quot;&quot;1/1}&quot;                               change 1 → 1/1
        +&quot; = &quot;                                          add an equal sign
  :'F+s¹                                                prepend &quot;F{N}&quot;
</code></pre>
","80214","","80214","","2020-10-29 15:01:46","2020-10-29 15:01:46","","","","0","","","","CC BY-SA 4.0"
"214344","2","","152085","2020-10-29 10:58:17","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>*¹D▼mo≠-.¹m□ḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv6f@6ip8eGOxf@1Du10eTRtT27@o84FunqHduY@mrYQJP7/v5EBAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Similar to the existing Jelly and APL answers.</p>
","80214","","","","","2020-10-29 10:58:17","","","","0","","","","CC BY-SA 4.0"
"214355","2","","105651","2020-10-29 13:35:18","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>ḟo`€R⁰2dİp
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@GO@fkJj5rWBD1q3GCUcmRDwf///40B"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>A bit slow due to uusing the infinite list of primes.</p>
","80214","","","","","2020-10-29 13:35:18","","","","0","","","","CC BY-SA 4.0"
"214356","2","","69707","2020-10-29 13:42:37","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>mλṁoS=↔`B¹ḣ)ḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/fc7oc7G/ODbR@1TUlwOrTz4Y7FmkD8//9/UwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>not sure if I can avoid using a lambda here.</p>
","80214","","","","","2020-10-29 13:42:37","","","","0","","","","CC BY-SA 4.0"
"214358","2","","91420","2020-10-29 14:36:33","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <s><sup>5</sup></s> 4 bytes</h1>
<pre><code>ΣẊ=p
</code></pre>
<p><a href=""https://tio.run/##yygtzv6f@6ip8eGOxUam/88tfriry7bg/38A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Dominic Van Essen.</p>
","80214","","80214","","2020-10-29 16:11:16","2020-10-29 16:11:16","","","","1","","","","CC BY-SA 4.0"
"214363","2","","89840","2020-10-29 15:33:23","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>?ö:1Ṡ+o₀LtḋΘøI
</code></pre>
<p><a href=""https://tio.run/##ASEA3v9odXNr//8/w7Y6MeG5oCtv4oKATHThuIvOmMO4Sf///zU"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Uses a simple recursive approach. (Dennis's double recursion is insane.)</p>
","80214","","","","","2020-10-29 15:33:23","","","","2","","","","CC BY-SA 4.0"
"214374","2","","68866","2020-10-29 16:37:41","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 25 bytes</h1>
<pre><code>↔mJc9†sC2↑¹fȯ¬€4d-0-13…_1
</code></pre>
<p><a href=""https://tio.run/##ATEAzv9odXNr///ihpRtSmM54oCgc0My4oaRwrlmyK/CrOKCrDRkLTAtMTPigKZfMf///zIw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-29 16:37:41","","","","0","","","","CC BY-SA 4.0"
"214378","2","","201259","2020-10-29 17:16:30","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>↑ṁ₁N
†+¹ṁŀSe→÷3
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbxIc7Gx81NfpxPWpYoH1oJ5B3tCE49VHbpMPbjf///28KAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-29 17:16:30","","","","0","","","","CC BY-SA 4.0"
"214381","2","","69156","2020-10-29 17:31:15","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>§zeW&lt;om←W&gt;`:0Θ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9DyqtRwm/zcR20Twu0SrAzOzfj//3@0gY6BjiEQGqBBQzRogBMakgANqAiB5sUCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-29 17:31:15","","","","0","","","","CC BY-SA 4.0"
"214383","2","","69127","2020-10-29 17:45:20","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 26 bytes</h1>
<pre><code>S+öm!+…'A'Zṁsŀ6mȯ→ḋ↔†o±DC5
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P1j78LZcRe1HDcvUHdWjHu5sLD7aYJZ7Yv2jtkkPd3Q/apvyqGFB/qGNLs6m////TzQIcjUAA0@v3GQ/AA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Getting the alphabets takes a lot of bytes. Otherwise, I think this qould be at par with the other languages.</p>
","80214","","","","","2020-10-29 17:45:20","","","","0","","","","CC BY-SA 4.0"
"214401","2","","69385","2020-10-30 02:38:15","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>24 19</s></sup> 17 bytes</h1>
<pre><code>mΣTΓo:↔Tmoġ€¨aeıu
</code></pre>
<p><a href=""https://tio.run/##ATQAy/9odXNr//9tzqNUzpNvOuKGlFRtb8Sh4oKswqhhZcSxdf///1sibWFzdGVyIiwicGxhbiJd"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-5 bytes from Dominic Van Essen.</p>
<p>-2 bytes using Γ.</p>
<h2>Explanation</h2>
<pre><code>mΣTΓo:↔  Tmoġ€¨aeıu
          mo             map each string to the following:
            ġ            group by
             €¨aeıu      vowel groups
         T               transpose
   Γo:                   prepend
      ↔                  the first row reversed
                         to the rest of the array
  T                      transpose back
mΣ                       concatenate into words
</code></pre>
","80214","","80214","","2021-02-16 05:48:47","2021-02-16 05:48:47","","","","2","","","","CC BY-SA 4.0"
"214403","2","","47385","2020-10-30 02:52:04","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>Λ&gt;⁰∫²
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9xsu0eNGx51rD606f///9GGOkY6xjq6Rgax/3VNAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Not sure how to remove the superscripts, but it should be possible.</p>
","80214","","","","","2020-10-30 02:52:04","","","","0","","","","CC BY-SA 4.0"
"214404","2","","182810","2020-10-30 03:08:22","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 18 bytes</h1>
<pre><code>!t¡(→S-o§e*3÷2→)ŀ2
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X7Hk0EKNR22TgnXzDy1P1TI@vN0IyNM82mD0//9/QyNjEwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Not sure why I'm unable to compose the iteration function, but I was only able to get it working with parentheses.</p>
<p>+1 byte after fixing the list.</p>
","80214","","80214","","2020-10-30 06:28:31","2020-10-30 06:28:31","","","","3","","","","CC BY-SA 4.0"
"214405","2","","183528","2020-10-30 03:14:51","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>!uṁS`…S*v1N
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X7H04c7G4IRHDcuCtcoM/f7//29oAAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Instead of creating a range, an infinite list is created and nubbed. Hence, will be be very very slow for larger <span class=""math-container"">\$n\$</span></p>
","80214","","","","","2020-10-30 03:14:51","","","","0","","","","CC BY-SA 4.0"
"214409","2","","388","2020-10-30 04:07:09","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>ΩS=O§!←P
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zKYFv/Q8sVH7VNCPj//3@0oY6xjpGOSSwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Husk does not have random numbers, so this uses the array itself to get a permutation. I genuinely don't know whether this would complete.</p>
<h2>Explanation</h2>
<pre><code>ΩS=O§!←P
Ω        Until
 S=O     the argument is ordered
       P take it's permutations
      ←  take its first element
    §!   return that permutation
</code></pre>
","80214","","","","","2020-10-30 04:07:09","","","","1","","","","CC BY-SA 4.0"
"214412","2","","60684","2020-10-30 05:02:52","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 37 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>≢{⊃,/↓⍉⌽@1⊢2 ¯1⍴{2|≢⍵:0,⍵⋄⍵}⍵}⌂traj⊤⎕
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97f@jzkXVj7qadfQftU1@1Nv5qGevg@GjrkVGCofWGz7q3VJtVANU8ah3q5WBDpB81N0CJGvBuKeppCgx61HXkkd9U0Fm/U/jMjIwBAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A full program which takes a single number as input.</p>
<p>The <code>traj</code> function does a lot of heavy lifting here(thanks to Bubbler for suggesting it and helping ot golf this).</p>
<p>The <code>(,,⍤0)/</code> idiom from APLcart is used to interleave lists together, but instead  this uses <code>,/↓⍉⌽</code> since it is a matrix.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>≢{⊃,/↓⍉⌽@1⊢2 ¯1⍴{2|≢⍵:0,⍵⋄⍵}⍵}⌂traj⊤⎕
                                   ⊤⎕ convert input to base-2
 {                           }⌂traj   calculate trajectory when the following function is applied repeatedly:
                {2|≢⍵:0,⍵⋄⍵}⍵         prepend a 0 if there are an odd number of bits
           2 ¯1⍴                     cut into two rows
       ⌽@1⊢                          apply reverse to first row
   ,/↓⍉                              transpose, concatenate into a vector
  ⊃                                  unenclose
≢                                    get length of the resulting list
</code></pre>
","80214","","","","","2020-10-30 05:02:52","","","","0","","","","CC BY-SA 4.0"
"214414","2","","48027","2020-10-30 05:28:10","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 18 bytes</h1>
<pre><code>mΣmm↔TmC2T§+m→m←m½
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/fc4tzcR21TQnKdjUIOLdcGsicB8YTcQ3v///8freTo5Ozi6qako@Tu4enl7QNk@Pr5BwQGARnBIaFh4RFKsQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Gaming</p>
","80214","","","","","2020-10-30 05:28:10","","","","0","","","","CC BY-SA 4.0"
"214415","2","","101727","2020-10-30 08:05:01","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>19</s></sup> 18 bytes</h1>
<pre><code>↑9C9mo`:'.wC9P…&quot;ag
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbREtny9z8BCt1vXJny4BHDcuUEtP//wcA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>729 words, using the same idea as the 05AB1E answer.</p>
<p>-1 byte from Dominic Van Essen.</p>
","80214","","80214","","2020-10-30 09:55:50","2020-10-30 09:55:50","","","","3","","","","CC BY-SA 4.0"
"214425","2","","214423","2020-10-30 12:20:19","","4","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>!Ẋoṁ□ėΘİf
</code></pre>
<p><a href=""https://tio.run/##ARwA4/9odXNr//8h4bqKb@G5geKWocSXzpjEsGb///85"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>1-indexed.</p>
<h2>Explanation</h2>
<pre><code>!Ẋoṁ□ėΘİf
       İf infinite fibonacci sequence
      Θ   prepend a 0
 Ẋo       map the following over triplets of values
     ė    make list of 3 elements
   ṁ□     sum their squares
!         index into this list using input
</code></pre>
","80214","","","","","2020-10-30 12:20:19","","","","1","","","","CC BY-SA 4.0"
"214447","2","","168534","2020-10-30 17:37:56","","1","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 57 bytes</h1>
<p><em><sup><sup>No MATL answer here yet! yay!</sup></sup></em></p>

<pre class=""lang-apl prettyprint-override""><code>{n←⍺⋄P5.G.circle 3⍴30⋄{P5.G.ln↑30×1+2 1○ᑈ1n×⍵×○2÷k}¨⍳k←⍵}
</code></pre>
<p>Made with help from dzaima.</p>
<p>Draws a 30x30 circle  with the times table for <code>n</code> and <code>k</code>.</p>
<p>Function submission which takes arguments as <code>n f k</code>, and will display properly on a default sized canvas.</p>
<p>This uses the formula from <a href=""https://codegolf.stackexchange.com/a/168542/80214"">user58543's answer.</a></p>
<p>You can test this out using <a href=""https://github.com/razetime/code-golf/blob/master/APL-code/circlenet.apl"" rel=""nofollow noreferrer"">this file</a> and dzaima's APLP5 engine.</p>
<h2>Explanation:</h2>
<pre class=""lang-apl prettyprint-override""><code>{n←⍺⋄P5.G.circle 3⍴30⋄{P5.G.ln↑30×1+2 1○ᑈ1n×⍵×○2÷k}¨⍳k←⍵}
{n←⍺⋄                                                   k←⍵} store left arg in n and right arg in k
      P5.G.circle 3⍴30⋄                                      Draw circle of radius 30

                                                        ⍳k   generate range 1..k
                       {                              }¨     Execute the following for each number i:
                                            1n×⍵×○2÷k        Multiply [1,n] with i×2π/k
                                      2 1○ᑈ                  Take cos and sin of each of those
                                30×1+                        Multiply 30, add 30 to them
                              ↑                              Convert to matrix
                        P5.G.ln                              Plot a line using those coordinates
</code></pre>
<h3>Output for <code>n=5, k=10</code>:</h3>
<p><a href=""https://i.stack.imgur.com/1S9PH.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1S9PH.png"" alt=""enter image description here"" /></a></p>
","80214","","80214","","2020-10-31 06:02:16","2020-10-31 06:02:16","","","","1","","","","CC BY-SA 4.0"
"214449","2","","69371","2020-10-30 18:01:24","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>Ṡ:o`-100Σt↑İ¬
</code></pre>
<p><a href=""https://tio.run/##AR4A4f9odXNr///huaA6b2AtMTAwzqN04oaRxLDCrP///zU"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-30 18:01:24","","","","0","","","","CC BY-SA 4.0"
"214471","2","","214463","2020-10-31 04:02:44","","7","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""noreferrer"">APL (Dyalog Extended)</a>, 20 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⌈/⌊⌿⍵∘.(1⊥∘|-)⍥⍸~⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v/pRT4f@o56uRz37H/VufdQxQ0/D8FHXUiCjRlfzUe/SR7076oAStf/THrVNeNTb96ir@VHvmke9Ww6tN37UNvFR39TgIGcgGeLhGfw/TcFEwVQBKKlgqGAAhoZQjA0CxbnSFIwVjFB0ACEA"" rel=""noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Uses the Manhattan Distance method from HyperNeutrino's Jelly answer.</p>
<p>Input is a binary matrix.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⌈/⌊⌿⍵∘.(1⊥∘|-)⍥⍸~⍵}
     ⍵           ~⍵  input and input negated
               ⍥⍸    coordinates of truthy values
      ∘.             outer product using
        (1⊥∘|-)      Manhattan distance function (APLcart)
   ⌊⌿                Minimum of each column
 ⌈/                  Maximum of the minima
</code></pre>
","80214","","","","","2020-10-31 04:02:44","","","","0","","","","CC BY-SA 4.0"
"214474","2","","73091","2020-10-31 04:50:06","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>Ω≤70§-ȯD→d÷10
</code></pre>
<p><a href=""https://tio.run/##ASIA3f9odXNr///OqeKJpDcwwqctyK9E4oaSZMO3MTD///8yMDE2"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Tied with Pyth, using a modified method.</p>
<h2>Explanation</h2>
<pre><code>Ω≤70§-ȯD→d÷10
Ω≤70          until the number is ≤ 70,
    §-        subtract
        →d    the last digit
      ȯD      doubled
          ÷10 from the number floor divided by 10
</code></pre>
","80214","","","","","2020-10-31 04:50:06","","","","0","","","","CC BY-SA 4.0"
"214475","2","","32451","2020-10-31 05:02:14","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>dḟöΛIz¦ḣ9mdḣPḣ9
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P@XhjvmHt52b7Vl1aNnDHYstc4ECiwNArP//AQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-10-31 05:02:14","","","","0","","","","CC BY-SA 4.0"
"214480","2","","128335","2020-10-31 08:41:57","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 73 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>'P3 36 22 5'
+/{{⍵≠4:3/⍵⋄4 0 0}¨(-1⊃⍵)⊖(-0⊃⍵)⌽36 22↑1(≢2↓⍵)⍴2↓⍵}¨¯1(≠⊆⊢)⎕
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkGXI862tP@qwcYKxibKRgZKZiqc2nrV1c/6t36qHOBiZWxPojV3WKiYKBgUHtohYau4aOuZqCY5qOuaRq6BjBOz16w9kdtEw01HnUuAjImg8V7t0CZQL2H1oPkFjzqanvUtUgT6IL/QLv/p3EZ6igAkQkYAdXoKFiAEVyAK43LGMYFMozAyg3ApBFYBCiuawgA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A full program, which takes the indices as specified. Requires <code>⎕IO←0</code> for 0-indexing.</p>
<p>Outputs a netpbm image, like in the Ruby answer.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>Netpbm header:
'P3 36 22 5' 

Grid Generator:
+/{{⍵≠4:3/⍵⋄4 0 0}¨(-1⊃⍵)⊖(-0⊃⍵)⌽36 22↑1(≢2↓⍵)⍴2↓⍵}¨¯1(≠⊆⊢)⎕
                                                              ⎕ Take the input
                                                       ¯1(≠⊆⊢)  split on -1s
  {                                                  }¨         do the following for each subarray i:
                                                 2↓⍵            Drop the 2 coordinates
                                        1(≢2↓⍵)⍴                Convert i to a 1-row matrix
                                  36 22↑                        create a 36x22 matrix with zeros, containing i
                           (-0⊃⍵)⌽                              rotate i to the required x coordinate
                    (-1⊃⍵)⊖                                     rotate i to the required y coordinate
    {             }¨                                            apply the following to each element:
     ⍵≠4:3/⍵                                                    if it's not red, assign a shade of grey
            ⋄4 0 0                                              otherwise assign red
+/                                                              sum all the resulting matrices
</code></pre>
","80214","","","","","2020-10-31 08:41:57","","","","0","","","","CC BY-SA 4.0"
"214483","2","","119361","2020-10-31 09:29:26","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 30 bytes</h1>
<pre><code>¢ma¨ÿȦ3ċṀÏ₁ÄẋΩƒ'ŸċḋÄẋḟω≡¢oΔ₅ṁż
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9Ci3MRDKw7vP7HM@Ej3w50Nh/sfNTUebnm4q/vcymOT1I/uAIru6AYLPNwx/3zno86Fhxbln5vyqKn14c7Go3v@/wcA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>The battle of which language has better builtin compression.</p>
","80214","","","","","2020-10-31 09:29:26","","","","0","","","","CC BY-SA 4.0"
"214484","2","","117162","2020-10-31 09:44:48","","0","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 37 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>P5.draw←{P5.Lm.p:P5.G.pt P5.mx P5.my}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pSszMTfz/P8BUL6UosfxR24RqINMnV6/ACki76xWUKADp3AowWVn7/z8A"" rel=""nofollow noreferrer"" title=""APL (dzaima/APL) – Try It Online"">Try it online!</a></p>
<p>Machine code is OP.</p>
","80214","","","","","2020-10-31 09:44:48","","","","0","","","","CC BY-SA 4.0"
"214488","2","","98968","2020-10-31 11:27:43","","0","","<h1><a href=""https://github.com/molarmanful/codinglang"" rel=""nofollow noreferrer"">CodingLang</a>, 136 bytes</h1>
<pre><code>(I )&gt;b(color:red)@style(V)&gt;b(color:blue)@style(o)&gt;b(color:red)@style(t)&gt;b(color:blue)@style(e)&gt;b(color:red)@style(d)&gt;b(color:blue)@style
</code></pre>
<p><a href=""https://bennyboy.tech/codinglang/"" rel=""nofollow noreferrer"">Try it!(code needs to be pasted)</a></p>
<p>I'm not sure how classes and stuff work in this. If someone else knows how to use predefined classes repeatedly, it would save a lot of bytes.</p>
Please do vote this year!</p>
","80214","","","","","2020-10-31 11:27:43","","","","0","","","","CC BY-SA 4.0"
"214492","2","","51839","2020-10-31 13:40:57","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>L↑S≠↔¡S+↔
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3@dR28TgR50LHrVNObQwWBtI/f//38ISAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>L↑S≠↔¡S+↔
     ¡    apply the following infinitely:
      S+↔ number + its reverse
 ↑        take the longest prefix of items where
  S≠↔     number ≠ its reverse
L         return its length
</code></pre>
","80214","","","","","2020-10-31 13:40:57","","","","0","","","","CC BY-SA 4.0"
"214494","2","","52321","2020-10-31 14:32:31","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>21</s></sup> 20 bytes</h1>
<pre><code>;moJ'-?I§e←→ε†sġ·=←O
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3zo330td197z0PLUR20THrVNOrf1UcOC4iMLD223BQr4////P9pSx9BYx1jH0FDHQsdEx9BAx9BUxywWAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>A bit lacking in the strings department, but does well.</p>
<p>No matter what I tried, it somehow stubbornly stayed at 21.</p>
<p>-1 byte from Dominic Van Essen.</p>
<h2>Explanation</h2>
<pre><code>;moJ'-?I§e←→ε†sġ§=…eO
                    O order the list
               ġ      group the list by the following:
                   e  elements paired
                §=    equal
                  …   the range between them?
             †s       convert all the numbers to strings
 mo                   map each group to the following:
      ?     ε         if it's a single element:
       I              leave as is
        §e←→          otherwise, move the first and last elements to a list
   J'-                join with '-'
;                     nest to display in one line
</code></pre>
","80214","","80214","","2020-10-31 17:26:24","2020-10-31 17:26:24","","","","1","","","","CC BY-SA 4.0"
"214496","2","","195592","2020-10-31 14:52:14","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 3 bytes</h1>
<pre><code>c½Σ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/nQ3nOL////H5UIAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Input as a two character string.</p>
","80214","","","","","2020-10-31 14:52:14","","","","0","","","","CC BY-SA 4.0"
"214502","2","","181763","2020-10-31 16:38:17","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>29</sup></s> 25 bytes</h1>
<pre><code>mm;₁'#⁰₁'+²RR'X
‼‼(m↔Tm+R
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/PzfX@lFTo7ryo8YNIFr70KagIPUIrkcNe4BII/dR25SQXO2g////G/43@m/83wgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Ah, this was convoluted.</p>
<p>The input order is <code>Matte,Frame,Width,Height</code>.</p>
<p>-4 bytes after simplifying function 2 &amp; 3.</p>
<h2>Explanation</h2>
<pre><code>Function ₁: framing function
‼‼(m↔Tm+R parameters a(char),n(int),m(matrix)
      m+R add a side
     T    Transpose
   m↔     reverse each row
‼‼(       repeat that 3 more times

Function ₀: main
mm;₁'#⁰₁'+²RR'X 
           RR'X make width × height matrix of 'X'es
       ₁'+²     add the matte of '+'es
   ₁'#⁰         add the frame of '#'es
mm;             nest each character(adds spaces)
</code></pre>
","80214","","80214","","2020-10-31 17:00:40","2020-10-31 17:00:40","","","","0","","","","CC BY-SA 4.0"
"214533","2","","212328","2020-11-01 04:17:04","","2","","<h1>22. <a href=""https://esolangs.org/wiki/StupidStackLanguage"" rel=""nofollow noreferrer"">StupidStacklanguage</a>, 27 available bytes</h1>

<pre class=""lang-python prettyprint-override""><code>abaacdaiiiiiiiqmiiiiiiiqqqqfffffeghjklmnopqrstuvwxyz 
</code></pre>
<p><a href=""https://tio.run/##rVZNj5swEL3nV7iuqoWEUKKqUrVZWlXVttpLW3V7i6jkgBPYEHCM2ST751PzTYgHclifwOP33vBmkjE7Cj@OPnxi/BRsWcwFSo6JgTgdjRhfIxthjE9kSYjrkaBYu231INcqW3TtP23CbRSzHU9E@rw/HF/QSSJHiSDuRrIsnJJO49R04y0LQqrdvNW@2OZYN8c3htx@@PHz15/7b18f73UzSZcaxobE6LoKufhHlq5HV2s/uFB2JB1S86Ga8HecSE5rlPhxGnqPm4DJ1@8kTOSH732pgYpDdyGNtAx1O0JyBSvUIIqtbClYsm0qH5pDrk@4DEuyRcHtmGG8p1zT6yOSvjglfSe4geYamZVmECWUC80yrAZFwzZuqcSxmGkgxO2Xyl8XloOmRWQxcyAmT8UkoVN7BiDoldrvBrVXHSbGg0hors@1ikQ3aOTZGEMM6ytzmQzm4vczZYkFEUuFpusQRQBYOQGtfOoXjbk3KLrpUGT9XuratnUeu2j8vzylAG/Y4RV0myEqGxUfOnPquOUojZDxjAZQ3PabUfcEGjfFhFyJhqvZuDTIFoM/0LpPASS7sj/fD/bn7jomCM774dl/Zr4FepD09UOl7swVda@DrfaY9/XHHEhBwK2exRXNHjMaUS8fG91QOVEmNppdxNrjBN2h84HSXTKL1oDIE00xIpFXqytTa60lp2SjPJB//yU7zFZKKr8KJBTDhFOIUGXjedXSnqq9UVrjhnHSX7XpYNU@g6YrDcjrVen21usVi1XqvV6xSsKhYk3hYj2DI@wjgNiD9wcIcVBO/Qo3MPCPKrniuqoGvHQBx8Skh0Cc363at74mJ/wQPZMw8HI24grKb7GRPRuYiPyuK@3U5738xSF5BTj9Bw"" rel=""nofollow noreferrer"" title=""Python 3.8 (pre-release) – Try It Online"">Try it online!</a></p>
<p>This prints <code>88888</code>.</p>
<p>This uses <code>abcdefghijklmnopqrstuvwxyz </code>(Printable ascii alphabets and space) from the previous answer.</p>
<p>The next answer must use the following bytes which are palindromes in base 2:</p>
<p><code>!-3?AIU]ckw¥½ÃÛçÿ</code></p>
<p><code>[33,45,51,63,65,73,85,93,99,107,119,127,165,189,195,219,231,255]</code></p>
<p><code>[0x21,0x2d,0x33,0x3f,0x41,0x49,0x55,0x5d,0x63,0x6b,0x77,0x7f,0xa5,0xbd,0xc3,0xdb,0xe7,0xff]</code></p>
<hr />
<h2>How it works:</h2>
<p><code>ab</code> pushes a 0 and pops it.</p>
<p><code>aacd</code> pushes two 0's and subtracts them and decrements the result.</p>
<p><code>aiiiiiii</code> pushes a 0 and adds 7 to it.</p>
<p><code>qm</code> squares it.</p>
<p><code>iiiiiii</code> adds 7 to that.</p>
<p><code>qqqq</code> duplicates it 4 times.</p>
<p><code>fffff</code> then displays that as printable ascii.</p>
<p><code>e</code> takes in input. Since there is no input, the program errors and ends execution, and the rest of the program does nothing.</p>
","80214","","66833","","2020-11-01 12:11:38","2020-11-01 12:11:38","","","","0","","","","CC BY-SA 4.0"
"214536","2","","92120","2020-11-01 10:52:17","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 20 bytes</h1>
<pre><code>ṁ!ṙ1*&quot;HBKD&quot;&quot;OAEI&quot;B16
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HORsWHO2caail5OHm7KCn5O7p6KjkZmv3//9/IwMQCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Similiar to the APL answer.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 22 bytes</h1>
<pre><code>ṁz!e&quot;BKDH&quot;&quot;AEIO&quot;m‰4B16
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxirFVCUnbxcPJSVHV09/pdxHDRtMnAzN/v//b2RgYgEA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Idea from Dennis' answer.</p>
","80214","","80214","","2020-11-01 11:08:18","2020-11-01 11:08:18","","","","0","","","","CC BY-SA 4.0"
"214559","2","","105529","2020-11-02 04:10:38","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>Σ↑Θnİ0İf
</code></pre>
<p><a href=""https://tio.run/##ARgA5/9odXNr///Oo@KGkc6YbsSwMMSwZv///zI"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>painfully slow due to intersecting two infinite lists.</p>
","80214","","","","","2020-11-02 04:10:38","","","","1","","","","CC BY-SA 4.0"
"214560","2","","71526","2020-11-02 04:49:02","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 25 bytes</h1>
<pre><code>ω(m(moF`-Fz*C2z*:1İ_)TmC2
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//3ynRq5Gbr5bgq5blZazUZWWleGRDfGaIbnORv///4@ONtYx1DHRMYzViTbVsdQx0jEDs4x1THUsgCxLHXOgqHFsLAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>The testcases in this one are great.</p>
","80214","","","","","2020-11-02 04:49:02","","","","0","","","","CC BY-SA 4.0"
"214563","2","","49148","2020-11-02 06:36:22","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>26 25</s></sup> 24 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>' ⎕'[⊤⌊12÷⍨6+×⍨⊥⊖0 2⊤…⎕]
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qp/@jtgkGXI862tP@qysABdSjH3UtedTTZWh0ePuj3hVm2oenA6lHXUsfdU0zUDACSTYsA6qL/Q/U8z@Ny9DIQMEAAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Takes the inputs in reverse(-1 byte).</p>
<p>-1 byte from Bubbler(<code>.5+12÷⍨ → 12÷⍨6+</code>)</p>
<p>Generates the sequence in the same way as the existing J solution, except Bubbler shortened it with some math <a href=""https://chat.stackexchange.com/transcript/message/56022229#56022229"">explained here.</a></p>
<p>Uses '⎕' as the display character. If '█' is required, then it becomes 27 bytes(does look nicer with it).</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>' ⎕'[⊤⌊12÷⍨6+×⍨⊥⊖0 2⊤…⎕]
                      ⎕  take the second and first inputs
                     …   create an inclusive range between them
                 0 2⊤    encode into parts of 0 &amp; 2
                ⊖        reverse the columns
               ⊥         decode from base 2
                         (this calculates (n+3×(n%2))/2)
             ×⍨          square that
      ⌊12÷⍨6+            divide by 12, round to the nearest integer               
     ⊤                   encode in base 2
                         (this gives a binary matrix witht the required graph)
' ⎕'[                  ] convert 0s to ' ' and 1s to '⎕'
</code></pre>
","80214","","80214","","2020-11-02 07:01:08","2020-11-02 07:01:08","","","","1","","","","CC BY-SA 4.0"
"214566","2","","107721","2020-11-02 08:55:41","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 41 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⎕NEXISTS⍵:'f'⎕NMOVE⍨⍵,'f'⋄3 3⍴'+-+| |'}⎕
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT/@vXv2ob6qfa4RncEjwo96tVhpAQkddPU1dXRMk4esf5grmPepuMVYwftS7RV1dW1e7RqFGXb1WXQGkJCA0RAGo4n/ao7YJaIYBhWGGPOpdATY5DckkqEG1//@nKainq3MBSf3S4iL94ozEolR9dQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>filename is hardcoded as <code>f</code>, in the current working directory.</p>
","80214","","","","","2020-11-02 08:55:41","","","","0","","","","CC BY-SA 4.0"
"214572","2","","63175","2020-11-02 12:02:19","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 20 bytes</h1>
<pre><code>←#ṗumȯḋJ1`Cḋ¹oSze↔ŀḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbBOWHO6eX5p5Y/3BHt5dhgjOQOrQzP7gq9VHblKMNQN7///8NzQE"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Barely got away with a single byte.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 21 bytes</h1>
<pre><code>#oṗḋumJ1§z§e↑↓oΘŀo¢;ḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Xzn/4c7pD3d0l@Z6GR5aXnVoeeqjtomP2ibnn5txtCH/0CJroNz///8NzQE"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>There's probably a much shorter way to do this.</p>
","80214","","80214","","2020-11-07 09:04:39","2020-11-07 09:04:39","","","","1","","","","CC BY-SA 4.0"
"214587","2","","77219","2020-11-02 13:41:30","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 78 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{{⍵/⍨×≢¨⍵}{⍵/⍨×⍵}¨↓⍉(-⍳≢⍵)⌽⍵↑⍨1 2×≢⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkG/6urH/Vu1X/Uu@Lw9Eediw6tAPJqkYSAPKBY2@RHvZ0auo96NwPVAMU0H/XsBVKP2iYCVRkqGIH1gtT@TwMa@qi371FX86PeNY96txxabwxS1Tc1OMgZSIZ4eAb/T1MwBkKgpKE20ERLrjQFEwVTON/IAAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-02 13:41:30","","","","0","","","","CC BY-SA 4.0"
"214589","2","","214575","2020-11-02 13:55:32","","5","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>Σ↑ṁṘḋ2NΣ
</code></pre>
<p><a href=""https://tio.run/##AR0A4v9odXNr///Oo@KGkeG5geG5mOG4izJOzqP///8xMg"" rel=""noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##ASQA2/9odXNr/23igoHhuKP/zqPihpHhuYHhuZjhuIsyTs6j////MTI"" rel=""noreferrer"" title=""Husk – Try It Online"">Verify first 12 values</a></p>
<p>Returns the <span class=""math-container"">\$n^{th}\$</span> value of the sequence, 1 indexed.</p>
<h2>Explanation</h2>
<pre><code>Σ↑ṁṘḋ2NΣ
  ṁ   N  map the following across natural numbers and concatenate
   Ṙḋ2   replicate [1,0] n times
 ↑       take all values
       Σ till the triangular number of the input
Σ        sum them
</code></pre>
","80214","","","","","2020-11-02 13:55:32","","","","0","","","","CC BY-SA 4.0"
"214606","2","","36445","2020-11-02 16:28:46","","0","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 125 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>P5.size←2⌿300
t←0
g←P5.G
z←0 0
P5.draw←{g.bg¯1
g.circle 3⌿90
g.ln a←90×1+z,2 1○t
g.rect a
g.ln 90×1+z,(÷2○t),z,z,⍨÷1○t
t+←.1}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pSszMTfz/P8BUrzizKvVR2wSjRz37jQ0MuEqAbAOudCAJlHPnqgJxFQy4gJyUosRyIK86XS8p/dB6Q650veTMouScVAVjoFZLoB69nDyFRKAKS4PD0w21q3SMFAwfTe8uAUoUpSaXKCRCVMBkNQ5vNwJJa@pUAeGj3hWHt0OUl2gDzdAzrP3/HwA"" rel=""nofollow noreferrer"" title=""APL (dzaima/APL) – Try It Online"">Try it online!</a></p>
<p>Displays it at the top left corner:</p>
<p><a href=""https://i.stack.imgur.com/Il3Jw.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Il3Jw.gif"" alt=""enter image description here"" /></a></p>
<h2>Explanation</h2>
<p><code>P5.size←2⌿300</code> make a 300x300 canvas</p>
<p><code>t←0</code> set angle <span class=""math-container"">\$\theta=0.\$</span></p>
<p><code>g←P5.G</code> shorten drawing namespace</p>
<p><code>z←0 0</code> save [0,0] in <code>z</code></p>
<p><code>P5.draw←{</code> Do the following repeatedly:</p>
<p><code>g.bg¯1</code> Draw a white background</p>
<p><code>g.circle 3⌿90</code> draw a circle of radius 90 at <span class=""math-container"">\$(90, 90)\$</span></p>
<p><code>g.ln a←90×1+z,2 1○t</code> Line from <span class=""math-container"">\$(90,90)\$</span> to <span class=""math-container"">\$(90cos\theta, 90sin\theta)\$</span> for angle</p>
<p><code>g.rect a</code> rectangle using the same coordinates</p>
<p><code>g.ln 90×1+z,(÷2○t),z,z,⍨÷1○t</code> triangle with the points <span class=""math-container"">\$(90, 90),(90,90/cos\theta),(90/sin\theta,90)\$</span></p>
<p><code>t+←.1</code> increment angle <span class=""math-container"">\$\theta\$</span></p>
","80214","","","","","2020-11-02 16:28:46","","","","0","","","","CC BY-SA 4.0"
"214608","2","","106656","2020-11-02 16:35:32","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>▲mLgḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9G0Tbk@6Q93dP///x8A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-02 16:35:32","","","","0","","","","CC BY-SA 4.0"
"214610","2","","79644","2020-11-02 16:50:22","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>LU¡Ṡ-ȯ→hḊ
</code></pre>
<p><a href=""https://tio.run/##AR0A4v9odXNr//9MVcKh4bmgLciv4oaSaOG4iv///zIwMA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-02 16:50:22","","","","0","","","","CC BY-SA 4.0"
"214612","2","","80422","2020-11-02 17:02:15","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>←LU¡Ṡ-oLḊ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbBJ/QQwsf7lygm@/zcEfX////Dc0A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-02 17:02:15","","","","0","","","","CC BY-SA 4.0"
"214615","2","","17005","2020-11-02 17:28:36","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 4 bytes</h1>
<pre><code>c'ߞ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P1n9/rz//wE"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-02 17:28:36","","","","0","","","","CC BY-SA 4.0"
"214618","2","","113600","2020-11-02 18:03:46","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>►ȯΣz=¹¢Ṗ²
</code></pre>
<p><a href=""https://tio.run/##ATkAxv9odXNr///ilrrIr86jej3CucKi4bmWwrL///8y/2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6eXg"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Zgarb-quality questions need a Zgarb language answer.</p>
<h2>Explanation</h2>
<pre><code>►ȯΣz=¹¢Ṗ²
     ¹ Ṗ² length n powerset of string
►ȯ        max by:
      ¢   repeating each subsequence infinitely
   z=¹    and check equality with the input
  Σ       sum the results
          this will return the most optimal pattern.
</code></pre>
","80214","","80214","","2020-11-02 18:09:02","2020-11-02 18:09:02","","","","0","","","","CC BY-SA 4.0"
"214643","2","","214619","2020-11-03 03:47:35","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>mdföΛIṠz¦ŀmdḣPḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Pzcl7fC2c7M9H@5cUHVo2dGG3JSHOxYHAPH///@NAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Almost the same as the other question, except with parameters.</p>
","80214","","66833","","2021-01-21 19:21:22","2021-01-21 19:21:22","","","","0","","","","CC BY-SA 4.0"
"214644","2","","59347","2020-11-03 04:21:10","","2","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, 15 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>[begin] [again]
</code></pre>
<p><a href=""https://tio.run/##S8svKsnQTU8DUf//RyelpmfmxSpEJ6YnAun//wE"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>Shortened nonForgivingJesus's answer using square brackets for looping directly.</p>
<p>My first Forth answer!</p>
","80214","","","","","2020-11-03 04:21:10","","","","0","","","","CC BY-SA 4.0"
"214645","2","","53472","2020-11-03 05:29:47","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>▲moS(ṁd+)TSCo√LP
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9G0Tbn5wRoPdzamaGuGBDvnP@qY5RPw////aFMdCx0zHYtYAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>Σz*O¹OmΣπ2↑:1İ⁰L
</code></pre>
<p><a href=""https://tio.run/##ASsA1P9odXNr///Oo3oqT8K5T23Oo8@AMuKGkToxxLDigbBM////WzEsMiwzLDRd"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>same idea as isaacg's answer.</p>
<p>Somehow both of these are still 1 byte more than Pyth.</p>
","80214","","","","","2020-11-03 05:29:47","","","","0","","","","CC BY-SA 4.0"
"214649","2","","203853","2020-11-03 07:58:33","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>45</s></sup> 44 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>+/×{+/{a b c←⍵⋄√(a×a÷b×c)+2-(⊢+÷)b÷c}⌽∘⍵¨⍳3}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/X1v/8PRqbf3qRIUkheRHbRMe9W591N3yqGOWRuLh6YmHtycdnp6sqW2kq/Goa5H24e2aSYe3J9c@6tn7qGMGUOmhFY96NxvX/k8D6@x71NV8aL3xo7aJj/qmBgc5A8kQD8/g/2kKhiDIlaZgBITGQNpYwUTBFEibKZgrGBqBJPSAQnqmCmZ65gA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Bubbler has a <a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfmvrX94erW2/qOOWUYah6frH97@qHfFo96tunqHp4NZS3QOrdDV1zR51LvF8FHPXqBULZe2PlgXkK0B1KcLVNm1@PB07cPbgQYAdQB5mka6@sha/kO0POpaRJSOrkX/0x61TXjU2/eoq/nQeuNHbRMf9U0NDnIGkiEensH/0xSMFUwUTAE"" rel=""nofollow noreferrer"">27 byte solution</a> with a complete train, but I think it deserves it's own answer.</p>
<p>This is a port of Surculose Suptum's formula, simplified by Kevin Cruijssen.</p>
<p>-1 byte from dzaima.</p>
","80214","","80214","","2020-11-03 10:12:50","2020-11-03 10:12:50","","","","0","","","","CC BY-SA 4.0"
"214653","2","","93615","2020-11-03 09:02:22","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 76 bytes</h1>
<pre><code>`:+R' 7&quot;¦__¦|&quot;:*&quot;()&quot;6§+(mo:'|t↑2)↓2m↓3z+zR¢&quot; &quot;Nmo`:'|+&quot;¦::¦&quot;Cṫ9Γ·::'.ṁs↑54İπ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P8FKO0hdwVzp0LL4@EPLapSstJQ0NJXMDi3X1sjNt1KvKXnUNtFI81HbZKNcIGFcpV0VdGiRkoKSX25@AlBaG6jRyurQMiXnhztXW56bfGi7lZW63sOdjcVAfaYmRzacb/j/HwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>There's probably some interesing way to shorten this further.</p>
","80214","","","","","2020-11-03 09:02:22","","","","0","","","","CC BY-SA 4.0"
"214660","2","","143649","2020-11-03 11:14:27","","1","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 79 bytes</h1>
<pre><code>≔⪪”$±=Ｋ≕⦃Vj@η⟲.w\`o:7➙1”¶ηＦθＦ³Ｆ⌕Ａ§ηκι⊞υ⟦λκ⟧ＩＥ²∕ΣＥυ§λιＬθ§§η⁺·⁵∕ΣＥυ⊟ιＬθ⁺·⁵∕ΣＥυ⊟ιＬθ
</code></pre>
<p><a href=""https://tio.run/##nY07b8IwFIX3/grL07VkGIqYmMyrpITWkLa8whAlKbZwnTR2EP/eWFEjIcHUuxzp6LvfSUVSpUWinGPGyKOGqFTSAl6uJ6uP7WfwzmPNovH0ZfY6D2O924y@hm8LTBGONSYUCTJ4@i4qBL8ENdn7y6nUGVMKmA10ll9AUHTyvCQE8doIqCnaK98dvIBXUlsYJcbCIinhmaKxPMssh6j@aRoPtx7VOLwpzPXRCr/rr1W00M0oV7WBbv@Rkhcl3Lv@8UIGzu0x4yE@uI46XwE"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
<p>Neil's golf using string functions.</p>
<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 107 bytes</h1>
<pre><code>Ｐ”$±=Ｋ≕⦃Vj@η⟲.w\`o:7➙1”≔⟦⟧α≔⟦⟧βＦχ«Ｆ³«ＪικＦθ«¿⁼λＫＫ«⊞α⎇›ⅉ⁰⁺∕¹¦³ⅈⅈ⊞βⅉ»»»»Ｊ⌊∕⁺Σα·⁵Ｌθ⌈∕⁺Σβ·⁵Ｌθ≔ＫＫχ⎚χ¶Ｉ∕ΣαＬθ¶Ｉ∕ΣβＬθ
</code></pre>
<p><a href=""https://tio.run/##jVDbTsJAEH1mv4L0aSYZTQnxA7BcpIJWqVfKw7audMOylW1LQgjfXttaDIYXk93knMmcc2YmirmJEq6KYpqrTHpG6gysh5fBo//2NL73At2b9YejG/d2Euj3V@f5@m5qIeulqVxqmC@In5IQ2TAx0LFxz1oV6lag5ebrLz8BSSssWVXf1PWW/ITBJucqBUWeECtAxPbey9MYOPnCaG52MDKCZ8KASzaSp/IU@nIrPwR0qIs0rh62K7daF5KLh5KV/8AOrIkeqqRMbXS1xyxfA0eyL6@QJkIvs7gcCpEcIdVZY3je@Lt2NTdFyBwluGE/Byxpc8lAW0fs8DQ7OjfpJ37/EIR/BEUxt3rexFoUF2r7DQ"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
<p>Draws the keyboard on the canvas and finds the average that way.</p>
","80214","","","","","2020-11-03 11:14:27","","","","0","","","","CC BY-SA 4.0"
"214672","2","","204526","2020-11-03 14:37:26","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 46 bytes</h1>
<pre><code>`:§+*&quot;¦/&quot;o:' s¹z+mR' ṫ¹m§+*&quot; /&quot;(:' R'_+L¹D≠¹)ŀ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P8Hq0HJtLaVDy/SV8q3UFYoP7azSzg1SV3i4c/WhnblgOQV9JQ2gVJB6vLbPoZ0ujzoXHNqpebTh////JgYA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-03 14:37:26","","","","0","","","","CC BY-SA 4.0"
"214675","2","","135753","2020-11-03 16:49:30","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 26 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｌ├_×；∔ｒ↔ｌ╷＼ ；∔＋ｌ½：／； ＊；∔＋↔
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjJDJXUyNTFDXyVENyV1RkYxQiV1MjIxNCV1RkY1MiV1MjE5NCV1RkY0QyV1MjU3NyV1RkYzQyUyMCV1RkYxQiV1MjIxNCV1RkYwQiV1RkY0QyVCRCV1RkYxQSV1RkYwRiV1RkYxQiUyMCV1RkYwQSV1RkYxQiV1MjIxNCV1RkYwQiV1MjE5NA__,i=JTVCJTIyJTIzJTIwJTIwJTIzJTIwJTIyJTJDJTIyJTIzJTIwJTIwJTIzJTIwJTIyJTJDJTIyJTIzJTIzJTIzJTIzJTIzJTIyJTJDJTIyJTIwJTIwJTIwJTIzJTIwJTIyJTJDJTIyJTIwJTIwJTIwJTIzJTIwJTIyJTVE,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2020-11-03 16:49:30","","","","0","","","","CC BY-SA 4.0"
"214701","2","","211641","2020-11-04 03:18:25","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 32 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>“┌Wｗｚ‼GZE⁸↘４ＢUＨ＜Ｕ„２┬８ｎ｛｛⁴＋ｃ］］╶╶＊
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXUyMDFDJXUyNTBDVyV1RkY1NyV1RkY1QSV1MjAzQ0daRSV1MjA3OCV1MjE5OCV1RkYxNCV1RkYyMlUldUZGMjgldUZGMUMldUZGMzUldTIwMUUldUZGMTIldTI1MkMldUZGMTgldUZGNEUldUZGNUIldUZGNUIldTIwNzQldUZGMEIldUZGNDMldUZGM0QldUZGM0QldTI1NzYldTI1NzYldUZGMEE_,i=Mw__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<p>A better compression method would reduce this by a lot.</p>
","80214","","","","","2020-11-04 03:18:25","","","","0","","","","CC BY-SA 4.0"
"214702","2","","209020","2020-11-04 03:46:04","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 12 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>½Ｕ_× ¶\¶|＋↔│
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JUJEJXVGRjM1XyVENyUyMCVCNiU1QyVCNiU3QyV1RkYwQiV1MjE5NCV1MjUwMg__,i=NQ__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2020-11-04 03:46:04","","","","0","","","","CC BY-SA 4.0"
"214703","2","","203510","2020-11-04 04:25:39","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 26 bytes</h1>
<pre><code>J'¯†!&quot;¦/_&quot;x9ẊoB2em%4t↑İp
</code></pre>
<p><a href=""https://tio.run/##ASoA1f9odXNr//9KJ8Kv4oCgISLCpi9fIng54bqKb0IyZW0lNHTihpHEsHD///8"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-04 04:25:39","","","","0","","","","CC BY-SA 4.0"
"214704","2","","172474","2020-11-04 07:20:51","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>ṠmṙÖ%3ḣ9
</code></pre>
<p><a href=""https://tio.run/##ARcA6P9odXNr///huaBt4bmZw5YlM@G4ozn//w"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-04 07:20:51","","","","0","","","","CC BY-SA 4.0"
"214709","2","","167469","2020-11-04 08:56:20","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, <sup><s>20</sup></s> 16 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｈ：２％！－├#×；↶ｎ｝╶├⟳
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JUY4JXVGRjFCJXVGRjVCJXVGRjFBJXVGRjEyJXVGRjA1JXVGRjAxJXVGRjBEJXUyNTFDJTIzJUQ3JXVGRjFCJXUyMUI2JXVGRjExJXVGRjExJXUyNTRCJXVGRjVEJXUyNTc2JXUyNTFDJXUyN0Yz,i=MTA_,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<h2>Explanation</h2>
<pre><code>ø；｛：２％！－├#×；↶１１╋｝╶├⟳
ø                            push an empty art object
 ；                              swap with the input
   ｛                  ｝    for i in 1 to n:
   ｛：                ｝     duplicate i
   ｛ ２％              ｝    mod 2
   ｛    ！            ｝    negate
   ｛     －           ｝    subtract that from i
   ｛       ├          ｝    add 2
   ｛         #×       ｝    repeat '#' that many times
   ｛           ；     ｝    swap with previous iteration
   ｛             ↶    ｝   turn 90 degrees anticlockwise
   ｛              １１╋｝   overlap at (1,1)
                        ╶├⟳ rotate 90 degrees n+2 times
</code></pre>
","80214","","80214","","2020-11-05 08:19:06","2020-11-05 08:19:06","","","","0","","","","CC BY-SA 4.0"
"214712","2","","167441","2020-11-04 11:25:34","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 25 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｈ*×］oｎ╶２％？！／ ＊］ ＊／｝⤢ ＊⁷⇵⟳
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjI4KiVENyV1RkYzRG8ldUZGNEUldTI1NzYldUZGMTIldUZGMDUldUZGMUYldUZGMDEldUZGMEYlMjAldUZGMEEldUZGM0QlMjAldUZGMEEldUZGMEYldUZGNUQldTI5MjIlMjAldUZGMEEldTIwNzcldTIxRjUldTI3RjM_,i=MTAlMEE4,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<p>The directions are as follows:</p>
<pre><code>7 6 1
4 ∘ 8
5 2 3
</code></pre>
","80214","","","","","2020-11-04 11:25:34","","","","0","","","","CC BY-SA 4.0"
"214713","2","","98588","2020-11-04 12:22:39","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 7 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｈ＼║ｎ↔｝↕
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjI4JXVGRjNDJXUyNTUxJXVGRjRFJXUyMTk0JXVGRjVEJXUyMTk1,i=NQ__,v=8"" rel=""nofollow noreferrer"">Try it here!</a>
I guess Canvas is now the ideal language for this challenge.</p>
","80214","","","","","2020-11-04 12:22:39","","","","0","","","","CC BY-SA 4.0"
"214715","2","","214678","2020-11-04 13:44:20","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 12 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>｛ｃ］∑“Ｎ＊.［„；％
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjVCJXVGRjQzJXVGRjNEJXUyMjExJXUyMDFDJXVGRjJFJXVGRjBBLiV1RkYzQiV1MjAxRSV1RkYxQiV1RkYwNQ__,i=Q3lhbg__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<p>same method as pxeger's answer.</p>
","80214","","","","","2020-11-04 13:44:20","","","","0","","","","CC BY-SA 4.0"
"214717","2","","60103","2020-11-04 14:23:12","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>ḟȯ=ḣ7Oṁdfo=¹ΣṖḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@GO@SfW2z7csdjc/@HOxpS0fNtDO88tfrhzGlDo////hgYGAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-04 14:23:12","","","","0","","","","CC BY-SA 4.0"
"214720","2","","125470","2020-11-04 15:59:56","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 2 bytes</h1>
<pre><code>zY
</code></pre>
<p><a href=""https://tio.run/##DcqxEYAgDAXQVb6NlTs4h2XORPAEwgEpZPnoq1@0/rjPw91r09Ao57sEVJszSceKU1kQNF3L7kUHXhn4GxsN4Q1FhDsITSJZ@gA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>zip using maximum.</p>
","80214","","","","","2020-11-04 15:59:56","","","","0","","","","CC BY-SA 4.0"
"214722","2","","120121","2020-11-04 17:57:16","","5","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>72</s></sup> 58 bytes</h1>
<pre><code>mṙ1₁Fz+m(₁TT' Ṡ:→S:öR'-→▲mL)TTømėF`-FnF-
Ṡz:(`:'+:'+R'|-2L
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/fhzpmGj5oa3aq0czWAdEiIusLDnQusHrVNCrY6vC1IXRfIejRtU66PZkjI4R25R6a7Jei65bnpcgFVVVlpJFipawNRkHqNrpHP////o6OVDJV0lAxBhFt@BZB0Sk0sAlLGxsZgTqpSrA5EDUJERyk4OaM8M62k0i2zDMQ1UYqNBQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Husk does not support arrays of multiple types, so the arguments must be string arrays.</p>
<p>I am not sure whether I want to explain this monstrosity.</p>
<p>Due to it's sheer size, it takes about 28 secs(due to type inference) for the first test case mentioned. Without some of the type inference issues, this could be a lot shorter.</p>
<p>-14 bytes with a lot of adjustments(I got better at Husk).</p>
","80214","","80214","","2021-01-23 11:23:43","2021-01-23 11:23:43","","","","3","","","","CC BY-SA 4.0"
"214741","2","","127870","2020-11-05 05:36:56","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 13 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ＨＨ／ｎ｝！╬＋｝⤢ｒ！║
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjI4JXVGRjI4JXVGRjBGJXVGRjRFJXVGRjVEJXVGRjAxJXUyNTZDJXVGRjBCJXVGRjVEJXUyOTIyJXVGRjUyJXVGRjAxJXUyNTUx,i=NA__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2020-11-05 05:36:56","","","","0","","","","CC BY-SA 4.0"
"214742","2","","126305","2020-11-05 06:09:05","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 14 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>#*@Ｈ╶：＊ｌ⁸∔½：╋｝
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JTIzKkAldUZGMjgldTI1NzYldUZGMUEldUZGMEEldUZGNEMldTIwNzgldTIyMTQlQkQldUZGMUEldTI1NEIldUZGNUQ_,i=OCUwQTYlMEEy,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","80214","","2020-11-05 06:20:01","2020-11-05 06:20:01","","","","0","","","","CC BY-SA 4.0"
"214744","2","","57442","2020-11-05 06:36:20","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 15 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｈ0*+＠¹２×╷：＊；２２╋
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjI4MCorJXVGRjIwJUI5JXVGRjEyJUQ3JXUyNTc3JXVGRjFBJXVGRjBBJXVGRjFCJXVGRjEyJXVGRjEyJXUyNTRC,i=MTY_,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<p>Can probably be shortened further.</p>
<h2>Explanation</h2>
<pre><code>H0*+@¹2×|:*;22╋
H               push an empty art object, start a loop using input
 0*+            string &quot;0*+&quot;
    @           get the nth element, circularly &lt;-----------+
     ¹          loop iteration                              |
      2×        double it                                   |
        |       decrement it                                |
         :      duplicate it                                |
          *     use that to box the character from here ----+
           ;    swap the box with the previous iteration
            22╋ overlap at (2,2) 
</code></pre>
","80214","","80214","","2020-11-05 06:42:22","2020-11-05 06:42:22","","","","0","","","","CC BY-SA 4.0"
"214745","2","","57277","2020-11-05 06:51:02","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 52 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>‽“ｐｂｎ@；║Ｌ↶Ｆ{８ø⇵ohＵY÷²[Ｌ┘↗ＨＺ4ｖｙ）Ｃg⁰‟ｔ｝$¶|∙---¶~~~─∔ｒ×
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXUyMDNEJXUyMDFDJXVGRjUwJXVGRjQyJXVGRjRFQCV1RkYxQiV1MjU1MSV1RkYyQyV1MjFCNiV1RkYyNiU3QiV1RkYxOCVGOCV1MjFGNW9oJXVGRjM1WSVGNyVCMiU1QiV1RkYyQyV1MjUxOCV1MjE5NyV1RkYyOCV1RkYzQTQldUZGNTYldUZGNTkldUZGMDkldUZGMjNnJXUyMDcwJXUyMDFGJXVGRjU0JXVGRjVEJTI0JUI2JTdDJXUyMjE5LS0tJUI2JTdFJTdFJTdFJXUyNTAwJXUyMjE0JXVGRjUyJUQ3,i=MTA_,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2020-11-05 06:51:02","","","","0","","","","CC BY-SA 4.0"
"214746","2","","66902","2020-11-05 06:54:42","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 4 bytes</h1>
<pre><code>Σmrw
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zi3KLy////mygY6hsBAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p><code>ṁrw</code> is supposed to work, but there's some bug that returns an empty list. Anyway, hooray for native rational number support.</p>
","80214","","","","","2020-11-05 06:54:42","","","","0","","","","CC BY-SA 4.0"
"214747","2","","128784","2020-11-05 07:27:57","","4","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 3 bytes</h1>
<pre><code>►≠O
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9G0XY86F/j///8/2kTHUscUiA10jGIB"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>►≠O
  O order the elements
►   max by
 ≠  inequality(selects least frequent elements)
    then returns the last of the least frequent elements
</code></pre>
","80214","","","","","2020-11-05 07:27:57","","","","0","","","","CC BY-SA 4.0"
"214752","2","","59194","2020-11-05 09:55:27","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 24 bytes</h1>
<pre><code>¶↑≤¹:2m+1mDṠ-om§+oDΠΣπ2ḣ
</code></pre>
<p><a href=""https://tio.run/##ATEAzv9odXNr///CtuKGkeKJpMK5OjJtKzFtROG5oC1vbcKnK29EzqDOo8@AMuG4o////zMw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Ok, I'm not sure why increment <code>→</code> isn't working properly here. Once that works, this will be 23 (tied with Pyth).</p>
","80214","","","","","2020-11-05 09:55:27","","","","0","","","","CC BY-SA 4.0"
"214764","2","","214750","2020-11-05 10:42:12","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 13 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>［］９＠ｊ｛┤］２┴‾p－
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjNCJXVGRjNEJXVGRjE5JXVGRjIwJXVGRjRBJXVGRjVCJXUyNTI0JXVGRjNEJXVGRjEyJXUyNTM0JXUyMDNFcCV1RkYwRA__,i=JTIyMDAxMTExMDExMTAwMTEwMDExMDAxMTAwMTEwMDExMDElMjI_,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<h2>Explanation</h2>
<pre><code>[]9@j{⊣]2⊥¯p⊣-
[]              get all prefixes
  9@            9th prefix
    j           remove first element
     {⊣]        cast each element to integer
        2⊥      decode from base 2
          ¯p    127
            -   subtract that from it 
</code></pre>
","80214","","80214","","2020-11-05 10:47:51","2020-11-05 10:47:51","","","","0","","","","CC BY-SA 4.0"
"214778","2","","951","2020-11-05 14:38:54","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 24 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｈ（¹）＊！∔｝─Ｌ╷ ×；＋ ∔：↔∔⤢╶×↔
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjI4JXVGRjA4JUI5JXVGRjA5JXVGRjBBJXVGRjAxJXUyMjE0JXVGRjVEJXUyNTAwJXVGRjJDJXUyNTc3JTIwJUQ3JXVGRjFCJXVGRjBCJTIwJXUyMjE0JXVGRjFBJXUyMTk0JXUyMjE0JXUyOTIyJXUyNTc2JUQ3JXUyMTk0,i=MyUwQTI_,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2020-11-05 14:38:54","","","","0","","","","CC BY-SA 4.0"
"214786","2","","5194","2020-11-05 15:35:03","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 7 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╶╶90┤÷↷
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXUyNTc2JXUyNTc2OTAldTI1MjQlRjcldTIxQjc_,i=JTIyJTNDLSUyMCU3QyU3QyU1Q24lN0MlMjAlMjAlN0NWJTVDbistJTNFKyUyMCU1Q24lMjAlMjAlMjAlN0NPJTVDbiUzQy0tKyUyMCUyMiUwQTkw,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<p><s>basically cheating</s></p>
","80214","","","","","2020-11-05 15:35:03","","","","0","","","","CC BY-SA 4.0"
"214788","2","","19699","2020-11-05 16:35:09","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 22 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>A；╷｛┐⤢ｌ；Ｌ┘¹Ｚｊ＠┘┘＊＋｝╶［⤢
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=QSV1RkYxQiV1MjU3NyV1RkY1QiV1MjUxMCV1MjkyMiV1RkY0QyV1RkYxQiV1RkYyQyV1MjUxOCVCOSV1RkYzQSV1RkY0QSV1RkYyMCV1MjUxOCV1MjUxOCV1RkYwQSV1RkYwQiV1RkY1RCV1MjU3NiV1RkYzQiV1MjkyMg__,i=Mw__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2020-11-05 16:35:09","","","","0","","","","CC BY-SA 4.0"
"214795","2","","19571","2020-11-05 17:34:10","","3","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 38 - 10 = 28 chars</h1>

<pre class=""lang-apl prettyprint-override""><code>' ▗▖▄▝▐▞▟▘▚▌▙▀▜▛█'[{2⊥∊⍵}⌺(2 2⍴2)≠⎕⍪0]
</code></pre>
<p><a href=""https://tio.run/##nZC7CsJAEEX7fMV2q0Ug5C@s9gPEIpDEJqiFhSKChcQYEomF4/vR2Fhr4@fcH4kx5mHwATrFzmXvncMwWsuS9a5mNeuy0WkbDd3QQ0xmFQE7UCQ4IzPkDDQHEWgI2oIC0A60By1AK5AHWoIGoA1oDXJ4tafCPcJx4V/68K4llanwz2oZ40OEhn9SamFEDk0J9pQzERf70CNxr0zn7rMhOOP5T/Im@Syamy@p3PkOEsV5kc0XQHHqt43eg9KN/r7RQ6SgGw"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>-10 bytes for an explanation? Count me in!</p>
<p>-14 bytes from Adám.</p>
<p>Takes input as a list of lines from STDIN.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>' ▗▖▄▝▐▞▟▘▚▌▙▀▜▛█'[{2⊥∊⍵}⌺(2 2⍴2)⊢↑{2|≢⍵:⍵,0⋄⍵}' '≠⎕]
                                                   ⎕  take input
                                               ' '≠   convert spaces to 0, 1 otherwise
                                   {2|≢⍵:⍵,0⋄⍵}       if there are an odd number of rows, append a 0 to each column
                                  ⊢↑                  convert to matrix, apply the following:
                          ⌺(2 2⍴2)                    cut the matrix into 2x2 pieces, apply the following to them:
                    {2⊥∊⍵}                            enlist, decode from base 2
' ▗▖▄▝▐▞▟▘▚▌▙▀▜▛█'[                                 ] index those numbers into the box drawing characters
</code></pre>
","80214","","80214","","2020-12-24 11:39:25","2020-12-24 11:39:25","","","","1","","","","CC BY-SA 4.0"
"214822","2","","51517","2020-11-06 08:24:23","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>!mdfö¬f≠1hfImB3N
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XzE3Je3wtkNr0h51LjDMSPPMdTL2@///v6GBAQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##ATYAyf9odXNr/23CpytzKCsiIOKGkiAic@KCgSnhuKP/IW1kZsO2wqxm4omgMWhmSW1CM07///8xMDA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify first 100 values</a></p>
<p>Same method as Dennis' CJam answer.</p>
","80214","","","","","2020-11-06 08:24:23","","","","0","","","","CC BY-SA 4.0"
"214827","2","","129925","2020-11-06 11:00:30","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 14 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｌ╷ｒＨ ×⁸；＊∔｝↔↕┼
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjJDJXUyNTc3JXVGRjUyJXVGRjI4JTIwJUQ3JXUyMDc4JXVGRjFCJXVGRjBBJXUyMjE0JXVGRjVEJXUyMTk0JXUyMTk1JXUyNTND,i=QUJDRA__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<h2>Explanation</h2>
<pre><code>L|rH ×⁸;*∔}↔↕┼
L              length of input
 |r            decrement, make range [0..n-1]
   H           create an empty art object, start a loop with i
     ×         repeat space i times
      ⁸;       swap with the input
        *      join input with i spaces
         ∔     add to the bottom of the previous iteration
          }    close the loop
           ↔↕  mirror horizontally and vertically
             ┼ quad palindromize with 1 character overlap
</code></pre>
","80214","","80214","","2020-11-06 14:08:05","2020-11-06 14:08:05","","","","1","","","","CC BY-SA 4.0"
"214833","2","","131691","2020-11-06 12:32:23","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ç∞§δo╧╖s►M
</code></pre>
<p><a href=""https://staxlang.xyz/#p=80ec15eb6fcfb773104d&amp;i=200"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-11-06 12:32:23","","","","0","","","","CC BY-SA 4.0"
"214836","2","","40104","2020-11-06 15:24:53","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 23 bytes</h1>
<pre><code>´Ṫȯ!&quot;□ &quot;¬nmḋ†%2mB3ŀ`^3←
</code></pre>
<p><a href=""https://tio.run/##AS8A0P9odXNr///CtOG5qsivISLilqEgIsKsbm3huIvigKAlMm1CM8WAYF4z4oaQ////NQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Translation of Jonathan Allan's program.</p>
<p>uses the '□' character.</p>
","80214","","","","","2020-11-06 15:24:53","","","","0","","","","CC BY-SA 4.0"
"214837","2","","38582","2020-11-06 15:35:12","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 54 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｈ┐“)4╪xω╷┘IＱ+aｚQ┴¾４＊↔⌐∔v│↶++z2；ｅ＼１ｐ9H+m}`1Ｌ²‟19┤ｎ；８３╋╋
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjI4JXUyNTEwJXUyMDFDJTI5NCV1MjU2QXgldTAzQzkldTI1NzcldTI1MThJJXVGRjMxK2EldUZGNUFRJXUyNTM0JUJFJXVGRjE0JXVGRjBBJXUyMTk0JXUyMzEwJXUyMjE0diV1MjUwMiV1MjFCNisrejIldUZGMUIldUZGNDUldUZGM0MldUZGMTEldUZGNTA5SCttJTdEJTYwMSV1RkYyQyVCMiV1MjAxRjE5JXUyNTI0JXVGRjRFJXVGRjFCJXVGRjE4JXVGRjEzJXUyNTRCJXUyNTRC,i=Mw__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2020-11-06 15:35:12","","","","0","","","","CC BY-SA 4.0"
"214839","2","","46821","2020-11-06 15:58:23","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 41 bytes</h1>
<pre><code>!→⁰¡(↔§z+ömR' h∫mLtΘ`:&quot;x&quot;ṁȯe&quot;x&quot;Ṙ3f≠' );&quot;x
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/FR26RHjRsOLdR41Dbl0PIq7cPbcoPUFTIedazO9Sk5NyPBSqlC6eHOxhPrU8GMGcZpjzoXqCtoWitV/P//3xgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Creates an infinite list of graphs and indexes into them, cause why not.</p>
","80214","","","","","2020-11-06 15:58:23","","","","0","","","","CC BY-SA 4.0"
"214845","2","","133907","2020-11-06 16:52:35","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>ωoṁ?I↓2εg
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//3xn/sOdjfaej9omG53bmv7///9oAx0QNNQx0jEBQiMgy1DHIBYA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>A bit shorter than Zgarb's existing answer.</p>
<h2>Explanation</h2>
<pre><code>ωoṁ?I↓2εg
ωo        apply the following till a fixed point:
        g group adjacent values
   ?   ε  if the group is a singleton list
    I     leave as is 
     ↓2   otherwise drop 2 elements
  ṁ       concatenate the results of that
</code></pre>
","80214","","","","","2020-11-06 16:52:35","","","","0","","","","CC BY-SA 4.0"
"214850","2","","214846","2020-11-06 17:19:19","","5","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 12 bytes</h1>
<pre><code>LUṠ-U¡λṁ^L¹d
</code></pre>
<p><a href=""https://tio.run/##AR8A4P9odXNr//9MVeG5oC1VwqHOu@G5gV5Mwrlk////MTM4"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Found a better way to do it by removing the longest unique prefix from the infinite list, and taking the longest unique prefix of that.</p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>▼mLUmUṫ¡λṁ^L¹d
</code></pre>
<p><a href=""https://tio.run/##ASMA3P9odXNr///ilrxtTFVtVeG5q8KhzrvhuYFeTMK5ZP///zEzOA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Basically, we make an infinite list of infinite lists in order to find which one contains the required cycle. Then we take the length of the cycle.</p>
<h2>Explanation</h2>
<pre><code>▼mLUmUṫ¡λṁ^L¹d
       ¡λ      apply the following to get an infinite list
             d take the digits
          ^L¹  the the power of their length
         ṁ     sum them
      ṫ        get the postfixes of the list
    mU         get the logest unique prefix of each postfix
   U           get the longest unique prefix of that
 mL            Map each cycle to it's lenght
▼              take the minimum  
</code></pre>
","80214","","80214","","2020-11-07 03:01:21","2020-11-07 03:01:21","","","","0","","","","CC BY-SA 4.0"
"214878","2","","130064","2020-11-07 03:49:55","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 38 bytes</h1>
<pre><code>!!¡(S+o↔↑2Fz+§,ȯΘΘ←(moΣ↑_3ḣ→)↑_2)eḋ1ḋ7
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X1Hx0EKNYO38R21THrVNNHKr0j60XOfE@nMzzs141DZBIzf/3GKgeLzxwx1AepImiG2kmfpwR7chEJv////f8L8hAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Displays the infinite list, but somehow indexing into the list makes it time out.</p>
","80214","","","","","2020-11-07 03:49:55","","","","0","","","","CC BY-SA 4.0"
"214879","2","","129458","2020-11-07 04:08:42","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>!!¡ȯSż+oΘ↔mΣT;;1
</code></pre>
<p><a href=""https://tio.run/##ASMA3P9odXNr//8hIcKhyK9Txbwrb86Y4oaUbc6jVDs7Mf///zP/Mg"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same idea as Dennis' answer, but simpler indexing method.</p>
","80214","","","","","2020-11-07 04:08:42","","","","0","","","","CC BY-SA 4.0"
"214880","2","","99685","2020-11-07 04:46:39","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 7 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｈ＼１３²×╋
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjI4JXVGRjNDJXVGRjExJXVGRjEzJUIyJUQ3JXUyNTRC,i=JTVCJTIycHJvZ3JhbW1pbmclMjIlMkMlMjJwdXp6bGVzJTIyJTJDJTIyYW5kJTIyJTJDJTIyY29kZSUyMiUyQyUyMmdvbGYlMjIlNUQ_,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2020-11-07 04:46:39","","","","0","","","","CC BY-SA 4.0"
"214881","2","","69127","2020-11-07 07:40:08","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 31 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>５ｎ｛±｛┐Ｚ｛²≡］∑］２┴╵（Ｚ◂［］６＠）∑＠］⤢╶；＋
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjE1JXVGRjRFJXVGRjVCJUIxJXVGRjVCJXUyNTEwJXVGRjNBJXVGRjVCJUIyJXUyMjYxJXVGRjNEJXUyMjExJXVGRjNEJXVGRjEyJXUyNTM0JXUyNTc1JXVGRjA4JXVGRjNBJXUyNUMyJXVGRjNCJXVGRjNEJXVGRjE2JXVGRjIwJXVGRjA5JXUyMjExJXVGRjIwJXVGRjNEJXUyOTIyJXUyNTc2JXVGRjFCJXVGRjBC,i=YTBSRTAwMDAwMElKbWNO,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2020-11-07 07:40:08","","","","0","","","","CC BY-SA 4.0"
"214883","2","","41702","2020-11-07 08:42:52","","1","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 65 bytes, no bonuses</h1>

<pre class=""lang-apl prettyprint-override""><code>P5.size←2⌿600
P5.draw←{P5.LM.p:P5.G.ln P5.mx P5.my P5.pmx P5.pmy}
</code></pre>
<p>A straightforward port of the existing processing answer.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>P5.size←2⌿600                                        set canvas to 600x600 pixels
P5.draw←{                                         } do the following every frame:
P5.draw←{P5.LM.p:                                 } if the mouse is held down:
                 P5.G.ln                            draw a line from
                         P5.mx P5.my                current mouse position
                                     P5.pmx P5.pmy  to previous mouse position
</code></pre>
","80214","","","","","2020-11-07 08:42:52","","","","3","","","","CC BY-SA 4.0"
"214889","2","","37922","2020-11-07 11:11:44","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 54 bytes</h1>
<pre><code>mȯ¶↔T' §zoFz:,mömR' ∫Ẋo±+:_1†o!&quot;/¦&quot;&gt;0uf(Λ≥0∫)†?I←IPṘḋ2
</code></pre>
<p><a href=""https://tio.run/##AVsApP9odXNr//9tyK/CtuKGlFQnIMKnem9GejosbcO2bVInIOKIq@G6im/CsSs6XzHigKBvISIvwqYiPjB1ZijOm@KJpTDiiKsp4oCgP0nihpBJUOG5mOG4izL///80"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Does surprisingly well in this challenge.</p>
<h2>Explanation</h2>
<p><code>ḋ2</code> array [0,1]</p>
<p><code>Ṙ</code> repeat each <span class=""math-container"">\$n\$</span> times : <code>3 → [1,1,1,0,0,0]</code></p>
<p><code>†?I←I</code> decrement the zeroes</p>
<p><code>f(Λ≥0∫)</code> filter out the non-ranges using cumulative sum</p>
<p><code>u</code> uniquify</p>
<p><code>§zoFz:,</code> apply the following two functions a &amp; b to the above result and zip them together</p>
<p><code>mömR' ∫Ẋo±+:_1</code> Function a: convert unequal pairs to 0's and create the required amount of spaces</p>
<p><code>†o!&quot;/¦&quot;&gt;0</code> Function b: convert 1 to / and -1 to \</p>
<p>These are now joined to create the mountains.</p>
<p><code>  ↔T'</code> Transpose each mountain, filling with spaces then reverse</p>
<p><code>mȯ¶  </code> join with newlines</p>
<p>Each mountain is then auto-displayed with newlines.</p>
","80214","","","","","2020-11-07 11:11:44","","","","0","","","","CC BY-SA 4.0"
"214901","2","","135323","2020-11-08 06:24:13","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 9 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｈ２┬！0∙ ╋∔
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjI4JXVGRjEyJXUyNTJDJXVGRjAxMCV1MjIxOSUyMCV1MjU0QiV1MjIxNA__,i=JTVCMTQlMkM0JTJDNiUyQzIlNUQ_,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<p>Uses 1 as the display character.</p>
","80214","","","","","2020-11-08 06:24:13","","","","0","","","","CC BY-SA 4.0"
"214903","2","","174293","2020-11-08 10:11:52","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>Λo≠4Ṡ€oPOQ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zs/EedC0we7lzwqGlNfoB/4P///6ONdIx1DGMB"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same idea as Kevin Cruijssen's answer.</p>
","80214","","","","","2020-11-08 10:11:52","","","","0","","","","CC BY-SA 4.0"
"214905","2","","3815","2020-11-08 11:02:25","","2","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, <s><sup>58</sup></s> 53 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: P 0 ?do 1 i for dup . i * j i - 1+ / next cr loop ;
</code></pre>
<p><a href=""https://tio.run/##FYjLDYAgFMBW6VmDwlUPrsAOIn5ifIRg4vZPuLRNo@RymD02qU54LEsQHCd1Et7EULvjqjS4npFn@wpr5hZJzOosXn8"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>This is a heavily shortened version of the implementation <a href=""https://rosettacode.org/wiki/Pascal%27s_triangle#C"" rel=""nofollow noreferrer"">here,</a> which was in turn, translated from C.</p>
<p>-5 bytes from Bubbler.</p>
<p>The function is called like: <code>&lt;input&gt; P</code>.</p>
","80214","","80214","","2020-11-09 09:15:20","2020-11-09 09:15:20","","","","1","","","","CC BY-SA 4.0"
"214907","2","","209020","2020-11-08 12:40:43","","1","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, <sup><s>97</s></sup> 89 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: e emit ; : b space dup 0 ?do 95 e loop cr 47 e dup spaces 92 e cr 124 e spaces 124 e ; 
</code></pre>
<p><a href=""https://tio.run/##LYpLDoAgEEOv0guYKMEYYOFZ5KcmmiGg5x9RXLV9r5HytXVrfINZIyCc@wUDDYuSFhfg74QesyeosfqDKMFlyAnNfa8CJequfBCylh@2YcASlh8"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>-8 bytes from Bubbler.</p>
<p><s>Forth goes into infinite loops when given 0 for a <code>do loop</code>, since every loop must run atleast once. So a for loop with an if statement is used. </s> Otherwise, this function is pretty straightforward.</p>
","80214","","80214","","2020-11-09 09:08:19","2020-11-09 09:08:19","","","","1","","","","CC BY-SA 4.0"
"214908","2","","51471","2020-11-08 12:46:58","","3","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, <sup><s>32</s></sup> 31 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: b type cr 1- spaces 94 emit ;
</code></pre>
<p><a href=""https://tio.run/##FckxDoAgDAXQq/wwi4mJDuoVvARoURIIpMXB01ed3vBC4XbZM/yoLvBoTyXsjMFCqttJMI@gHBtWnSAGW2HKiFXu3OEoKTmGfO0ytd7A6ws"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>Input is given as <code>&lt;number&gt;  s&quot; &lt;string&gt;&quot; b</code>.</p>
<p>Note the required space after <code>s&quot;</code>.</p>
<p>-1 byte from Bubbler.</p>
<p>Shorter than MAWP lol</p>
","80214","","80214","","2020-11-08 12:52:51","2020-11-08 12:52:51","","","","1","","","","CC BY-SA 4.0"
"214911","2","","70615","2020-11-08 13:33:13","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>!¡ödOdS+↔1
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/HQwsPbUvxTgrUftU0x/P//vwUA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>1-indexed.</p>
","80214","","","","","2020-11-08 13:33:13","","","","0","","","","CC BY-SA 4.0"
"214912","2","","91725","2020-11-08 13:41:48","","2","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, 55 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: b 1- dup for dup 2 mod if 92 else 47 then emit next ;
</code></pre>
<p><a href=""https://tio.run/##JctBCoAgEEbhfaf4L@BCC6K6TTmmkBo2QbefzFYfPHguF/Zqdx8iM1ZoBXufqKVpELNFcJgM6LgIwwj2lEAxMBI9jEV0/bbSmZ@@IS8"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>called as <code>&lt;number&gt; b</code>.</p>
","80214","","","","","2020-11-08 13:41:48","","","","0","","","","CC BY-SA 4.0"
"214921","2","","214846","2020-11-08 17:45:11","","3","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, <sup><s>30</s></sup> 29 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{1⊃⍸⌽(⊢/=⊢){+/(⊢*≢)10⊤⍵}⍡⍵⊢⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pSszMTfz/qG@qp/@jtgkG/9OAZLXho67mR707HvXs1XjUtUjfFkhoVmvrgzhajzoXaRoaPOpa8qh3a@2j3oVACigM4oBMAepOUzC1/A8A"" rel=""nofollow noreferrer"" title=""APL (dzaima/APL) – Try It Online"">Try it online!</a></p>
<p>-1 byte using <code>⎕IO←0</code>.</p>
<p>Since the length of the cycle never exceeds <span class=""math-container"">\$n\$</span>, we can loop n times instead of finding a fixed point, then calculate the length of the cycle.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⊃⍸1↓⌽(⊢/=⊢){+/(⊢*≢)10⊤⍵}⍡⍵⊢⍵}
                          ⊢⍵  input integer n
            {          }⍡⍵    apply the following n times, collecting intermediate results:
                    10⊤⍵       get base 10 digits
                (⊢*≢)          raise to the power of length
             +/                and sum
      (⊢/=⊢)                  bit mask of the locations of the last element
   1↓⌽                        reverse and remove first 1
 ⊃⍸                           first index of the last element
</code></pre>
","80214","","80214","","2020-11-09 09:54:07","2020-11-09 09:54:07","","","","0","","","","CC BY-SA 4.0"
"214937","2","","136592","2020-11-09 13:40:26","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>mḋTmOT0mo↔ḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/fhju6QXP8Qg9z8R21TgJz///9HG@mY6VjqmMQCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-09 13:40:26","","","","0","","","","CC BY-SA 4.0"
"214939","2","","128659","2020-11-09 13:59:04","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>Λṗ§zoṁdeohḣotṫd
</code></pre>
<p><a href=""https://tio.run/##AScA2P9odXNr///Om@G5l8Knem/huYFkZW9o4bijb3Thuatk////NDA0Mjc"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-09 13:59:04","","","","0","","","","CC BY-SA 4.0"
"214940","2","","118072","2020-11-09 14:10:06","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 6 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>┬$τ▀Ω♀
</code></pre>
<p><a href=""https://staxlang.xyz/#p=c224e7dfea0c&amp;i=3"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>I'm not sure why 3 golflangs have an Euler Totient function, but I guess it's convenient for these challenges.</p>
<p>0 for reachable and 1 for non-reachable.</p>
","80214","","","","","2020-11-09 14:10:06","","","","0","","","","CC BY-SA 4.0"
"214941","2","","145699","2020-11-09 14:20:22","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>Λ§&lt;→oAhḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zsQ8ttHrVNynfMeLhj8f///6MNdUx0jHUsdMxiAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-09 14:20:22","","","","0","","","","CC BY-SA 4.0"
"214946","2","","35789","2020-11-09 17:01:01","","0","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 66 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>i←P5.img p
P5.size←2⍴a←⌊/s←i.sz
P5.draw←{i P5.G.img⍨.5×a-s⋄i.save}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pSszMTfz/P/NR24QAU73M3HSFAi4gozizKhUoZPSod0sikH7U06VfDKQz9YqrQNIpRYnlQG51pgKQ4w7S9qh3hZ7p4emJusWPuluAyhLLUmv//wcA"" rel=""nofollow noreferrer"" title=""APL (dzaima/APL) – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-09 17:01:01","","","","0","","","","CC BY-SA 4.0"
"214947","2","","141172","2020-11-09 17:28:34","","1","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 18 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>+/{⍵×0⌈2.1-⍨≢⊤⍵}¨⎕
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97b@2fvWj3q2Hpxs86ukw0jPUfdS74lHnokddS4CitYdWPOqbClL3P40LyPIK9vdTUI820MELY9UB"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97b@2fvWj3q2Hpxs86ukw0jPUfdS74lHnokddS4CitYdWPOqbClL3P40LyPIK9vdTUI820MELY9W5kFUb6ZjogDCENNJB46OpNtHBC9FUQ2w0gdpsAaUNzcDWGOgYGZhYYLgGJAsU1zExsDQDajUGihgYmehYGFoaAU0wM9ExNQQpMrYwASk1NLLQMTI1AyozN0M3ywKo3gRuOwSCLAYbb2ZqamwWqw4A"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Verify all test cases</a></p>
<p>Full program submission.</p>
<p>Port of the Python answer.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>+/{⍵×0⌈2.1-⍨≢⊤⍵}¨⎕
                ¨⎕ to each element of the input:
              ⊤⍵   convert to base 2 digits
       2.1-⍨≢      length - 2.1
     0⌈            maximum with 0
   ⍵×              times the element
+/                 sum the resulting array 
</code></pre>
","80214","","","","","2020-11-09 17:28:34","","","","0","","","","CC BY-SA 4.0"
"214961","2","","214750","2020-11-10 03:56:36","","3","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, 49 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: b drop 1+ 8 ['] evaluate 2 base-execute 127 - ;
</code></pre>
<p><a href=""https://tio.run/##S8svKsnQTU8DUf//WykkKaQU5RcoGGorWChEq8cqpJYl5pQmlqQqGCkkJRan6qZWpCaXArmGRuYKugrW/4uVFAwMDIEARIBYGNhQCWio3n8A"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>Done using (a lot of) Bubbler's help.</p>
<p>Forth has one(1) convenient command that allows interpretation of strings as binary, and that's used here(<code>base-execute</code>).</p>
","80214","","","","","2020-11-10 03:56:36","","","","0","","","","CC BY-SA 4.0"
"214963","2","","152552","2020-11-10 04:38:40","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 6 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>øＺ［∔｝ｒ
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JUY4JXVGRjNBJXVGRjNCJXUyMjE0JXVGRjVEJXVGRjUy,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2020-11-10 04:38:40","","","","0","","","","CC BY-SA 4.0"
"214964","2","","117646","2020-11-10 05:04:13","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>►LOfoS=uΣṖ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9G0XT7@afnBtqXnFj/cOe3////R0QY6hrE6QNIISBrqGINJEyBpBGYbg9nGOqZA0lTHLDYWAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-10 05:04:13","","","","0","","","","CC BY-SA 4.0"
"214966","2","","168427","2020-11-10 08:06:37","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>L►Lġ≈Ou
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3@fRtF0@RxY@6uzwL/3//39SYnJ2Sn5@EQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>First time I've used <code>simil(≈)</code>, and it works really well!</p>
<h2>Explanation</h2>
<pre><code>L►Lġ≈Ou 
     Ou order and deduplicate
   ġ≈   group by absolute difference ≤ 1
 ►L     max by length
L       take the length of that
</code></pre>
","80214","","","","","2020-11-10 08:06:37","","","","0","","","","CC BY-SA 4.0"
"214968","2","","151023","2020-11-10 08:29:42","","1","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, <sup><s>55 53</s></sup> 46 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: f 90 65 do i i 1+ i emit emit emit cr loop ;
</code></pre>
<p><a href=""https://tio.run/##S8svKsnQTU8DUf//WymkKVgaKJiZKqTkK2QCoaE2kEjNzSxBIpKLFHLy8wsUrP@n/QcA"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>-6 bytes from bubbler.</p>
<p>a simple loop.</p>
","80214","","80214","","2020-11-10 08:42:47","2020-11-10 08:42:47","","","","1","","","","CC BY-SA 4.0"
"214969","2","","186548","2020-11-10 09:08:25","","0","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, 72 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: f dup 0 ?do i spaces 92 emit cr loop 1- for i spaces 47 emit cr next ;
</code></pre>
<p><a href=""https://tio.run/##S8svKsnQTU8DUf//WymkKaSUFigYKNin5CtkKhQXJCanFitYGimk5maWKCQXKeTk5xcoGOoqADUg5E3M4fJ5qRUlCtb/jQwU0v4DAA"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>there's probably a better way to do this.</p>
","80214","","","","","2020-11-10 09:08:25","","","","0","","","","CC BY-SA 4.0"
"214973","2","","12177","2020-11-10 09:58:37","","2","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, 71 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: f begin dup 2 mod if 3 * 1+ else 2/ then dup dup 1 = until depth 1- ;
</code></pre>
<p><a href=""https://tio.run/##JYw7CoAwFMCuklmp0joIipeRvn7AH9qev1ocQpYQd94pKO@qSplwrOLjgc0Xhv20RMdAg26R7RFMTwryBxXNQj5S3LBypYBWzGX8Pl15AQ"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>Uses an <code>until</code> loop, and computes stack depth -1.</p>
<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, 76 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: f dup dup 1 = if 0 else 2 mod if 3 * 1+ else 2/ then dup recurse 1+ then ;
</code></pre>
<p><a href=""https://tio.run/##S8svKsnQTU8DUf//WymkKaSUFoCxoYKtQmaagoFCak5xqoKRQm5@CohvrKClYKgNFdRXKMlIzQMrL0pNLi0CigHlwGLW/42AhukpJBdxGZrBWKYwhjmU8R8A"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>A recursive function.</p>
","80214","","","","","2020-11-10 09:58:37","","","","0","","","","CC BY-SA 4.0"
"214974","2","","61808","2020-11-10 10:06:58","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 2 bytes</h1>
<pre><code>ü&lt;
</code></pre>
<p><a href=""https://tio.run/##yygtzv6fm1/8qKnx/@E9Nv///4@ONtQx0jHVMdEx1jGP1Yk2NNDRNdQxNAIydc11dC10dE11IEJAEUsdCx1zHTMd09hYAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>nub sieve using lesser than.</p>
","80214","","","","","2020-11-10 10:06:58","","","","0","","","","CC BY-SA 4.0"
"214976","2","","147469","2020-11-10 10:43:36","","0","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, 49 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: f 26. do i dup for dup 97 + emit next cr loop ;
</code></pre>
<p><a href=""https://tio.run/##S8svKsnQTU8DUf//WymkKRiZ6Smk5CtkKqSUFigAxcG0pbmCtkJqbmaJQl5qRYlCcpFCTn5@gYL1/7T/AA"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-10 10:43:36","","","","0","","","","CC BY-SA 4.0"
"214986","2","","214981","2020-11-10 13:15:32","","10","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>15 14 13</s></sup> 9 bytes</h1>
<pre><code>§,▼▲f←ṁP*
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9BynUfT9jyatintUduEhzsbA7T@//8fbahjpGMc@z/aUgfIigUA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Takes two input arrays, outputs pair <code>(min,max)</code>.</p>
<p>-1 byte from Dominic Van Essen.</p>
<p>-1 more byte from Dominic Van Essen (after some more struggling).</p>
<p>-4 bytes taking arrays of digits as input.</p>
<h2>Explanation</h2>
<pre><code>§,▼▲f←ṁP*
        * cartesian product pairs of the inputs
      ṁP  map each to permuations, and flatten the list
    f←    remove elements where first digit is falsy(&lt;10)
§,        create pair with
  ▼▲      minimum and maximum
</code></pre>
","80214","","66833","","2020-12-06 04:01:14","2020-12-06 04:01:14","","","","2","","","","CC BY-SA 4.0"
"214987","2","","47657","2020-11-10 13:36:29","","1","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, 40 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: f 1+ 1 do i 1+ 1 do i . loop cr loop ;
</code></pre>
<p><a href=""https://tio.run/##S8svKsnQTU8DUf//WymkKRhqKxgqpOQrZCKx9BRy8vMLFJKLILT1f1OFtP8A"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-10 13:36:29","","","","0","","","","CC BY-SA 4.0"
"215003","2","","139632","2020-11-10 15:23:12","","0","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, 53 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: f 1- 26. do dup i min spaces i 97 + emit cr loop ; 
</code></pre>
<p><a href=""https://tio.run/##FcdRCoAgEEDBq7z/MCiiqE4T2paQKWrn3@prGIm5nuaQH9UFoTP0Y4uLuCfhCf6mpM3u5cs80bAHX7GZK8bEig6Ivg"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>Pretty standard answer.</p>
","80214","","","","","2020-11-10 15:23:12","","","","0","","","","CC BY-SA 4.0"
"215005","2","","117774","2020-11-10 15:30:13","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>mo▼`-¹
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Pzf/0bQ9CbqHdv7//z/aRMdYx0jHNBYA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-10 15:30:13","","","","0","","","","CC BY-SA 4.0"
"215009","2","","85212","2020-11-10 15:49:30","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>!ṁödΣhḊN
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/HhzsbD21LOLc54uKPL7////4amAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-11-10 16:25:40","2020-11-10 16:25:40","","","","0","","","","CC BY-SA 4.0"
"215013","2","","87307","2020-11-10 16:40:27","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 20 bytes</h1>
<pre><code>!¡λ◄(L←SnmDṫ:⁰)ḣ2);1
</code></pre>
<p><a href=""https://tio.run/##ASsA1P9odXNr//8hwqHOu@KXhChM4oaQU25tROG5qzrigbAp4bijMik7Mf///zIw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##AS0A0v9odXNr///ihpHCoc674peEKEzihpBTbm1E4bmrOuKBsCnhuKMyKTsx////MjA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify first 20 values</a></p>
<p>Same algorithm as Leaky Nun's answers.</p>
","80214","","","","","2020-11-10 16:40:27","","","","0","","","","CC BY-SA 4.0"
"215014","2","","174907","2020-11-10 16:53:39","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>£İf←LU¡λ≠⁰→↑≤⁰İf
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9DiIxvSHrVN8Ak9tPDc7kedCx41bnjUNulR28RHnUuAbKDs////DY0tAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-10 16:53:39","","","","0","","","","CC BY-SA 4.0"
"215041","2","","111247","2020-11-11 04:02:47","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>!z↑+ḋ3İ2Tmod↔İ5
</code></pre>
<p><a href=""https://tio.run/##ASEA3v9odXNr//8heuKGkSvhuIszxLAyVG1vZOKGlMSwNf///zM"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##AToAxf9odXNr/23CpysoYCsiIOKGkiAicykoc@KCgSnhuKMxMP8heuKGkSvhuIszxLAyVG1vZOKGlMSwNf//"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify first 10 values</a></p>
<h2>Explanation</h2>
<pre><code>!z↑+ḋ3İ2Tmod↔İ5
             İ5 list of powers of 5
         mod↔   reverse each and convert to digits
        T       transpose to get repeating columns
 z↑             zip with take using:
   +ḋ3İ2        powers of 2 with [1,1] added
!               return the nth element
</code></pre>
","80214","","","","","2020-11-11 04:02:47","","","","0","","","","CC BY-SA 4.0"
"215042","2","","215031","2020-11-11 04:25:31","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 24 bytes</h1>
<pre><code>mṠ+(R' ≠▲m₂¹₂
?€'.o→L€'.
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/qKnx0Lb/uQ93LtDWCFJXeNS54NG0TbmPmpoO7QQSXPaPmtao6@U/apvkA2b9///f0kLPjEvFSMfc1EDP0JxLV8XImEvXwozLWMfQyEDHxMJcz9ASAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Now corrected.</p>
<h2>Explanation</h2>
<pre><code>Function ₂: location of dot in string if exists, else length - 1
?€'.o→L€'.

Main function:
mṠ+(R' ≠▲m₂¹₂
m             map each string to the following:
            ₂ take current dot position
        ▲m₂¹  take the highest dot position
       ≠      and take absolute difference with it 
    R'        repeat space that many times  
 Ṡ+(          prepend this to the string
</code></pre>
","80214","","80214","","2020-11-11 14:19:30","2020-11-11 14:19:30","","","","0","","","","CC BY-SA 4.0"
"215047","2","","51402","2020-11-11 06:53:38","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog 18.0)</a>, 66 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍺&lt;Ö≢⍵:⍺∇⎕←0~⍨0@(⊃(⍸~p)~⍳⊃⌽⍸p←⍵=⍺↑⍨≢⍵)⊢⍵⋄j←⊃⍸⍺≠⍵⋄⍺≢⍵:⍺∇⎕←⍺[j]@j⊢⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT/9/eNqjtgnVGo96twKRwqPeXZpADEQIka2atf@rgSI2QKWdi4B8K5CKjvZHfVOBWg3qHvWuMHDQeNTVDNSyo65AEyiwGch71LMXyC8AKgFqsQVpaZsIVAoxQvNRF4h61N2SBVIAVN27A6SkcwFEFMzGsAvIjs6KdciCaK79nwYW6wNrX/Ood8uh9cYgS/qmBgc5A8kQD8/g/@qOTs4urm7qCmkKUGaEOhfEOHV1LjTZCBAbSdY5PyU1PT8nDSwfUJSfXpSYm5uZl45iQl5xeWpRMVhJYGlqcUlmfl6xOgA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Works correctly now.</p>
<p>A recursive function submission, done with a lot of input from Adám and Bubbler.</p>
<p>Input is taken as <code>&lt;s2&gt; f &lt;s1&gt;</code>.</p>
<h2>Explanation</h2>
<p><code>⍺&lt;⍥≢⍵:</code> if the strings have different lengths:</p>
<p><code>0@(...)⊢⍵</code> put a zero at the following index:</p>
<p><code>⊃</code> first element of:</p>
<p><code>(⍸~p)</code> characters which do not match</p>
<p><code>~</code> without</p>
<p><code>⍳⊃⌽⍸p←⍵=⍺↑⍨≢⍵</code> all indices before last character match</p>
<p><code>0~⍨</code> remove the zero(thereby removing the element)</p>
<p><code>⍺∇⎕←</code> display the result and recurse</p>
<p><code>⋄⍺≢⍵:</code> Otherwise, till the strings match:</p>
<p><code>i←⊃⍸⍺≠⍵</code> find first non-matching element</p>
<p><code>⍺[i]@i⊢⍵</code> and replace the element at that index</p>
<p><code>⍺∇⎕←</code> display the result, and recurse</p>
","80214","","80214","","2020-11-11 08:51:50","2020-11-11 08:51:50","","","","0","","","","CC BY-SA 4.0"
"215059","2","","210321","2020-11-11 09:35:34","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>ummdf(=d¹Σ)ṖQd
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/vzQ3NyVNwzbl0M5zizUf7pwWmPL//39DA0MA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-11-11 09:49:09","2020-11-11 09:49:09","","","","2","","","","CC BY-SA 4.0"
"215060","2","","120796","2020-11-11 10:02:52","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>J'+ms:1İ½
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/30tdO7fYyvDIhkN7//8HAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>due to a lack of a 0 term, 1 is manually prepended.</p>
","80214","","","","","2020-11-11 10:02:52","","","","0","","","","CC BY-SA 4.0"
"215061","2","","182221","2020-11-11 10:06:26","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>ΩS=Oo←½
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zKYFv//EdtEw7t/f//f7ShjpGOsY6JjnEsAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>removes last half.</p>
","80214","","","","","2020-11-11 10:06:26","","","","0","","","","CC BY-SA 4.0"
"215064","2","","173422","2020-11-11 11:24:11","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>←→kΣw
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbhEdtk7LPLS7/////h/m9axTeL98IQQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>First time using <code>key-by</code>. Pretty fitting here.</p>
<h2>Explanation</h2>
<pre><code>←→kΣw
      w split into words
    k   key on
     Σ  sum of codepoints
 →     take the last(maximum) key
←      return the first in the group
</code></pre>
","80214","","80214","","2020-11-11 17:10:22","2020-11-11 17:10:22","","","","1","","","","CC BY-SA 4.0"
"215067","2","","146373","2020-11-11 11:38:35","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>Λ≡gẊo±-
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zsR50L0x/u6so/tFH3////0QY6xjrmOqY6RkDaLBYA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-11 11:38:35","","","","0","","","","CC BY-SA 4.0"
"215097","2","","63084","2020-11-12 02:56:32","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>▲ṁX⁰Σ↑4¡om↔T²
</code></pre>
<p><a href=""https://tio.run/##ATUAyv9odXNr/@KCgcK2/@KWsuG5gVjigbDOo@KGkTTCoW9t4oaUVMKy////Mv85MjgKMzEzCjA0OQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>The arguments are a bit finicky here.</p>
","80214","","","","","2020-11-12 02:56:32","","","","0","","","","CC BY-SA 4.0"
"215098","2","","10878","2020-11-12 03:40:35","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>m→fo√←ġo¬√
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/dR26S0/Ecdsx61TTiyMP/QGiDz////icUpaQpZ2TnW8fFVFclldTYKZUl5uTp6heWpRTUKNaWZ@QUA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>since there's no conditional spliting function, <code>group-by</code> is used. Golflangs with regex are really strong here.</p>
<h2>Explanation</h2>
<pre><code>m→fo√←ġo¬√
      ġo¬√ group on nonalphabets
  fo√←     filter out nonalphabets
m→         map to last character
</code></pre>
","80214","","","","","2020-11-12 03:40:35","","","","2","","","","CC BY-SA 4.0"
"215100","2","","175978","2020-11-12 04:27:32","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>↔Öö↔Oda
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HblMPTDm8DUv4pif///482NDLWMTG30NG1NDDRMTMyBzINdHTNjXUsTCwNdYwNjQx0zExMgfLm5sYWOsbmxrEA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-12 04:27:32","","","","0","","","","CC BY-SA 4.0"
"215103","2","","1198","2020-11-12 06:40:01","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>45</s></sup> 42 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>' .'':'[4 4⊤{×≢⍵:⍎¨⍵~':'⋄,⍉0 10⊤3↑3↓⎕TS}⍞]
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qp/@jtgkGXI862tP@qyvoqatbqUebKJg86lpSfXj6o85Fj3q3Wj3q7Tu0AsioA0o@6m7RedTbaaBgaABUY/yobSIQTwYaFBJc@6h3Xux/oEn/07gMza1MLa2MgAb3TQVaoK7OlcZlYGhlYGFlYIgsxgUA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A full program submission.</p>
<p>-3 bytes from Bubbler.</p>
<p>Very barely edges out Golfscript (Thanks, Bubbler!).</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>' .'':'[4 4⊤⍎¨{×≢⍵:⍵~':'⋄,⍉ 0 10⊤3↑3↓⎕TS}⍞]
                                        ⍞    string input
              {×≢⍵:                          if length is nonzero:
                   ⍵~':'                     remove ':'s from it
                        ⋄            ⎕TS     otherwise get current time array
                                 3↑3↓        remove yymmdd and take hhmmss
                         ,⍉ 0 10⊤            convert to base 10 digits and transpose, then flatten
                                             (pads with a zero)
            ⍎¨                               convert each character to digit
        4 4⊤                                 encode into base 4 matrix
' .'':'[                                   ] index into string &quot; .':&quot;
</code></pre>
","80214","","80214","","2020-11-12 07:18:31","2020-11-12 07:18:31","","","","0","","","","CC BY-SA 4.0"
"215107","2","","105203","2020-11-12 08:31:53","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>Σz^İf…
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9ziqrgjG9IeNSz7//9/tK6RjlEsAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>Σz^İf…
     … rangify the input
 z^    zip using the power function
   İf  using the fibonacci numbers
Σ      sum the result
</code></pre>
","80214","","","","","2020-11-12 08:31:53","","","","0","","","","CC BY-SA 4.0"
"215113","2","","4106","2020-11-12 10:37:30","","1","","<h1><a href=""https://github.com/Adriandmen/05AB1E"" rel=""nofollow noreferrer"">05AB1E</a>, <sup><s>28</s></sup> 21 bytes</h1>
<pre><code>[že25Qžf12Q&amp;#}”It'sŒÎ
</code></pre>
<p><a href=""https://tio.run/##yy9OTMpM/f8/@ui@VCPTwKP70gyNAtWUax81zPUsUS8@Oulw3///AA"" rel=""nofollow noreferrer"" title=""05AB1E – Try It Online"">Try it online!</a></p>
<p>Noncompeting, I suppose(Beats the other non-competing answer, ha).</p>
<p>My first 05AB1E answer.</p>
<p>-7 bytes from ovs.</p>
<h2>Explanation</h2>
<pre><code>[že25Qžf12Q&amp;#”It'sŒÎ
[                            start an infinite loop
 že                          push current day
   25                        25
     Q                       are they equal?
      žf                     push current month
        12                   12
          Q                  are they equal?
           &amp;                 logical and
            #                break if both conditions are true
             ”It'sŒÎ         push &quot;It's Christmas&quot;
                             implicit output
</code></pre>
","80214","","80214","","2020-11-12 11:12:04","2020-11-12 11:12:04","","","","4","","","","CC BY-SA 4.0"
"215115","2","","4106","2020-11-12 11:38:44","","1","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, 84 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: f begin time&amp;date drop 12 = 0&lt;&gt; swap 25 = 0&lt;&gt; and until s&quot; It's Christmas!&quot; type ;
</code></pre>
<p><a href=""https://tio.run/##Lce9CoAgFAbQV/lyqCmooKW/panHMNQSSsV7I3p6I2g6HOMj7@VmPlLqYLDqzTqwPXWuJGuo6APqBiOqYQLdMqBp/0mncDm2B0hg4YIw79ESn5IyAX6CRp9MegE"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>Yet another stack language. Somehow not the longest answer.</p>
<p>The <code>time&amp;date</code> word is very convenient here.</p>
<p>A stack overflow happens since time&amp;date values are left on stack every iteration.</p>
","80214","","","","","2020-11-12 11:38:44","","","","0","","","","CC BY-SA 4.0"
"215117","2","","23790","2020-11-12 12:11:49","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>↑¡oṁ§eL←g;1
</code></pre>
<p><a href=""https://tio.run/##AR0A4v9odXNr///ihpHCoW/huYHCp2VM4oaQZzsx////Ng"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>1-indexed.</p>
","80214","","80214","","2020-12-22 01:50:19","2020-12-22 01:50:19","","","","0","","","","CC BY-SA 4.0"
"215119","2","","65822","2020-11-12 12:27:14","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>ΩεẊ+↑İp
</code></pre>
<p><a href=""https://tio.run/##ARgA5/9odXNr///Oqc614bqKK@KGkcSwcP///zQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Pretty straighforward.</p>
","80214","","","","","2020-11-12 12:27:14","","","","0","","","","CC BY-SA 4.0"
"215121","2","","70779","2020-11-12 12:52:06","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 2 bytes</h1>
<pre><code>Ö¬
</code></pre>
<p><a href=""https://tio.run/##LY3dDUBQDEZXuSPcP7fsYA4h4knEM0OYwhRsYpE6Gmmanq/t1/bLPOqzb9PQtavex3WqqneVq4lEDa5A2XmUoAucfxLjhp3PIVCCIpGNMk6Bwu8ITIL1vhRUsWlEV7YV7ZKnz78X"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>order by negation.</p>
","80214","","","","","2020-11-12 12:52:06","","","","0","","","","CC BY-SA 4.0"
"215136","2","","215126","2020-11-12 16:56:52","","5","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>22 21 17</s></sup> 16 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>âH«q☻╧Ñ♦├x╓║Nm&quot;°
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8348ae7102cfa504c378d6ba4e6d22f8&amp;i=&amp;a=1"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>-1 byte using a generating block.</p>
<p>-4 bytes using a filter.</p>
<p>-1 byte from wastl.</p>
<p>Outputs infinite list, separated by newlines.</p>
<h2>Explanation (Uncompressed)</h2>
<pre><code>VIf|fY%2=y$eEc%R|}*
VIf                          filter natural numbers, printing truthy values 
                             take current iteration value
    |fY                      store prime factorization in Y(without pop)
       %                     Length   
        2=                   Equals 2?
          y                  Push prime factors again
           $eE               Convert to string, then to digits
              c%             copy and take length
                R            Range [1..length]
                 |}          are they setwise equal?
                   *         multiply the two values
</code></pre>
","80214","","80214","","2020-11-13 08:14:35","2020-11-13 08:14:35","","","","1","","","","CC BY-SA 4.0"
"215157","2","","50020","2020-11-13 03:06:29","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 14 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü♀σJàx╧☺▼∟╓X≥╣
</code></pre>
<p><a href=""https://staxlang.xyz/#p=810ce54a8578cf011f1cd658f2b9&amp;i=&amp;a=1"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-11-13 03:06:29","","","","0","","","","CC BY-SA 4.0"
"215160","2","","172910","2020-11-13 04:22:50","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>#¦3∫d*3
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/nQMuNHHatTtIz///9vaGAIAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same as the other answer, except it uses cumulative sum.</p>
","80214","","","","","2020-11-13 04:22:50","","","","1","","","","CC BY-SA 4.0"
"215162","2","","150235","2020-11-13 04:51:00","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>fȯΛ§=L←gdN
</code></pre>
<p><a href=""https://tio.run/##ASAA3/9odXNr/@KGkeKCgf9myK/Om8KnPUzihpBnZE7///8xMg"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Returns an infinite list. <code>↑</code> is used to show first n elements since it times out.</p>
","80214","","","","","2020-11-13 04:51:00","","","","0","","","","CC BY-SA 4.0"
"215169","2","","50798","2020-11-13 09:09:18","","1","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""nofollow noreferrer"">Forth (gforth)</a>, <s><sup>48</s></sup> 39 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: f 'd /mod over if d&gt;s then 4 mod 0= ;
</code></pre>
<p><a href=""https://tio.run/##S8svKsnQTU8DUf//WymkKainKOjn5qco5JelFilkpimk2BUrlGSk5imYKICEDWwVrP8bWhqbAZXqKSQXcRlaGJjC2ZYGBjC2kZG5EZxtAhf/DwA"" rel=""nofollow noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>Same as Kevin Cruijssen's 05AB1E answer.</p>
<p>-9 bytes from Bubbler.</p>
","80214","","78410","","2020-11-16 04:22:39","2020-11-16 04:22:39","","","","2","","","","CC BY-SA 4.0"
"215171","2","","122343","2020-11-13 10:06:53","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 112 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>a←0
f←⎕UCS 127|⊢
{⍎¨('∆'(≠⊆⊢)'a+←1∆a-←1∆⍞←f a⋄a←0∆⍞←f a∆a←⎕UCS{×≢⍵:⊃⍵⋄⎕UCS 0}i⋄i←1↓i∆a←0')['+-#$%!'⍳⍞]}⍣{a=0}i←⍞
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///P/FR2wQDrjQg@ahvaqhzsIKhkXnNo65FXNWPevsOrdBQf9TRpq7xqHPBo642oLCmeqI2UK0hUDRRF8p41DsPyEpTSHzU3QI2DkUMqBBuePXh6Y86Fz3q3Wr1qKsZSAE1QG01qM0EcjLBJrZNzoTqMlDXjFbX1lVWUVVUf9S7GWhobO2j3sXVibYg9UBTe@f9/8@lTSWgrE0voDx4nDIQlioPL@/Q3WMA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>maps each instruction to a string, then executes it.</p>
<p>Inputs are taken in reverse, output is given in the debug window.</p>
","80214","","","","","2020-11-13 10:06:53","","","","0","","","","CC BY-SA 4.0"
"215182","2","","4793","2020-11-13 14:10:34","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 31 bytes</h1>
<pre><code>*±¹↑→a¹¡oṁ§ṘȯJ' R2←o/3LgR'_`^3a
</code></pre>
<p><a href=""https://tio.run/##AToAxf9odXNr//8qwrHCueKGkeKGkmHCucKhb@G5gcKn4bmYyK9KJyBSMuKGkG8vM0xnUidfYF4zYf///y00"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Doesn't really use the cantor set, just uses a replacement method (and an infinite list).</p>
<p>Now, you may ask: why is an infinite list useful here? Here's an explanation:</p>
<h2>Explanation</h2>
<pre><code>¡oṁ§ṘȯJ' R2←o/3LgR'_`^3a
                       a take abs(n) 
                 R'_`^3 repeat underscore n times(take n=3)
¡o                      iterate on this string, collecting results
                g       group the string into equal runs:
                        [&quot;_________&quot;]
  ṁ                     map each group to the following, and concatenate:
         R2←            repeat the first character twice
      J'                join with spaces
                        &quot;_________&quot; → &quot;_ _&quot;
            o/3L        take length /3 → 3
   §Ṙ                   Repeat each character that many times
                        &quot;___   ___&quot;

Then:
   ↑→a¹ take n+1 elements from the list
*±¹     multiply by sign(n) (reverse if negative)
</code></pre>
","80214","","80214","","2020-11-13 14:16:57","2020-11-13 14:16:57","","","","0","","","","CC BY-SA 4.0"
"215184","2","","205834","2020-11-13 15:15:38","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>ṁS:os#¹u
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxmCr/GLlQztL////X5BfkliSDwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>ṁ§:←osLk=
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxkPLrR61Tcgv9sm2/f//f0F@SWJJPgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-13 15:15:38","","","","0","","","","CC BY-SA 4.0"
"215190","2","","210004","2020-11-13 16:04:13","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 63 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍵∊⍺:1⋄(¯1∊×d)∨1&lt;|+/⍟d←(⊢÷1∘⌽)⍺-⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v/pR79ZHHV2PendZGT7qbtE4tN4QyD08PUXzUccKQ5sabf1HvfNTHrVN0HjUtejwdqDkjEc9ezWB6nWBOmv/pwGlHvX2PepqftS75lHvlkPrjR@1TXzUNzU4yBlIhnh4Bv83NMgyNFAAkkDDFQ6tN80yUEhTMMgy4IJLmBoomBpkGYHETbNMuYByChApkJhZljFUtwlUAQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p><a href=""https://aplcart.info/?q=Is%20ns%20inside%20closed%20pol#"" rel=""nofollow noreferrer"">Taken directly from an APLcart snippet.</a> I'm not awfully sure of what's going on it it, and would be glad if someone could give a better explanation.</p>
<p>Input is taken as complex points.</p>
<p>Takes polygon on the left and point on the right.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⍵∊⍺:1⋄(¯1∊×d)∨1&lt;|+/⍟d←(⊢÷1∘⌽)⍺-⍵}
{⍵∊⍺:1                           } return 1 if point is in list, otherwise:
      ⋄                       ⍺-⍵  subtract the point from each edge
                                   (gives all lines to from vertices to the point)
                       (⊢÷1∘⌽)     divide it by itself rotated by 1
                     d←            save it in d
                    ⍟              take the natural logarithm of each point
                  +/               and sum the vectors
                 |                 take the modulus
                                   (I think this gets the sum of angles)
               1&lt;                  check if 1 is lesser than it
              ∨                    or
       (¯1∊×d)                     any of the points' signums equal (-1,0)
</code></pre>
","80214","","","","","2020-11-13 16:04:13","","","","0","","","","CC BY-SA 4.0"
"215204","2","","77263","2020-11-14 03:10:17","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 22 bytes</h1>
<pre><code>wÖ€₁¹m←ko_←₁
mf§|='_□w
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/v/zwtEdNax41NR7amfuobUJ2fjyQBHK5ctMOLa@xVY9/NG1h@f///0MSs1MVEnNyFNIyi4pLFMrzi1KKFdLyixRSE5MzFHJSS0pSi/SAQKEkI7NYAYgSFUpSi0sA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>The '_' requirement is a bit annoying, otherwise a pretty interesting challenge.</p>
<h2>Explanation</h2>
<pre><code>function ₁: filter nonalphanumerics and split
mf§|='_□w 
        w split on spaces
mf        map and filter each letter in the words by:
       □  is it alphanumeric?
  §|      or:
    ='_   is it an underscore?

main function:
wÖ€₁¹m←ko_←₁
           ₁ format the input
       ko    key the words on:
         _←  first letter, lowercased
     m←      map each to first word
 Ö           order by:
  €₁¹        their index in the formatted input
w            join back with spaces
</code></pre>
","80214","","","","","2020-11-14 03:10:17","","","","0","","","","CC BY-SA 4.0"
"215205","2","","150954","2020-11-14 03:37:31","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 13 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ä╠╗╡♫ñ=╣n╤-±å
</code></pre>
<p><a href=""https://staxlang.xyz/#p=84ccbbb50ea43db96ed12df186&amp;i=10%0A11%0A12%0A13%0A101%0A128%0A313%0A1003%0A7129%0A81128%0A999999%0A9999999&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Rare occurrence where the box drawing characters connect with each other.</p>
","80214","","","","","2020-11-14 03:37:31","","","","0","","","","CC BY-SA 4.0"
"215208","2","","4577","2020-11-14 12:45:16","","2","","<h1><a href=""https://github.com/lmendo/MATL"" rel=""nofollow noreferrer"">MATL</a>, 13 bytes</h1>
<pre><code>UGlYLZp42*cwx
</code></pre>
<p><a href=""https://tio.run/##y00syfn/P9Q9J9InqsDESCu5vOL/f0sA"" rel=""nofollow noreferrer"" title=""MATL – Try It Online"">Try it online!</a></p>
<p>A clockwise outward spiral which starts from the right.</p>
<h2>Explanation</h2>
<pre><code>    U       % convert char matrix to numeric or to general array / square
    G       % paste from user-input clipboard G
    l       % array of ones
    YL      % Create spiral matrix
    Zp      % is prime / totient function
    42      % number literal
    *       % array product (element-wise, singleton expansion)
    c       % convert to character array
    w       % swap elements in stack
    x       % delete elements
            % (implicit) convert to string and display
</code></pre>
","80214","","","","","2020-11-14 12:45:16","","","","0","","","","CC BY-SA 4.0"
"215211","2","","109001","2020-11-14 13:37:00","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 18 bytes</h1>
<pre><code>!¡λḟ≠→¹f§&lt;!#¹ŀΘ)ḣ3
</code></pre>
<p><a href=""https://tio.run/##ASsA1P9odXNr//8hwqHOu@G4n@KJoOKGksK5ZsKnPCEjwrnFgM6YKeG4ozP///81"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>I decided to spare my soul and do it without combinators, and it's still the same size with them. Fun sequence.</p>
<p><sup><sup>just need to save a single byte...</sup></sup></p>
<h2>Explanation</h2>
<pre><code>!¡λḟ≠→¹f§&lt;!#¹ŀΘ)ḣ3
                ḣ3 start with [1,2,3]
 ¡λ            )   apply the following repeatedly:
             ŀΘ    prepend zero, get range [1..length+1]
                   → [1,2,3,4]
       f§          filter out values where:
           #¹      frequency in sequence     
         &lt;         is not less than
          ! ¹      projected frequency in sequence
                   → [2,3]
   ḟ               find the first element
    ≠→¹            which isnt equal to the most recent element
                   → 2
!                  take the nth element of this infinite list
</code></pre>
","80214","","","","","2020-11-14 13:37:00","","","","0","","","","CC BY-SA 4.0"
"215229","2","","36384","2020-11-15 12:26:56","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 9 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>üwπ┼♦Σjô≤
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8177e3c504e46a93f3&amp;i=5+11%0A9+16%0A9+17%0A157+249%0A2001+2014&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Thought this would be shorter.</p>
","80214","","","","","2020-11-15 12:26:56","","","","0","","","","CC BY-SA 4.0"
"215241","2","","183","2020-11-16 05:45:42","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>îmmW┴√▄○○←
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8c6d6d57c1fbdc09091b&amp;i=%2212131331%22"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>I couldn't find an <code>is-palindrome</code> function. With that this'd probably be much shorter.</p>
","80214","","","","","2020-11-16 05:45:42","","","","0","","","","CC BY-SA 4.0"
"215242","2","","204426","2020-11-16 06:35:13","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 11 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>éôU)¥¼ó8∩╦z
</code></pre>
<p><a href=""https://staxlang.xyz/#p=829355299daca238efcb7a&amp;i=abcdefgabc%0Aaaaaaa%0Aabecdeababcabaa%0Aabadac%0Aabababab&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-11-16 06:35:13","","","","0","","","","CC BY-SA 4.0"
"215243","2","","207178","2020-11-16 07:13:17","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 7 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ôM◙L╞@←
</code></pre>
<p><a href=""https://staxlang.xyz/#p=934d0a4cc6401b&amp;i=123%0AABCDE"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-11-16 07:13:17","","","","0","","","","CC BY-SA 4.0"
"215245","2","","203387","2020-11-16 07:42:28","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 5 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ö¶╫♂.
</code></pre>
<p><a href=""https://staxlang.xyz/#p=9414d70b2e&amp;i=i%0Aate%0Apotato%0Aksboejqfgcrauxpwivtzndlhmy+&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-11-16 07:42:28","","","","0","","","","CC BY-SA 4.0"
"215247","2","","199970","2020-11-16 07:53:49","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>ṁ?sIΛ√ġo¬√
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HORvtiz3OzH3XMOrIw/9AaIP3////oxKRknZTUNJ30jEydrOycWAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-16 07:53:49","","","","0","","","","CC BY-SA 4.0"
"215255","2","","120487","2020-11-16 11:25:36","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 32 bytes</h1>
<pre><code>→L↑o≠⁰Σ¡?oḟo≤⁰ΣṫS:o→→o&gt;⁰Σḟo&gt;⁰ΣḣN
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbJJ9HbRPzH3UueNS44dziQwvt8x/umA/kLwHzH@5cHWyVD1QFRPl2ECGgNIy12O////@GhgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Not that this will <em>not</em> run in 1 minute for n-65536, hence it cannot compete.</p>
<p>However, it can theoretically calculate for any given n.</p>
","80214","","","","","2020-11-16 11:25:36","","","","0","","","","CC BY-SA 4.0"
"215259","2","","118195","2020-11-16 12:49:37","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>→kLk=
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbpGyfbNv///9HG@oY6RgDsWEsAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-16 12:49:37","","","","0","","","","CC BY-SA 4.0"
"215264","2","","64555","2020-11-16 15:03:49","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 34 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ÑE│♂█ⁿt2N╔₧Ñ↓Ls&amp;ûΦ}eóâÇΔ-ë╖»8Kq+╔r
</code></pre>
<p><a href=""https://staxlang.xyz/#p=a545b30bdbfc74324ec99ea5194c732696e87d65a28380ff2d89b7af384b712bc972&amp;i=10%0A21%0A42&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>There's very likely a better way to do this with recursion, but I just can't seem to find anything related to it in the builtin docs. So, this is a manually built implementation.</p>
<p>Takes very, very long after the third test case.</p>
<h2>Explanation (Unpacked)</h2>
<pre><code>z]Yx{c2&gt;{|nBs{y@msz]s|*+c]ys+Yd}{vy@}?F|u
z]                                        array [[]]
  Y                                       write that to register Y
   x{                                 F   for i in [1..input]
     c2&gt;                                  if i &lt; 2,
                                {vy@}     increment and take element at that index from y
        {|n                               otherwise take prime exponents
           Bs                             push the first element and the rest of the array separately
             {  m                         map the rest of the array to:
              y@                          elements in y at those indices
                 sz]s                     push [[]] and first element
                     |*                   repeat it's elements that many times
                       +                  add those together
                        c]ys+Y            and append that to register Y
                              d}          then delete it
                                       |u convert the last element on stack to string
                                          implicit output                                            
</code></pre>
","80214","","80214","","2020-11-16 16:02:40","2020-11-16 16:02:40","","","","0","","","","CC BY-SA 4.0"
"215268","2","","55406","2020-11-16 16:29:09","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>ḟ(=⁰#ṗumdQd)İp
</code></pre>
<p><a href=""https://tio.run/##AR8A4P9odXNr///huJ8oPeKBsCPhuZd1bWRRZCnEsHD///8y"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-16 16:29:09","","","","0","","","","CC BY-SA 4.0"
"215269","2","","77623","2020-11-16 16:38:37","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 18 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>¬∞ÿ╔&gt;÷▀↓☼~î☼ó♀RàEx
</code></pre>
<p><a href=""https://staxlang.xyz/#p=aaec98c93ef6df190f7e8c0fa20c52854578&amp;i=%22252%22%0A%22235%22%0A%2292%22%0A%2231149%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-11-16 16:38:37","","","","0","","","","CC BY-SA 4.0"
"215313","2","","107323","2020-11-17 15:48:16","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 27 bytes</h1>
<pre><code>!¡σ&quot;LUL&quot;s₁₁
¨Ønø LULÄdİ'møo
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/HQwvPNSj6hPkrFj5oagYjr0IrDM/IO71AAih1uSTmyQT338I78////mwMA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Does infinite replacement of LUL and indexes into it.</p>
<p>1-indexed.</p>
","80214","","","","","2020-11-17 15:48:16","","","","0","","","","CC BY-SA 4.0"
"215314","2","","64870","2020-11-17 16:04:18","","0","","<h1><a href=""https://github.com/ETHproductions/japt"" rel=""nofollow noreferrer"">Japt</a>, 38 bytes</h1>
<pre><code>ÈKc ªKb ªOo`ÜÝ`}fOp`Leg&#129;... Ø2 f&#142; &#138;...
</code></pre>
<p><a href=""https://tio.run/##y0osKPn//3CHd7LCoVXeSUDCPz/h8JzDcxNq0/wLEnxS0w816unpKRyeYaSQdqhP4VAXkPf/PwA"" rel=""nofollow noreferrer"" title=""Japt – Try It Online"">Try it online!</a></p>
<p>This program will pause the tab till the hour is reached on Shaggy's intepreter, so it is hosted on tio.</p>
<p>Since Shaggy did most of the work on this one, I'll try to give as best an explanation as possible.</p>
<p><a href=""https://tio.run/##AS0A0v9qYXB0///DiMKqT29gw5zDnWB9Zk9wYExlZ8KBLi4gw5gyIGbCjiDCii4u//8"" rel=""nofollow noreferrer"">Proof of Concept</a></p>
<h2>Explanation</h2>
<pre><code>ÈKc ªKb ªOo`ÜÝ`}fOp`Leg&amp;#129;.. Ø2 f&amp;#142; &amp;#138;..
È              }                                    create a function with 3 params
                f                                   and call it with the following param till falsy
                 Op`Leg&amp;#129;.. Ø2 f&amp;#142; &amp;#138;.. print first part &quot;Legen..
                                                    (returns undefined)                                                                     
 Kc ªKb ª                                           are current minute and second falsy?
         Oo`ÜÝ`                                     If so, print ..dary!
                                                    (returns undefined, falsy) 
</code></pre>
","80214","","80214","","2020-11-17 16:21:53","2020-11-17 16:21:53","","","","1","","","","CC BY-SA 4.0"
"215355","2","","72056","2020-11-18 11:23:12","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 7 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ôXêUe&gt;┤
</code></pre>
<p><a href=""https://staxlang.xyz/#p=93588855653eb4&amp;i=5,%5B1,2,3%5D%0A0,%5B-1,3,5%5D%0A2,%5B1,5,3%5D%0A0,%5B5,-5%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-11-18 11:23:12","","","","0","","","","CC BY-SA 4.0"
"215366","2","","68600","2020-11-18 14:16:11","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><del>53</del></sup> 52 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ü⌐↓├¶cRU!&gt;πf_╙ⁿεd╔╘≥↔IQ┘┼▐↓▒Φ╙ε☺ÉL╚Jö┤Å☺╠╓§j╨áuf░╢A╬
</code></pre>
<p><a href=""https://staxlang.xyz/#p=9aa919c314635255213ee3665fd3fcee64c9d4f21d4951d9c5de19b1e8d3ee01904cc84a94b48f01ccd6156ad0a07566b0b641ce&amp;i=1,1%0A3,2%0A0,0%0A&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Not too well optimized, can probably be shortened a lot.</p>
<p>However, pretty proud that I managed to make it work for all the testcases.</p>
<p>It uses the X and Y registers to store previous values while comparing them in the loop, then pushes X to stack when the Y is greater than it.</p>
","80214","","80214","","2020-11-18 14:23:39","2020-11-18 14:23:39","","","","0","","","","CC BY-SA 4.0"
"215397","2","","114146","2020-11-19 03:43:10","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 4 bytes</h1>
<pre><code>E:GH
</code></pre>
<p><a href=""https://staxlang.xyz/#c=E%3AGH&amp;i=14892093%0A12344444%0A112311%0A888888%0A135866667&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-11-19 03:43:10","","","","0","","","","CC BY-SA 4.0"
"215434","2","","206967","2020-11-20 05:20:48","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>6</s></sup> 4 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╡÷E@
</code></pre>
<p><a href=""https://staxlang.xyz/#p=b5f64540&amp;i=10,%5B3,1,4,1,5%5D%0A1,%5B3,1,4,1,5%5D%0A1,%5B999%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","80214","","2021-02-24 06:28:14","2021-02-24 06:28:14","","","","0","","","","CC BY-SA 4.0"
"215435","2","","215386","2020-11-20 05:36:25","","1","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 76 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;n{(1..n/3).select{|k|n%k==0}.sum{|o|(1..o).select{|i|o%i==0}.sum{|j|j%2}}}
</code></pre>
<p><a href=""https://tio.run/##KypNqvyfZvtf1y6vWsNQTy9P31hTrzg1JzW5pLomuyZPNdvW1qBWr7g0t7omvwakIh8hn1mTr5qJkM@qyVI1qq2t/Z@WX6SQqZCZpwBUbmrApaCgUKCQFp0Zy5Wal/IfAA"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
<p>Based on Neil's answers.</p>
","80214","","","","","2020-11-20 05:36:25","","","","0","","","","CC BY-SA 4.0"
"215649","2","","215607","2020-11-26 03:53:45","","8","","<h1><a href=""http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/"" rel=""noreferrer"">Forth (gforth)</a>, 82 bytes</h1>

<pre class=""lang-forth prettyprint-override""><code>: f 2dup 2dup &gt; if * else swap / then dup . swap drop swap 1+ swap recurse ;
1 1 f
</code></pre>
<p><a href=""https://tio.run/##S8svKsnQTU8DUf//WymkKRillBZACDuFzDQFLYXUnOJUheLyxAIFfYWSjNQ8BZCcHkQkpSi/AMIy1IbQRanJpUVADdZchgqGCmn//wMA"" rel=""noreferrer"" title=""Forth (gforth) – Try It Online"">Try it online!</a></p>
<p>Outputs an infinite sequence, separated by spaces.</p>
","80214","","","","","2020-11-26 03:53:45","","","","1","","","","CC BY-SA 4.0"
"215650","2","","215607","2020-11-26 04:01:02","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 9 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü↨╖Γ¥B╢╤┴
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8117b7e29d42b6d1c1&amp;i=1%0A2%0A3%0A4%0A5%0A6%0A17%0A99%0A314&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>The same reduce operation as the Jelly answer.</p>
","80214","","","","","2020-11-26 04:01:02","","","","0","","","","CC BY-SA 4.0"
"215651","2","","130454","2020-11-26 04:02:55","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 2 bytes</h1>
<pre><code>ΠḊ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9yChzu6/v8HAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>builtins.</p>
","80214","","","","","2020-11-26 04:02:55","","","","0","","","","CC BY-SA 4.0"
"215667","2","","38444","2020-11-26 16:52:23","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>14</s></sup> 16 bytes</h1>
<pre><code>ḟo=⁰ΣmΘm∫π←²fIṡ1
</code></pre>
<p><a href=""https://tio.run/##ASoA1f9odXNr///huJ9vPeKBsM6jbc6YbeKIq8@A4oaQwrJmSeG5oTH///8z/zU"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same idea as Unrelated String's answer. <s>I'll add in a version that returns <code>[]</code> once I can find a way to make <code>if</code> work properly.</s></p>
<p>Now works as advertised!</p>
","80214","","80214","","2020-12-10 02:22:34","2020-12-10 02:22:34","","","","2","","","","CC BY-SA 4.0"
"215677","2","","197286","2020-11-27 02:33:34","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 3 bytes</h1>
<pre><code>TkI
</code></pre>
<p><a href=""https://tio.run/##Dca5DcAgEEXBhl4AC8tRgnNniNwSoeX6vzcZzfO9R7rPJWk5k2w4Rs9YodLjjRHWcJJoHnUKtn8"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Key on value, then transpose.</p>
","80214","","","","","2020-11-27 02:33:34","","","","0","","","","CC BY-SA 4.0"
"215679","2","","85411","2020-11-27 03:02:06","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 17 bytes</h1>
<pre><code>!OuΞ¡ṁ§eo←*3o→D;1
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X9G/9Ny8Qwsf7mw8tDw1/1HbBC1jIDnJxdrw////RgYA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>There should be a shorter way using set difference.</p>
<p>This answer creates all the possibilities, merges them and deduplicates.</p>
","80214","","","","","2020-11-27 03:02:06","","","","0","","","","CC BY-SA 4.0"
"215682","2","","74273","2020-11-27 05:17:04","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>6 7</sup></s> 5 bytes</h1>
<pre><code>Θṁπ⁰N
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9yMhzsbzzc8atzg9////8QkAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code> ṁ  N map natural numbers to:
  π⁰  cartesian power of input
 ṁ    and join
Θ     prepend empty string
</code></pre>
","80214","","80214","","2020-11-27 08:15:51","2020-11-27 08:15:51","","","","3","","","","CC BY-SA 4.0"
"215683","2","","140292","2020-11-27 05:20:02","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>fo≠' ←m↓7
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/qKnx0Lb/afmPOheoKzxqm5D7qG2y@f///w3AQCEpJzEDTHCB@YZaCokFBTmpxRCukUJ@UWJeemqxPYRvrKVQmZqYoQMT1gMJaxmYKOTkl6Uq5KYqFOcDCagkAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>same idea as Jelly.</p>
","80214","","","","","2020-11-27 05:20:02","","","","0","","","","CC BY-SA 4.0"
"215702","2","","152114","2020-11-28 02:04:44","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>tĊ3ṙḣ12←
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/v@RIl/HDnTMf7lhsaPSobcL///9NAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-11-28 02:04:44","","","","0","","","","CC BY-SA 4.0"
"215703","2","","128916","2020-11-28 02:46:48","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 26 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>äE⌐+É7∩ΦΓyr╔ßΣ·φƒÇe►ef%I» 
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8445a92b9037efe8e27972c9e1e4faed9f80651065662549af20&amp;i=%5B1,1%5D%0A%5B1,2,2,1,1,2,1,2,2,1%5D%0A%5B1,2,2,1,1,2,1,2,2,1,2,2,1,1,2,1,1%5D%0A%5B1,2%5D%0A%5B4,2,-2,1,0,3928,102904%5D%0A%5B1,1,1%5D%0A%5B2,2,1,1,2,1,2%5D%0A%5B1%5D%0A%5B%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Tried with a generator, but it seems like a while loop is shorter.</p>
","80214","","","","","2020-11-28 02:46:48","","","","0","","","","CC BY-SA 4.0"
"215730","2","","215719","2020-11-29 02:32:09","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 4 bytes</h1>
<pre><code>{n+m
</code></pre>
<p><a href=""https://staxlang.xyz/#c=%7Bn%2Bm&amp;i=13,%22hello,+world%22"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>a downside of <code>m</code> printing stuff with newline is that you need an explicit bracket.</p>
","80214","","","","","2020-11-29 02:32:09","","","","0","","","","CC BY-SA 4.0"
"215809","2","","215768","2020-12-01 02:00:01","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 5 bytes</h1>
<pre><code>VImRJ
</code></pre>
<p><a href=""https://staxlang.xyz/#c=VImRJ&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>VImRJ
VIm   map 1..infinity to
   R  range 1..i
    J join with spaces
  m   print each iteration
</code></pre>
","80214","","","","","2020-12-01 02:00:01","","","","1","","","","CC BY-SA 4.0"
"215826","2","","215797","2020-12-01 07:30:50","","4","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<h2>Negadecimal to decimal, 4 bytes</h2>
<pre><code>B_10
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3yne0OD////RhjrGQGgeCwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>input as list of digits, output as integer.</p>
<h2>Decimal to Negadecimal, 4 bytes</h2>
<pre><code>B_10
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3yne0OD///@65kbGAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>input as integer, output as list of digits.</p>
","80214","","","","","2020-12-01 07:30:50","","","","0","","","","CC BY-SA 4.0"
"215844","2","","107050","2020-12-01 14:32:24","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 14 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ò≥úû╙2ï⌡T5è╧²■
</code></pre>
<p><a href=""https://staxlang.xyz/#p=95f2a396d3328bf554358acffdfe&amp;i=10%0A100%0A150&amp;a=1&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-12-01 14:32:24","","","","0","","","","CC BY-SA 4.0"
"215892","2","","202944","2020-12-02 01:59:25","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>¬εΣḋ≠2
</code></pre>
<p><a href=""https://tio.run/##ASIA3f9odXNr/8K2beKCgeKApjIgMTf/wqzOtc6j4biL4omgMv//"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>This one got simplified <em>really</em> quickly.</p>
","80214","","","","","2020-12-02 01:59:25","","","","0","","","","CC BY-SA 4.0"
"215894","2","","215858","2020-12-02 02:25:48","","3","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>┌Pèó~JRå▲ï
</code></pre>
<p><a href=""https://staxlang.xyz/#p=da508aa27e4a52861e8b&amp;i=4%0A49%0A125&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>R{xs|E|+1=}j
R            range 1..n
 {        }j get first number i where:
  xs|E       input(x) in base i digits
      |+     summed
        1=   equals 1
</code></pre>
","80214","","","","","2020-12-02 02:25:48","","","","0","","","","CC BY-SA 4.0"
"215895","2","","74302","2020-12-02 02:53:22","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>9 8</sup></s> 7 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>îσQçφ╠♦
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8ce55187edcc04&amp;i=2%0A3%0A4%0A5%0A6%0A7%0A8%0A9%0A10%0A11%0A12%0A13&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>-1 byte from recursive.</p>
<h2>Explanation (Unpacked)</h2>
<pre><code>rr$x%sy|S
r         range 0..n-1
 r        reversed 
  $       converted to string
   x(     take n characters
     y    push n as string from register y
      |S  prepend and append it to the range
           implicit output
</code></pre>
","80214","","80214","","2020-12-02 03:41:12","2020-12-02 03:41:12","","","","0","","","","CC BY-SA 4.0"
"215898","2","","215883","2020-12-02 03:24:45","","4","","<h1>Day 1. <a href=""https://esolangs.org/wiki/MAWP"" rel=""nofollow noreferrer"">MAWP</a>, score 3</h1>
<pre><code>tt:
</code></pre>
<p><a href=""https://8dion8.github.io/MAWP/v1.1?code=tt%3A%10&amp;input="" rel=""nofollow noreferrer"">Try it!</a></p>
<p>There's a <code>0x10</code> character at the end.</p>
<p>This follows the restrictions:</p>
<ul>
<li>You must include the 0x10 byte in your source code (last char)</li>
<li>You must have an even number of bytes in your source code (4)</li>
<li>You must only use even bytes in your source code (<code>116 116 58 16</code>)</li>
</ul>
<h2>Tomorrow's restriction:</h2>
<p>You must use a byte which is a prime factor of 420 in your source code. <code>(2,3,5,7)</code>. To be more specific, use any of them at least once.</p>
","80214","","80214","","2020-12-02 07:33:05","2020-12-02 07:33:05","","","","2","","","","CC BY-SA 4.0"
"215900","2","","50510","2020-12-02 03:34:34","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>sJ' w
</code></pre>
<p><a href=""https://tio.run/##yygtzv6f@6ip8X@xl7pC@f///6OVSjIyixUUQDhRAQiKS4oy89KBDCUdJQWFpJzEDAihAOUAhROTklNS09LBCuAAyDM0UjA2UVCoM1UwAwpomOsoWGgq6CpYArGCUiwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Fully ascii!</p>
<h2>Explanation</h2>
<pre><code>sJ' w
    w split into words
 J'   join with spaces
s     add quotes
</code></pre>
","80214","","","","","2020-12-02 03:34:34","","","","0","","","","CC BY-SA 4.0"
"215958","2","","2926","2020-12-04 04:39:01","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, score 354</h1>
<pre><code>|?|+
</code></pre>
<p><a href=""https://staxlang.xyz/#c=%7C%3F%7C%2B&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p><code>|?</code> returns the program's source. <code>|+</code> sums it.</p>
","80214","","","","","2020-12-04 04:39:01","","","","0","","","","CC BY-SA 4.0"
"215962","2","","215960","2020-12-04 07:34:35","","5","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>60 57 56 55</s></sup> 41 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{3⌽↑(↓'-'⍪⍨' '∘,⍣6⊢⍵),↓(+/∊'d'⍷⍵)6⍴' | '}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v9r4Uc/eR20TNR61TVbXVX/Uu@pR7wp1BfVHHTN0HvUuNnvUtehR71ZNHaC0hrb@o44u9RSgou0gMbNHvVvUFWoU1Gv/pz1qm/Cot@9RV/Oj3jVA4UPrjYFmPuqbGhzkDCRDPDyD/6cpGCqYgLSkJJYkqnMBhYGa1NW50hSASsGCCnAC6AAFNBFsGoDKgAjMAgA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Input as a character matrix.</p>
<p>-1 byte from ovs.</p>
<p>-14 bytes, following xash's answer.</p>
<h2>Explanation(old)</h2>
<pre class=""lang-apl prettyprint-override""><code>{↑('   '∘,¨↓⍵),(⊂a/'-'),(+/∊'d'⍷⍵)/⊂2⌽'|  |'↑⍨a←6+⊃⌽⍴⍵}
                                      '|  |'                 a set of table legs
                                            ↑⍨               pad to length
                                              a←6+⊃⌽⍴⍵       6 + row size
                                       a←                    store in var a
                                    ⊂2⌽                      rotate 2 steps and wrap
                         (        )/                         replicate that by:
                             'd'⍷⍵                           boolean matrix of occurrences of 'data'   
                          +/∊                                sum all the occurrences
                        ,                                    concatenate with
               (⊂a/'-')                                      '-' repeated a times
  ('   '∘,¨↓⍵),                                              and the input padded with 3 spaces on the left
 ↑                                                           convert to matrix(join with newlines)
</code></pre>
","80214","","80214","","2020-12-04 14:05:34","2020-12-04 14:05:34","","","","0","","","","CC BY-SA 4.0"
"215978","2","","215936","2020-12-04 15:47:12","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 47 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Çƒô▄↑&quot;è≈■É↑├µxαêöV*┐┘ÆwaYM╙¿9⌠╛o-ºtΓ⌡╔ΔZj♦○Qæº`
</code></pre>
<p><a href=""https://staxlang.xyz/#p=809f93dc18228af7fe9018c3e678e08894562abfd9927761594dd3a839f4be6f2da774e2f5c9ff5a6a04095191a760&amp;i=1500&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Accomodates for floating point innacuracies.</p>
<h2>Explanation</h2>
<p><code>,</code> put input on main stack</p>
<p><code>{...w</code> loop till falsy value</p>
<p><code>X</code> store current interation in register X</p>
<p><code>c$%</code> get number length</p>
<p><code>bbbb</code> duplicate number 4 times</p>
<p><code>u#aa</code> get floating point root</p>
<p><code>|N</code> get integer root</p>
<p><code>-Au&lt;{sd}{d}?~</code> if difference &lt; 0.1, take the integer root otherwise float</p>
<p><code>/~</code> get n/d</p>
<p><code>-~</code> get n-d</p>
<p><code>Lr</code> convert all those to array, reverse</p>
<p><code>{...}j</code> find first value which satisfies:</p>
<p><code>cx=!</code> not equal to current iteration</p>
<p><code>_c1u*@=*</code> and not equal to its floor</p>
<p><code>ciYd</code> save iteration index in Y</p>
<p><code>y^</code> output final index</p>
","80214","","80214","","2020-12-04 16:42:28","2020-12-04 16:42:28","","","","2","","","","CC BY-SA 4.0"
"216021","2","","185783","2020-12-05 16:24:53","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>9</s></sup> 6 bytes</h1>
<pre><code>TT'_C3
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/PyREPd7Z@P///4lJySmpAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>look ma, no unicode!(-3)</p>
<h2>Explanation</h2>
<pre><code>TT'_C3
    C3 cut into pieces of 3
 T'_   transpose, padding with underscore
T      transpose again
 
</code></pre>
","80214","","80214","","2021-04-14 15:27:13","2021-04-14 15:27:13","","","","0","","","","CC BY-SA 4.0"
"216041","2","","54224","2020-12-06 05:39:02","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>122 120</s></sup> 117 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Öàu≈9o∞3┴&amp;•ªâ6üòf±Σ§LXâ¢vò╣*/T≥C└ôZüæR-^╦ìóσ∩A←··■☼⌂▌2åH╨bgrp╬3L♫-◙•►]╘═º♀ú♣É±╧○+╧┴Qî¼▼◄I&quot;a≤ΩzH♦╩k╖FΦúZa═q|▬◄┼W╥ßöo29
</code></pre>
<p><a href=""https://staxlang.xyz/#p=998575f7396fec33c12607a68336819566f1e4154c58839b7695b92a2f54f243c0935a8191522d5ecb8da2e5ef411bfafafe0f7fdd328648d062677270ce334c0e2d0a07105dd4cda70ca30590f1cf092bcfc1518cac1f11492261f3ea7a4804ca6bb746e8a35a61cd717c1611c557d2e1946f3239&amp;i=2%0A5&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>It was a bit infuriating to start over after closing this program's tab, but now it works, and it's shorter!</p>
<p>-5 bytes from recursive.</p>
<h2>Explanation (Unpacked)</h2>
<pre><code>3:B244E{um+{x*uuB\&quot;cup&quot;sch1&gt;{s's+}{s}?]+{fJm&quot;rice,ukda chawal,urad dal,poha,methi seeds&quot;',/\{JmN&quot;cup&quot;&quot;tsp&quot;R]+{PF&quot;Salt to taste&quot;P&quot;Water as needed&quot;P2:_ecp&quot; waiter&quot;p1&gt;{'sp}*
</code></pre>
<p><code>3:B244E{um+</code> array <code>[1,1,1/2,1/4,1/4]</code></p>
<p><code>{...m</code> map to:</p>
<pre><code> x*uu product with input,  converted to fraction

 B\                        push fractional part and whole part, and pair them

 &quot;cup&quot;sch1&gt;{s's+}{s}?]+    if whole part &lt;1, append &quot;cup&quot;, else cups

 {fJ                       remove zeroes, and join with spaces
</code></pre>
<p><code>&quot;rice,ukda chawal,urad dal,poha,methi seeds&quot;',/</code> array of ingredients</p>
<p><code>\{Jm</code> zip with the amounts, and jin with spaces</p>
<p><code>N</code> remove last element and push separately(methi seeds)</p>
<p><code>&quot;cup&quot;&quot;tsp&quot;R]+</code> replace &quot;cup&quot; with &quot;tsp&quot;, add it back in</p>
<p><code>{PF</code> print each ingredient</p>
<p><code>&quot;Salt to taste&quot;P&quot;Water as needed&quot;P</code> print the constant instructions</p>
<p><code>2:_ecp</code> divide input by 2, ceil, duplicate, and print</p>
<p><code>&quot; waiter&quot;p</code> print &quot;waiter&quot;</p>
<p><code>1&gt;{'sp}</code> if number of waiters &gt; 1, print an s</p>
","80214","","80214","","2020-12-08 02:04:44","2020-12-08 02:04:44","","","","0","","","","CC BY-SA 4.0"
"216067","2","","97436","2020-12-07 07:58:40","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 13 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>éÑ8╟╘&quot;╧ö↑D☼▓}
</code></pre>
<p><a href=""https://staxlang.xyz/#p=82a538c7d422cf9418440fb27d&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-12-07 07:58:40","","","","0","","","","CC BY-SA 4.0"
"216069","2","","175113","2020-12-07 09:18:48","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 27 bytes</h1>
<pre><code>#§=oṙ1mLm←fo¬εumgfo=¹ΣṖṁḣ´R
</code></pre>
<p><a href=""https://tio.run/##ATUAyv9odXNr//8jwqc9b@G5mTFtTG3ihpBmb8KszrV1bWdmbz3Cuc6j4bmW4bmB4bijwrRS////NA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>A direct bruteforce. Struggles for n above 4.</p>
","80214","","","","","2020-12-07 09:18:48","","","","0","","","","CC BY-SA 4.0"
"216070","2","","92332","2020-12-07 09:31:43","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>12</s></sup> 11 bytes</h1>
<pre><code>!¡ö←`-NmΣQø
</code></pre>
<p><a href=""https://tio.run/##ASIA3f9odXNr/23igoHhuKMxMP8hwqHDtuKGkGAtTm3Oo1HDuP//"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>returns nth term, 1-indexed.</p>
<p>-1 byte from Dominic Van Essen, using empty list.</p>
<h2>Explanation</h2>
<pre><code>!¡ö←`-NmΣQø
          ø start with the empty list:
 ¡ö         apply the following infinitely:
         Q  get all subsequences
       mΣ   sum each of them
    `-N     remove the sums from natural numbers
   ←        take the first one
!           get the nth element from this list
</code></pre>
","80214","","80214","","2020-12-10 02:25:24","2020-12-10 02:25:24","","","","1","","","","CC BY-SA 4.0"
"216073","2","","146084","2020-12-07 13:35:30","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 13 bytes</h1>
<pre><code>ḟo=⁰Σfo&lt;4LṖİ↔
</code></pre>
<p><a href=""https://tio.run/##ASIA3f9odXNr///huJ9vPeKBsM6jZm88NEzhuZbEsOKGlP///zQy"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>ḟo=⁰Σfo&lt;4LṖİ↔
           İ↔ all base 10 palindromes
          Ṗ   power set
     fo&lt;4L    keep length&lt;4 subsets    
ḟo            first set which satisfies:
  =⁰Σ         sum equals input
</code></pre>
","80214","","80214","","2020-12-07 14:02:37","2020-12-07 14:02:37","","","","1","","","","CC BY-SA 4.0"
"216081","2","","37296","2020-12-07 17:19:31","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 179 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>d←≠⊆⊢
p←≢¨'|'d'\d'⎕R'|'⊢n←2⊃a←' 'd⍞
⊃(t/⍨t≡¨∪¨t←r/⍨(⍎⊃a)∘{(∧/'0'≠⊃¨x)&gt;1∊×(⊖⍺↓⊖⍎¨⍵)|⍎¨x←1↓⍺,/⍵}¨r←{×≢p:{⍕⍎∊⍉↑('_'d n)(⍵⊆⍨p/⍳≢p)}¨(⊂p/⍕0),⍕¨{⍵~⍳⌊⊃⌽⍵÷10}⍳1-⍨10*+/p⋄⊂n}0),⊂'no answer'
</code></pre>
<p><a href=""https://tio.run/##dZC/T8JAFMf3@yu6XasQem0FdHB0JswmlyYVF1IaJBGDOICp5eQIxiAuGmWxcTWNCYlL@U/eP1Lf1WCMgaX9/nife9e6QbPoXbjN1mkGk9lRHcIps6oVgqZWQ2M7BKKbRuahhtELiBDEggS5W6QxvaQePfYojtdRY@djZYEYuvimGvVAPhO0eqcEMu7A6DWNIXpPUYbTtsp0kBM1b0D02NMheitRk@arhmncNQ4ZRGI110E8gFxCeJ@LCZ4iE@MyV111adXIZQFPTPpp3Maot5rjHYODHsiZ2hEJkCMI73TKqaf5Bi5O1PfIOEDqQ80aiOKmgQpmplHAZxojn1ypgbHAO8H4C/3qk5l9zFgRcWbu7JYCuL1G0u8rTAyo39Jc/@z8pE0z/IGZpjWIrVWYwwnIJyVMQlRoKc3y8BdZN8yxzOqmyv5T/ag1wbcTfCNR5tzi3Nnbhv3ry8y2KvvKfgM"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>-4 bytes from dzaima.</p>
<p>-9 bytes from ngn.</p>
<p>-4 bytes from Adam.</p>
<p>Golfed by a lot at The APL Orchard.</p>
<h2>Explanation</h2>
<p><code>d←≠⊆⊢</code> splitting function: takes character on left, string on right.</p>
<p><code>p←≢¨'|'d'\d'⎕R'|'⊢n←2⊃a←' 'd⍞</code> a multiple assignment:</p>
<p><code>a←' 'd⍞</code> a - holds input split on spaces.</p>
<p><code>n←2⊃</code> n - holds the number string.</p>
<p><code>p←≢¨'|'d'\d'⎕R'|'⊢</code> p - holds the length of each blank space.</p>
<h3>Part 1: generating the required number partitions</h3>
<p><code>r←{×≢p:{⍕⍎∊⍉↑('_'d n)(⍵⊆⍨p/⍳≢p)}¨(⊂p/⍕0),⍕¨{⍵~⍳⌊⊃⌽⍵÷10}⍳1-⍨10*+/p⋄⊂n}0</code></p>
<p><code>×≢p: ... ⋄⊂n</code> If there are no underscores, return the number, wrapped.</p>
<p>Otherwise:</p>
<p><code>⍳1-⍨10*+/p</code> generate range 1..(9 repeated sum(p) times)</p>
<p><code>{⍵~⍳⌊⊃⌽⍵÷10}</code> remove 1..10^(sum(p)-1), getting all sum(p) digit numbers.</p>
<p><code>⍕¨</code> convert each to string</p>
<p><code>(⊂p/⍕0),</code> prepend 0 repeated sum(p) times to it</p>
<p><code>{⍕⍎∊⍉↑('_'d n)(⍵⊆⍨p/⍳≢p)}¨</code>  execute the following for each no. string:</p>
<p><code>(⍵⊆⍨p/⍳≢p)</code> split into pieces of sizes in p</p>
<p><code>↑('_'d n)</code> add the input to it and make a 2xn matrix</p>
<p><code>⍕⍎∊⍉</code> transpose the fillers and enlist them, then remove all spaces using <code>⍕⍎</code></p>
<p><code>r/⍨</code> filter this list by:</p>
<h3>Part 2: checking chain divisibility</h3>
<p><code>(⍎⊃a)∘{(∧/'0'≠⊃¨x)&gt;1∊×(⊖⍺↓⊖⍎¨⍵)|⍎¨x←1↓⍺,/⍵}¨</code></p>
<p><code>(⍎⊃a)∘{...}</code> execute the following, using the first number as constant left argument:</p>
<p><code>⍎¨x←1↓⍺,/⍵</code> store overlapping groups of 3 in x, convert to int</p>
<p><code>|</code> modulo:</p>
<p><code>(⊖⍺↓⊖⍎¨⍵)</code> list of numbers they should be divisible by</p>
<p><code>1∊×</code> are any of them truthy?</p>
<p><code>&gt;</code> check if the result is lesser than:</p>
<p><code>(∧/'0'≠⊃¨x)</code> whether any of the groups have a leading zero</p>
<p>filter complete!</p>
<h3>Part 3: checking uniqueness</h3>
<p><code>t≡¨∪¨t←</code> boolean mask for whether each number matches itself uniquified.</p>
<p><code>t/⍨</code> filter to get the final array</p>
<p><code>⊃(...),⊂'no answer'</code> pick the first item of the result with 'no answer' appended.</p>
<p>if there are no results, it will default to that.</p>
","80214","","","","","2020-12-07 17:19:31","","","","0","","","","CC BY-SA 4.0"
"216096","2","","216087","2020-12-08 02:53:05","","13","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>61 56 48 40 37 36 35 33</s></sup> 32 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>6∧+/w∘≢¨⊢∘⌂life\5/⊆w←0,∘⌽∘⍉⍣16⊢⎕
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97b/Zo47l2vrljzpmPOpcdGjFo65FIGZPU05mWmqMqf6jrrbyR20TDHTAontBZG/no97FhmYglX1TQYb8T@MyUTB51LvFQAEGDYEQmQZDLqB6oFnq6lxpXEYKRkANhhAFyBLGCmZwk5B1G0IxnIeqyRisyRBVMaoSI4gSZEGIs7E5FkkMWYOZggVQA7rHkGxFZ6HyMWlDJJuwBpSpgjnIRkMUPQYoGCFmiBJUhijuRPMJJMiQHQAJMi4A"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Outputs 0 for still-life, 6 for oscillators, and 12 for other.</p>
<p>Expects a binary matrix.</p>
<p>-5 bytes from ovs using a train for the left-most dfn.</p>
<p>-8 bytes from user by omitting <code>traj</code> and using <code>⍣</code> instead.</p>
<p>-8 more bytes from user.</p>
<p>-3 bytes simplifying user's idea.</p>
<p>-1 more byte from user(how did they do it?!).</p>
<p>-2 more bytes, converting to a full program.</p>
<p>-1 more more byte from user.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code> 6∧+/w∘≡¨⊢∘⌂life\5/⊆w←0,∘⌽∘⍉⍣16⊢⎕
                            ⍣16⊢⎕ apply the following to the input 16 times:
                      0,∘⌽∘⍉      rotate 90 degrees and prepend a column of zeroes
                    w←            store padded input in w    
                 5/⊆              copy it 5 times
         ⊢∘⌂life\                 scan using life function
     w∘≡¨                         check which ones match w       
   +/                             sum to get number of truthies
 6∧                               lcm(6,truthies)
</code></pre>
","80214","","80214","","2020-12-17 14:29:28","2020-12-17 14:29:28","","","","19","","","","CC BY-SA 4.0"
"216105","2","","7241","2020-12-08 17:46:31","","3","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, <sup><s>244</s></sup> 233 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>s←2⌿⊂2⌿25
d←?x←2⌿50
o←⍳2
G←P5.G
P5.draw←{G.bg¯1
G.fill←0
s⊢←(1↓s),⊂o+f←⊃⌽s
((⊢≢∪)s)∨~f⊂⍛∊a←⍳x:P5.exit 0⊣⍞←'Score: ',⍕2-⍨≢s
d≡f:s⊢←s,⊂f+2×o⊣d⊢←?x
(t←'center'G.rect,∘2 2)¨2×s
G.fill←'f00'
t+⍨d}
P5.kp←{o≢-n←('sdwa'⍳⍵)⊃1-↓⍬2⍴3⊤2320:o⊢←n}
</code></pre>
<p>Golfed from 294 → 244 bytes with the help of dzaima.</p>
<p>Uses <code>WASD</code> controls.</p>
<p>Uses <code>⎕IO←0</code> (0-indexing).</p>
<p>The grid is <code>50x50</code>, on the default <code>100x100</code> canvas Processing uses.</p>
<p>Displays score to the console.</p>
<p>Explanation done!</p>
<h2>Explanation</h2>
<p><code>s←2⌿⊂2⌿25</code> snake starts at <span class=""math-container"">\$(25,25)\$</span></p>
<p><code>d←?x←2⌿50</code> first food position: 2 random ints in (0,50)</p>
<p><code>x←2⌿50</code> save (50,50) in x</p>
<p><code>o←⍳2</code> initial snake direction: (0,1)</p>
<p><code>G←P5.G</code> save namespace as <code>G</code></p>
<p><code>P5.draw←{</code> execute the following each frame:</p>
<p><code>  G.bg¯1</code> display white background</p>
<p><code>  G.fill←0</code> set fill to black</p>
<p><code>  s⊢←(1↓s),⊂o+f←⊃⌽s</code> calculate next snake position:</p>
<p><code>    (1↓s)</code> remove the last tail segment</p>
<p><code>    ,⊂o+f←⊃⌽s</code> add direction to the front, and append that</p>
<p><code>    f←⊃⌽s</code> assign head coordinates to f</p>
<p><code>  ((⊢≢∪)s)∨~f⊂⍛∊a←⍳x:(...)</code> check if the player has lost:</p>
<p><code>    ((⊢≢∪)s)∨</code> if snake does not match itself uniquified, or</p>
<p><code>    ~f⊂⍛∊a←⍳x:</code> head is not within 50x50 grid:</p>
<p><code>    ⍞←'Score: ',⍕2-⍨≢s</code> display the score in console, and</p>
<p><code>    P5.exit 0⊣</code> exit, displaying nothing</p>
<p><code>  d≡f:s⊢←s,⊂f+2×o⊣d⊢←?x</code> if head matches food, then change food position and increase snake length.</p>
<p><code>  (t←'center'G.rect,∘2 2)¨2×s</code> draw each position of the snake</p>
<p><code>    t←'center'G.rect,∘2 2</code> create function <code>t</code> for drawing the blocks</p>
<p><code>  G.fill←'f00'</code> set fill to red`</p>
<p><code>  t+⍨d</code> draw the food</p>
<p><code>}</code> close draw loop</p>
<p><code>P5.kp←{...}</code> execute the following each time a key is pressed (⍵ is key name):</p>
<p><code>  1-↓⍬2⍴3⊤2320</code> array of directions <code>│0 1│1 0│0 ¯1│¯1 0│</code></p>
<p><code>  ('sdwa'⍳⍵)⊃</code> get key number, index into directions</p>
<p><code>  n←</code> store direction in n</p>
<p><code>  o≢-</code> if snake direction is not the opposite of n,(prevents moving backward)</p>
<p><code>  o⊢←n</code> then change snake direction</p>
<h2>Gameplay</h2>
<p>(recorded at low fps)</p>
<p><a href=""https://i.stack.imgur.com/ByLkS.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ByLkS.gif"" alt=""enter image description here"" /></a></p>
","80214","","80214","","2020-12-13 14:28:12","2020-12-13 14:28:12","","","","2","","","","CC BY-SA 4.0"
"216136","2","","216113","2020-12-09 08:58:46","","2","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip <code>-n</code></a>, 31 bytes</h1>
<pre><code>{!#y%a&amp;!$BX(FB_My&lt;&gt;a)}FI1,--#Ya
</code></pre>
<p><a href=""https://tio.run/##K8gs@P@/WlG5UjVRTVHFKULDzSnet9LGLlGz1s3TUEdXVzky8f///waGBkAEJgz@6@YBAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>Input as a string of 0s and 1s.</p>
<h2>Explanation</h2>
<pre><code>{!#y%a&amp;!$BX(FB_My&lt;&gt;a)}FI1,--#Ya a → input
                        1,--#Ya range 1..length(a)-1
                             Ya store input in y
{                    }FI        filter each i by the following:
  #y%a                           length(a) mod i
 !                               logical not (is divisor)
      &amp;                          and
                y&lt;&gt;a             input split into chunks of length i
            FB_M                 mapped from binary to decimal
        $BX(        )            folded by bitwise xor
       !                         logical not (checksum validity)
                                 is true?
                                join with newlines(-n flag)
</code></pre>
","80214","","80214","","2020-12-09 15:13:16","2020-12-09 15:13:16","","","","6","","","","CC BY-SA 4.0"
"216141","2","","107600","2020-12-09 12:14:46","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 6 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>o×／Ｌ［│
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=byVENyV1RkYwRiV1RkYyQyV1RkYzQiV1MjUwMg__,i=NA__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<h2>Explanation</h2>
<pre><code>o×/L[|
o×     repeat o input times
  /    make an antidiagonal using it
   L   get width without popping
    [| palindromize width times
</code></pre>
","80214","","","","","2020-12-09 12:14:46","","","","0","","","","CC BY-SA 4.0"
"216157","2","","53001","2020-12-10 02:36:15","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip <code>-s</code></a>, 8 bytes</h1>
<pre><code>_TB16M,h
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/PsTJ0MxXJ@P///@6xQA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>_TB16M,h
      ,h range 0...99
     M   map using lambda:
_TB16    convert to hexadecimal
         join with spaces(-s flag)
</code></pre>
","80214","","","","","2020-12-10 02:36:15","","","","0","","","","CC BY-SA 4.0"
"216163","2","","171860","2020-12-10 13:19:54","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 21 bytes</h1>
<pre><code>(a+t*mR`1+0`'xX3)@&gt;-3
</code></pre>
<p><a href=""https://tio.run/##K8gs@P9fI1G7RCs3KMFQ2yBBvSLCWNPBTtf4////hgYGBgA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-12-10 13:19:54","","","","0","","","","CC BY-SA 4.0"
"216164","2","","171860","2020-12-10 13:25:10","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 15 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>çi╖@u;╟w☼7ø4σcH
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8769b740753bc7770f370034e56348&amp;i=0%0A15%0A179%0A999%0A1000%0A1097%0A1100%0A1108%0A1110&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Same idea as Arnauld's answer.</p>
","80214","","","","","2020-12-10 13:25:10","","","","0","","","","CC BY-SA 4.0"
"216166","1","","","2020-12-10 14:01:13","","23","653","<p><a href=""https://codegolf.meta.stackexchange.com/a/20479/80214"">SE Sandbox Link</a>, <a href=""https://codegolf.codidact.com/articles/279223"" rel=""noreferrer"">Codidact Sandbox Link</a></p>
<p>Inspired by <a href=""https://www.youtube.com/watch?v=9p55Qgt7Ciw&amp;ab_channel=Numberphile"" rel=""noreferrer"">this video.</a></p>
<p>Given a positive integer, draw its Cistercian representation as ascii art.</p>
<p><a href=""https://i.stack.imgur.com/JmmEq.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/JmmEq.png"" alt=""enter image description here"" /></a></p>
<h2>The Challenge</h2>
<p>Cistercian numerals are a decimal-based number representation system which use simple line based drawings to represent 4-digit numerals. Their structure is as follows:</p>
<pre><code>     Tens|Units
         |
Thousands|Hundreds
</code></pre>
<p>The digits are represented as follows (in the units place):</p>
<pre><code>1   ⌷ 2   ⌷ 3   ⌷ 4   ⌷ 5   ⌷ 6    ⌷ 7    ⌷ 8    ⌷ 9    ⌷ 0 
___ ⌷     ⌷     ⌷     ⌷ ___ ⌷    . ⌷ ___. ⌷    . ⌷ ___. ⌷
    ⌷     ⌷ \   ⌷   / ⌷   / ⌷    | ⌷    | ⌷    | ⌷    | ⌷
    ⌷     ⌷  \  ⌷  /  ⌷  /  ⌷    | ⌷    | ⌷    | ⌷    | ⌷
    ⌷ ___ ⌷   \ ⌷ /   ⌷ /   ⌷    ' ⌷    ' ⌷ ___' ⌷ ___' ⌷

</code></pre>
<p>(all of these are 4 rows in height.)</p>
<p>As you can see, there are some repeating patterns within the symbols:</p>
<pre><code>5 → 4 + 1
7 → 6 + 1
8 → 6 + 2
9 → 6 + 1 + 2
</code></pre>
<p>In order to represent a general Cistercian number, you will have to place the digits in the correct place for their value.</p>
<p>They should be mirrored horizontally if they are on the left.</p>
<p>They should be mirrored vertically if they are on the bottom i.e. the lines should be reversed, <code>\</code> and <code>/</code> should be swapped, and <code>.</code> and <code>'</code> should be swapped. <a href=""https://dzaima.github.io/paste#0y80sKsovSk1RKEstKslMTszJqbTi4jJUUFB41LNdwQhKG0NpEyhtCqXNFKAMcxjDAsawhDEMFLhgzPj4eDCtoKAPpmOg4jAaCPRQGUAdqAy4WXBaH0rHoNEKCjUEGBhm6cP5MWg0YbMQflPASiPJq8ME1LGLcHFxAQA"" rel=""noreferrer"">Here's how they should look.</a></p>
<p>The fun part is when you stack a Cistercian representation on top of another one to accommodate more digits e.g.:</p>
<pre><code>  T|U  
   |   
 Th|H  
   |   
Hth|Tth
   |   
 TM|M 
</code></pre>
<p>like a tower of sorts.</p>
<p>You will need to stack as many 4 part towers as the number requires, and you will need to prepend 0's to the input if it's length is not a multiple of 4.</p>
<p>Hence, given an input number, say, 12345, you should get the following:</p>
<p><code>00012345 → 5432,1000</code></p>
<p>which turns into:</p>
<pre><code>4|5
 |
2|3
 |
0|1
 |
0|0
</code></pre>
<p>which becomes:</p>
<pre><code>    |___
 \  |  /
  \ | /
   \|/
    |
    |
    |
    |
 ___|  /
    | /
    |/
    |
    |
    |
    |
    |
    |___
    |
    |
    |
    |
    |
    |
    |
    |
    |
    |
    |

</code></pre>
<p>Note that this is created by making two towers for the 4 digit numbers <code>2345</code> and <code>0001</code>, stacking them, and adding a link of 4 <code>|</code> characters between them.</p>
<h1>Scoring</h1>
<p>This is code-golf. Shortest answer in each language wins.</p>
","80214","","80214","","2020-12-11 11:18:15","2020-12-13 12:08:45","Towering Cistercian representation","<code-golf><number><ascii-art>","3","15","1","","","CC BY-SA 4.0"
"216201","2","","216196","2020-12-11 14:54:23","","10","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""noreferrer"">Husk</a>, 4 bytes</h1>
<pre><code>¡!¹←
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9BCxUM7H7VN@P//f7SxjpGOYSwA"" rel=""noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>1-indexed, returns an infinite list.</p>
<h2>Explanation</h2>
<pre><code>¡!¹←
   ← take the first element as the start
¡    apply the following infinitely:
 !¹  index into the input
</code></pre>
","80214","","80214","","2020-12-11 14:59:28","2020-12-11 14:59:28","","","","0","","","","CC BY-SA 4.0"
"216206","2","","216196","2020-12-11 15:15:51","","6","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>12</s></sup> 11 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍺∇⎕←⍵⌷⍺}∘0
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkG/6sf9e561NEOFAByH/VufdSzHShS@6hjhsH/NLBQ36Ou5ke9ax71bjm03vhR20Sg0uAgZyAZ4uEZ/D9NAcjyCvb3U4821FEw0lEw0VEw0FEw01EAco2BZKw6AA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>0-indexed, takes input as the left argument.</p>
<p>-1 byte from user.</p>
<pre class=""lang-apl prettyprint-override""><code>{⍺∇⎕←⍵⌷⍺}∘0
{⍺∇⎕←⍵⌷⍺}∘0 take 0 as initial right argument
   ⎕←⍺⌷⍵    print element at right arg
 ⍺∇ ⍵⌷⍺     recursive call with the input and new right arg
</code></pre>
","80214","","80214","","2020-12-11 15:20:31","2020-12-11 15:20:31","","","","1","","","","CC BY-SA 4.0"
"216216","2","","216209","2020-12-11 17:05:38","","1","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 99 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;a{s=&quot;&quot;;(o=a).chars{|n|(n==?S)?s=o:o=o.chars.each_slice((o.size*0.5).ceil).map(&amp;:join).join(s)};o}
</code></pre>
<p><a href=""https://tio.run/##RYtBDoIwFETXcoqmC9Mabdy4gXy5AkmXhJiKJXyC/YTKQoGzV5EYF/NmJpPph@szVBAOZzN64DwRBEaqsja9Hyc3CQeQapl6oJiA1kFZU9YX32JphSDl8WV3R3X63Cy2Ut1NJ7ZxQ@ikWii8nBOaQ0U9Q4aO5VzzPc8WLUFnX6z8lb9rrXkRbbrh4VmVYxFZdwtv"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
","80214","","80214","","2020-12-12 10:03:50","2020-12-12 10:03:50","","","","0","","","","CC BY-SA 4.0"
"216253","2","","25606","2020-12-12 08:15:37","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>LumF/π2ḣ100
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/36c0103/fIPRwx2LDQ0M/v8HAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-12-12 08:15:37","","","","0","","","","CC BY-SA 4.0"
"216257","2","","54301","2020-12-12 11:46:03","","0","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 32 bytes</h1>
<pre><code>ＷＳ«≔⌕ENW§ι⁰θ✳⊗θ×§&gt;^&lt;vθΣι»Ｍ✳⁺⊗θ⁴X
</code></pre>
<p><a href=""https://tio.run/##bc3BasJAFIXhtecphlndS1OoMWajCIIpuHAoTCFdCZoMeiFOajJJC6XPPlVKd92f7z/V@dBV7aGJ8eMsjVO09e9DsKETfyJm9YXJuu/l5OlZfE26MKVO1Dpsfe0@SRL1xJyoKy8webmZQBvpXBWk9bRph2PjarreF69ycT39Ob3aL0d9d4myw4WE@Vb4xq4d3b@Fh4wZvwf6TXOMJkeRw@Yo5zBzFBlshnIGM0ORwqYopzAp4mMz/gA"" rel=""nofollow noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
<p>Input taken as a multiline string.</p>
<p>Link is to verbose version of code.</p>
<p>Golfed from 43 bytes with <a href=""https://chat.stackexchange.com/transcript/message/56410590#56410590"">Neil's help.</a></p>
","80214","","","","","2020-12-12 11:46:03","","","","0","","","","CC BY-SA 4.0"
"216258","2","","58759","2020-12-12 13:15:31","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 30 bytes</h1>
<pre><code>↔T' z:mR' λm+a▼¹)∫m-2m€&quot;v ^▲&quot;¹
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HblBB1hSqr3CB1hXO7c7UTH03bc2in5qOO1bm6RrmPmtYolSnEPZq2SenQzv///5fFxZWBcVkcCIJZID6IAQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##yygtzv6fm39o26Omxv@P2qaEqCtUWeUGqSuc252rnfho2p5DOzUfdazO1TXKfdS0RqlMIe7RtE1Kh3b@//8/WikOxIkrA6oC0XFlSjpKQEZZHAoEqdcBKgUDIAeG9kBQGRgAVZQBDQBjiD4wC8QHMZRiAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify all tests</a></p>
<p>Uses a few ideas from the Pyth answer, and the lambda can be shortened.</p>
<p>Since <code>▲</code> and <code>▼</code> are in Husk's codepage, you can see the testcases in their full glory!</p>
<h2>Explanation</h2>
<pre><code>↔T' z:mR' λm+a▼¹)∫m-2m€&quot;v ^▲&quot;¹
                     m€&quot;v ^▲&quot;  get the indices of each char in the string
                  m-2          subtract 2 from each
                 ∫             cumulative sum
          λm+a▼¹)              add abs(minimum) to each
      mR'                      map each n to n spaces
    z:                         join the spaces with the input
 T'                            Transpose. padding with spaces
↔                              reverse
</code></pre>
","80214","","80214","","2020-12-12 13:31:00","2020-12-12 13:31:00","","","","0","","","","CC BY-SA 4.0"
"216263","2","","204002","2020-12-12 17:31:53","","3","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>115 99</s></sup> 91 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{u/⍨(⊢=⌊/)|(1∆DT⊂⍵)-1∘∆DT¨⊂¨u←(,y∘.,(2/¨2+2×⍳5),(⊢,⌽¨)0 2+⊂5 9),↓y,↑2∘,¨28+0=4|y←(2-⍳3)+⊃⍵}
</code></pre>
<p><a href=""https://tio.run/##TU@xTsMwFNzzFW9rrDjEdhqpRcpUBlhpF8ZIISwVIJUOVstSUIRCXYEQgpkpA1IHYKnUxfzJ@5Hw6oqqy/Pd@e70XnY9DHOdDa8uGg8Xr70zaOXF5ajl4UN5NMDyaSJTNKvDPNMjW6P54TSrmQQJ@HgPeXZz7uTbZjKO0NQ@Vh8pzquITX257ahm9M9CYu9OcAW2HlO5zzWpB9xXka1VoH7f0HwljG9aOM7XtmYCVED@BLqMY/miaTwrCtEeqhOItD3VmyIVUjJmZL1z2xQkolk4@onm2y5jCtKF/dMezcHxSb8pQAklIAHZ8XY4Fv9YCojlHlHtHaFnD29Nsuv0Pw"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Takes a date array <code>yyyy mm dd</code>, and returns all the closest doomsdays. If that is not allowed, then +1 byte.</p>
<p>-16 bytes from Bubbler(simplifying leap year check)</p>
<p>-8 bytes from Bubbler(compressing doomsdays)</p>
<p><code>⎕DT</code> is polyfilled as <code>∆DT</code> here(Courtesy of Adám) since tio's version doesn't allow it's usage.</p>
<h2>Explanation</h2>
<p><code>(2-⍳3)</code> array (-1,0,1)</p>
<p><code>y←(2-⍳3)+⊃⍵</code> add that to the year and store it as y.</p>
<p><code>0=4|</code> check if each of those is a leap year(This works due to the year range.)</p>
<p><code>28+</code> add 28 to those booleans to get the correct february dates</p>
<p><code>↓y,↑2∘,¨</code> add the respective years, and months(2) to them to get the appropriate dates</p>
<p><code>(...),</code> concatenate with:</p>
<p><code>(⊢,⌽¨)0 2</code> generate array <code>(5 9)(7 11)(9 5)(11 7)</code></p>
<p><code>(2/¨2+2×⍳5)</code> and the numbers 4 6 8 10 12 repeated twice</p>
<p><code>,y∘.,</code> join with the years and flatten to a list to get all the dates</p>
<p><code>u←</code> save all the dates together as u</p>
<p><code>1∘∆DT¨⊂¨</code> get each of their date numbers</p>
<p><code>(1∆DT⊂⍵)</code> and subtract from the input's date number.</p>
<p><code>|</code> convert to their absolute values:</p>
<p><code>(⊢=⌊/)</code> tacit fn: array = minimum? (generates bitmask)</p>
<p><code>u/⍨</code> filter the dates by that (get the dates with minimum distance)</p>
","80214","","80214","","2021-01-19 07:04:48","2021-01-19 07:04:48","","","","3","","","","CC BY-SA 4.0"
"216314","2","","216275","2020-12-13 15:07:27","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 56 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>''' '[?7/2],⍨'U',⍨7 10⍴,/⍉2 70⍴(2/¨'+-')[?70/2],⍨70⍴'RD'
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qKM97b@6urqCerS9ub5RrM6j3hXqoeogylzB0OBR7xYd/Ue9nUYK5iC2hpH@oRXq2rrqmkDVBlDlYBn1IBd1kGH/0wA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-12-13 15:07:27","","","","0","","","","CC BY-SA 4.0"
"216333","2","","70180","2020-12-14 04:07:09","","1","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 37 bytes</h1>
<pre><code>'_Na?UC@_.@&gt;_Ma^'_(LC_MRXU.XL.'+a)J'_
</code></pre>
<p><a href=""https://tio.run/##K8gs@P9fPd4v0T7U2SFez8Eu3jcxTj1ew8c53jcoIlQvwkdPXTtR00s9/v///875KZl56c75eWWpeSWZ@XlgVlExkAUA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>Lot of underscores in this one.</p>
","80214","","","","","2020-12-14 04:07:09","","","","0","","","","CC BY-SA 4.0"
"216337","2","","168949","2020-12-14 14:56:39","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>66</s></sup> 60 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{(⊃⍸⍵=s)⌷{⊢/4 2⍴⍵}⌺3 3⊢s←{⌽⍉⍵⍪⍨⌽(⍳(⌈/⍴⍵)+⌈/,⍵)~,⍵}⍣(⍵+4)⊢⍪1}
</code></pre>
<p><a href=""https://tio.run/##JY29DgFxEMR7T7HlXe7E/@NQqTS0zgtcIqeRkKjkQiMR5FYolBoaEYkCIRKNR5kXOetssZmdzG82GvSKnVHU63ezLHGwnIKf4Htt6CJ9JFjuSwEZ8E28MdKXJSveELN1gvQNXogPPoGPcjrgq4N0XvrnXe@n/Z@a@DnPB4ncvcCVDqH0OIulCbzK/54F@1wsZhustmGrLrvdaIaZJOPPUXuKNBmyVCFdIVMmU6WqJa10AbyLySil/kqrfL4"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>1-indexed.</p>
<p>I'd been wanting to solve spiral challenges in APL for a while, so I figured I'd make a spiral creating function for this. I've used simple array magic to make it(and ngn will probably find an insane math relation to calculate it, most likely).</p>
<p><a href=""https://chat.stackexchange.com/transcript/message/56428225#56428225"">-6 bytes</a> from Adám.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{(⊃⍸⍵=s)⌷{⊢/4 2⍴⍵}⌺3 3⊢s←{⌽⍉⍵⍪⍨⌽(⍳(⌈/⍴⍵)+⌈/,⍵)~,⍵}⍣(⍵+4)⊢⍪1} input → n
                                                         ⍪1  to [[1]],
                                                  ⍣(⍵+4)⊢    apply the following n+4 times:
                                (⍳(⌈/⍴⍵)+⌈/,⍵)               range 1..max(i)+max(shape(i))
                                              ~,⍵            without i
                            ⍵⍪⍨                              add that as a row

                          ⌽⍉                                 rotate 90 degrees clockwise

                       s←                                    assign the spiral to s
         {       }⌺3 3⊢                                      to the 3x3 paritions of the spiral:
          ⊢/4 2⍴⍵                                            get every 2nd element   

 ⊃⍸⍵=s                                                       find indices of n in the spiral                
(     )⌷                                                     and index into the matrix of neighbours 
</code></pre>
","80214","","80214","","2020-12-14 15:34:21","2020-12-14 15:34:21","","","","0","","","","CC BY-SA 4.0"
"216339","2","","123807","2020-12-14 16:30:55","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 40 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>'*'@((⍳2)∘×¨⎕∘+¨⍸⊤1 5 3)⊢'|',⍨10 20⍴'|_'
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97b@6lrqDhsaj3s1Gmo86ZhyefmjFo76pQJY2kNG741HXEkMFUwVjzUddi9Rr1HUe9a4wNFAwMnjUu0W9Jl4dZMT/NC5zBXMA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A full program, accepting x and y as input.</p>
<p>Calculate coordinates, and uses <code>@</code> to modify them.</p>
","80214","","80214","","2020-12-16 06:27:39","2020-12-16 06:27:39","","","","0","","","","CC BY-SA 4.0"
"216341","2","","97143","2020-12-14 16:47:43","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 24 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{4⌷x←'*'=,⍵:'*'⋄+/x}⌺3 3
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkG/6tNHvVsrwAy1bXUbXUe9W61AjIedbdo61fUPurZZaxg/D8NKPuot@9RV/Oj3jWPerccWm/8qG0i0IjgIGcgGeLhGfw/TQEopK4ABFoK6grqWiAWiKGAhaGlBWFogRVzAY0AWa/OBTFDCwhAJoAodDm4USgkhgkQKZg1cIVaWOyCyoJpLYjr0NwL9wrIRVhsU4B4GlkXNBBQZMBWaSG5CcJD0oNsAExGS0EL1R0KKHpAHC4A"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A direct stencil operation.</p>
<p>Input as a character matrix, output as a hybrid matrix.</p>
<p><a href=""https://tio.run/##K8gs@P9f6VHf1EdtE9TVlfTy9JTSFB61TVTS00gMUo9WVw9SjwUSecWa////j1YAAS0QEcsF4YD5MA5MRgvE0AKRcGUgHpIeZANgMloQ/WADUGXgHAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Testcase converter</a></p>
","80214","","","","","2020-12-14 16:47:43","","","","0","","","","CC BY-SA 4.0"
"216355","2","","79037","2020-12-15 06:18:08","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 4 bytes</h1>
<pre><code>←kLg
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbhGyf9P///0cb6gChARyBcSwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-12-15 06:18:08","","","","0","","","","CC BY-SA 4.0"
"216362","2","","96180","2020-12-15 10:06:09","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>ṁΣḣdi*^¹10\
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxnOLH@5YnJKpFXdop6FBzP///80B"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>ṁΣḣdi*^¹10\
          \ reciprocal of input
     *^¹10  multiply with 10^input
    i       convert to int
   d        digits
  ḣ         prefixes
ṁΣ          map-sum with sum 
</code></pre>
","80214","","80214","","2020-12-15 10:32:07","2020-12-15 10:32:07","","","","0","","","","CC BY-SA 4.0"
"216377","2","","216369","2020-12-15 13:47:36","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 20 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>år╢T&gt;∩E%&gt;►ΣD&quot;╬@☼≡ ╫^
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8672b6543eef45253e10e44422ce400ff020d75e&amp;i=X%0A0%0A1%0A1X0%0A1X0X1%0AX0X0X0X%0A1X1X1X1X1X1X1X1X1X1X1%0A1X01X01X01X01X01X01X01X01X01X01X01X0%0AX000X000X000X000X000X000X000X000X000X000X000X000%0A101%0AXXX&amp;a=1&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Shortened from 32 by borrowing the idea from Kevin Cruijssen's answer.</p>
","80214","","80214","","2020-12-15 13:57:31","2020-12-15 13:57:31","","","","0","","","","CC BY-SA 4.0"
"216424","2","","74635","2020-12-16 10:48:04","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 91 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>'*'↑⍨-1+3×w←⎕
' /'[⊖a],' ',' \'[a←∘.=⍨⍳w×3]
' |-'[2⍪⍨2⍪¯1↓⊃⍪/⎕⌿⊂1,⍨⊃,/w/⊂⍉3⊤269+⎕AV⍳'4 4#']
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qp/@jtgkGXI862tP@q2upP2qb@Kh3ha6htvHh6eVAGaAKLnUFffXoR13TEmN11BXUgThGPToRJNcxQ88WqPpR7@byw9ONY4EKa3TVo40e9a4CioKoQ@sNH7VNftTVDGTrA4161LP/UVeToQ5IU1ezjn65PpD7qLfT@FHXEiMzS22gEscwoHHqJgomyuqx/4Gu@p/GZQiEaVzGXCYA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Full program, takes columns, then rows, on separate lines.</p>
","80214","","","","","2020-12-16 10:48:04","","","","0","","","","CC BY-SA 4.0"
"216431","2","","78945","2020-12-16 13:20:33","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 76 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{(1=≢∪' '~⍨∊⍵)∧×/5&gt;a/⍨×a←∊g↓⍉↑(g←{⊃,/{×⊃⍵:+/⍵⋄⍵}¨⍵⊂⍨1,2{≠/0=⊃¨⍺⍵}/⍵}¨)' '=⍵}
</code></pre>
<p><a href=""https://tio.run/##nU@xSsNQFN3zFRdi@tpYiVW6CJFCF50E6@IYKOlSVOokQQeVkEReqEjJKi6WIrjYxbH5k/sj6b3PWJMSOngCeeede849iXM13OnfOMPLQYbxpHsOou9eXIvMq7dsDN8wmAkQdyinGEQo5w0M3tPEah86Fmlp4qA/pskA/ReUIfrPdaJjD6OHpuWlCZ0UOtgm8xyfHul9u5gyj@4p3mrueRi@Wrs2@Vj/ZoP142pQr800c7lDxmrXB8qvxec@FdHX9k679D47Ou5lI9UaT9hKM9XmAse1EQg9B63UAeCXllRdhz@6ZljfUV4Hm4NbOUg3TXMzXXk5aOQg3eAWAxRlAFSp7OXgSQ6xoiCq1BLlYK0IGtag8PC9cP3fvLifGzsMmnToTypPNde0JQ"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Accepts input as a list of strings.</p>
<p>1 for floating, and 0 for sinking.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{(1=≢∪' '~⍨∊⍵)∧×/5&gt;a/⍨×a←∊g↓⍉↑(g←{⊃,/{×⊃⍵:+/⍵⋄⍵}¨⍵⊂⍨1,2{≠/0=⊃¨⍺⍵}/⍵}¨)' '=⍵}
                                                                      ' '=⍵ boolean array for spaces
                              (g←{⊃,/{×⊃⍵:+/⍵⋄⍵}¨⍵⊂⍨1,2{≠/0=⊃¨⍺⍵}/⍵}¨)       apply the following function g to each row:
                                                    1,2{≠/0=⊃¨⍺⍵}/⍵         get the start of each group of zeroes/nonzero values
                                                 ⍵⊂⍨                        cut the list according to that
                                     {×⊃⍵:+/⍵⋄⍵}¨                           sum each nonzero array
                                  ⊃,/                                       join all of that together
                         g↓⍉↑                                               apply g again on the transpose
                  a/⍨×a←∊                                                   flatten and remove zeroes
              ×/5&gt;                                                          are all sums ≤ 4?
             ∧                                                              and
     ' '~⍨∊⍵                                                                the boat with spaces removed
    ∪                                                                       uniquified 
 1=≢                                                                        has only 1 element?
                
</code></pre>
","80214","","80214","","2020-12-16 17:42:16","2020-12-16 17:42:16","","","","0","","","","CC BY-SA 4.0"
"216445","2","","111222","2020-12-16 16:58:26","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 21 bytes</h1>
<pre><code>:&quot;0&quot;mȯwfI§e⌊%1↑≤Σ⁰¡+³
</code></pre>
<p><a href=""https://tio.run/##ATYAyf9odXNr//86IjAibcivd2ZJwqdl4oyKJTHihpHiiaTOo@KBsMKhK8Kz////MS8y/1syLDMvNF0"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Have to prepend a 0 string before, cause filtering out zeroes messes with it.</p>
<p><a href=""https://tio.run/##y8/I/f/f0/PQIn1PT/1EfWUrlXgtHev//w31jRQMAQ"" rel=""nofollow noreferrer"" title=""Ohm – Try It Online"">Does anybody know how to run the Ohm answer?</a></p>
","80214","","","","","2020-12-16 16:58:26","","","","0","","","","CC BY-SA 4.0"
"216446","2","","68637","2020-12-16 17:27:53","","3","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>38 37 35</s></sup> 30 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⍎'F'~⍨'\+F' '-F'⎕R'(+-×)' '1-'
</code></pre>
<p><a href=""https://tio.run/##XZG/SgNBEMb7PMV0m@Nc2T/Zu7MWFm0TS5uAxCagrY2NkEK4oIWksrcQbAR78yb7IufMzu5e4nEsw@xvvplvdnm/ljcPy/Xd7TCEfiu8eAz9h7iuvQAhvQjbt7mY1nK/qzChpRhWYfOCZHh@Cv1n6L9/v2zYvCK3mJ/jeXVxuRhWIBzUHrSCGqyASejfQc5aoO8ENEiY0uEq2O841LaaYBlWYMakEqMglRhKa1UQ1E6MLoweGWMpzp2bsyLD@SgTY8/KmWxtl8UYNYV3ZIVM5eFmkFXpqniyoyfDlhwO/ONLDzcOHG/SOBy7TJnTzh5RLmLSA/8q2wf4v9V4qCo2l05lkkImcfFKJbWGdl9e6FDL8ZbIcmN5V@Upjera9qipNsm3TDQu4g8"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A tacit function which accepts a string.</p>
<p>Evaluation is done as per Rule 6: strict right to left, as per APL's evaluation.</p>
<p>-1 byte from Adám.</p>
<p>-2 more from Adám.</p>
<p>-5 bytes from Bubbler.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>⍎'F'~⍨'\+F' '-F'⎕R'(+-×)' '1-'
            '-F'⎕R        '1-'  regex replace '-F' with '1-'
      '\+F'     ⎕R'(+-×)'       regex replace '+F' with function to perform 1-((1-x)×(1-y))
 'F'~⍨                          remove any other Fs
⍎                               execute as APL code
</code></pre>
","80214","","80214","","2020-12-17 08:28:17","2020-12-17 08:28:17","","","","6","","","","CC BY-SA 4.0"
"216478","2","","47134","2020-12-17 07:27:04","","1","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 7 bytes</h1>
<pre><code>2*’BS$Þ
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8/99I61HDTKdglcPz/v//bwwA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>2*’BS$Þ
2*      2^n
  ’     decremented
     $Þ sort the (implicit) range using the following two functions:
   B    binary
    S   summed
</code></pre>
","80214","","","","","2020-12-17 07:27:04","","","","0","","","","CC BY-SA 4.0"
"216480","2","","216479","2020-12-17 08:26:14","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 4 bytes</h1>
<pre><code>Sż+Θ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/joHu1zM/7//x9tqGNooGNiqmNoZKBjBGQamRqBaRAfJAxkxQIA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>Sz+Θ
S     take the input
   Θ  and itself with 0 prepended
 ż+   and zip with addition, preserving elements
</code></pre>
","80214","","80214","","2020-12-17 10:34:21","2020-12-17 10:34:21","","","","1","","","","CC BY-SA 4.0"
"216507","2","","52052","2020-12-17 12:43:16","","3","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 240 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>e←' '@(p/⍨~(x←∊∘'Pp')(b←↑⊃¨,/¨{⍵∊⎕D:' '/⍨⍎⍵⋄⍵}¨¨'/'(≠⊆⊢)⎕)[p←p/⍨{∧/⍵∊⍳8}¨p←(⊃⌽c←{(9-⍎⊃⌽⍵),⎕A⍳⊃⍵}¨↓2 2⍴1⎕C⎕)∘+¨,∘.,⍨2-⍳3])
1↓⊃,/{'/',⊃,/{' '∊⍵:⍕≢⍵⋄⍵}¨⍵⊂⍨1,2≠/⍵}¨↓{(x⊃n)∧(≠/⊃¨⌽¨c)∧' '=⊃⌽n←b[c]:e' '@((⊃c)+0,1↓⊃-⍨/c)⊢b⋄' '∊n:(⌽n)@c⊢b⋄e' '@c⊢b}0
</code></pre>
<p><a href=""https://tio.run/##ZZHBTttAEIbvforc1hZOh92NgUaqRN3eIkWOr4gDdpxUCnKXqAcqix5KlQZTo1YVEkeUC75Tjr3kUfZF0n@MqSrqlezZ2fn/@WZ9ZI67449Hx@@n3ez0Q5aPs/HGLr9ONpldfBcdse8aslX9yT3F3i5Lu7wRkRGem/B@8cOW5@vap3Vd2OqBz6@u3/ahY5Gtrjh5@QXvs3W9rgUJ117c2nJhy5WHUu/AwKbpUNjlHbUe1f0e6vnIhb/99jtFWLgvu@zYJFDo@TB4jVrONA3s4qfqKFv9kjh5w/ag3QIePi989FAwuNeHniNRCplPBZD8NuqIpvdD31bX9mL1LzrH5Wc4SF9hAPrbr8C9lOc5Gt25zQFfB/jWdco5eL56BM4xQXKQHvaz5lJ5rtTb2vZbEoDVBEm5StD0ESXvuyz09tM23Uibzdk2/6TNxBFTOdHCEfM8OZkl@ZxM@9Beu6L2oXgYjgbhMBYOboZ/rnCgn6gp6/UsTCSrA0Pa9KhnckXRLslIRdJEpOYRQoplqOPBMwed7D4RSBBImJBRxiCgwCiSyTAg2EQjOQSOxGIcGcpBKJ/hZMF458lMMY/CImW0ScAVaQpAoeDHI8GTbUb/26Q77yRsgjmKZ6CRYQAuTKIxUQ8yHfWa8QY6lifiDw"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A full program which takes the FEN first, and the move second.</p>
<h2>Explanation</h2>
<p><strong>First Line: Explode. Function</strong></p>
<pre class=""lang-apl prettyprint-override""><code>e←' '@(p/⍨~(x←∊∘'Pp')(b←↑⊃¨,/¨{⍵∊⎕D:' '/⍨⍎⍵⋄⍵}¨¨'/'(≠⊆⊢)⎕)[p←p/⍨{∧/⍵∊⍳8}¨p←(⊃⌽c←{(9-⍎⊃⌽⍵),⎕A⍳⊃⍵}¨↓2 2⍴1⎕C⎕)∘+¨,∘.,⍨2-⍳3])
</code></pre>
<p><code>1⎕C⎕</code> capitalize the first input</p>
<p><code>↓2 2⍴</code> cut into halves</p>
<p><code>{(9-⍎⊃⌽⍵),⎕A⍳⊃⍵}¨</code> apply the following to each square name:
<code>         ,⎕A⍳⊃⍵</code> get position of first char in the alphabet(column)
<code>(9-⍎⊃⌽⍵)       </code> get 9-int(second char) (row number)</p>
<p><code>c←</code> store that in c</p>
<p><code>⊃⌽</code> take the last element</p>
<p><code>∘+¨</code> and add that to:</p>
<p><code>,∘.,⍨2-⍳3</code> the cartesian product of (-1,0,1), getting the von neumann neighborhood</p>
<p><code>p←</code> assign the explosion indices to p</p>
<p><code>p←p/⍨{∧/⍵∊⍳8}¨</code> remove the ones outside the board, and reassign to p</p>
<p><code>(...)[...]</code> and index into the following:</p>
<p><code>'/'(≠⊆⊢)⎕</code> split the second input on slashes</p>
<p><code>⊃¨,/¨{⍵∊⎕D:' '/⍨⍎⍵⋄⍵}¨¨</code> convert each digit to the appropriate amount of spaces</p>
<p><code>b←↑</code> and convert it to a matrix, storing in b. This is the chess board.</p>
<p><code>x←∊∘'Pp'</code> store function to check for pawns in x</p>
<p><code>p/⍨~(x←∊∘'Pp')</code> now, remove the points which map to pawns</p>
<p><code>' '@</code> and insert a space at those indices in the right argument.</p>
<p><strong>Second line: capture calculator</strong></p>
<pre class=""lang-apl prettyprint-override""><code>1↓⊃,/{'/',⊃,/{' '∊⍵:⍕≢⍵⋄⍵}¨⍵⊂⍨1,2≠/⍵}¨↓{(x⊃n)∧(≠/⊃¨⌽¨c)∧' '=⊃⌽n←b[c]:e' '@((⊃c)+0,1↓⊃-⍨/c)⊢b⋄' '∊n:(⌽n)@c⊢b⋄e' '@c⊢b}0
</code></pre>
<p><code>n←b[c]</code> assign the starting and ending characters to n</p>
<p><code>' '=⊃⌽n←b[c]</code> If ending square is empty,</p>
<p><code>(≠/⊃¨⌽¨c)∧</code> start column and end column are not equal,</p>
<p><code>(x⊃n)∧</code> and capturing piece is a pawn(en passant):</p>
<p><code>0,1↓⊃-⍨/c</code> get the direction of capture</p>
<p><code>(⊃c)+</code> add that to the start index</p>
<p><code>' '@((⊃c)+0,1↓⊃-⍨/c)⊢b</code> insert a space at that point</p>
<p><code>e</code> and <strong>explode.</strong></p>
<p><code>' '∊n</code> else, if ending point is a space(no capture):</p>
<p><code>(⌽n)@c⊢b⋄</code> switch the places of the space and the piece</p>
<p><code>' '@c⊢b</code> Otherwise, insert a space at the start and end index(normal capture)</p>
<p><code>e</code> and <strong>explode.</strong></p>
<p><code>¨↓</code> then, take each row,</p>
<p><code>⍵⊂⍨1,2≠/⍵</code> group it into equal runs</p>
<p><code>{' '∊⍵:⍕≢⍵⋄⍵}¨</code> replace runs of spaces with their length.</p>
<p><code>'/',⊃,/</code> join everything together and prepend a /</p>
<p><code>1↓⊃,/</code> join the rows together and drop the first /.</p>
","80214","","80214","","2020-12-18 14:50:27","2020-12-18 14:50:27","","","","0","","","","CC BY-SA 4.0"
"216519","2","","216512","2020-12-17 16:18:16","","2","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 87 bytes</h1>
<pre><code>Y($+_)%256M(@&gt;g&lt;&gt;@g)ZD0
((,tALz)Jx)@_M($+_)%36M Z[{@RVTBa}My{FB((TBa)@&gt;-5)}M(@&gt;y)AL@yy]
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/UkNFO15T1cjUzFfDwS7dxs4hXTPKxYBLQ0OnxNGnStOrQtMh3heiyNjMVyEqutohKCzEKbHWt7LazUlDA8jUdLDTNdWsBRlQqeno41BZGfv/vwmXoYURl6GBJZeRoSGXoYkJl5kpmGtoAKSNgdjUkMvI2Pi/bhEA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>This was much harder than I expected.</p>
<p>Input is taken as a list of lines. First line is <code>block_size</code>, rest of the lines are the data.</p>
","80214","","","","","2020-12-17 16:18:16","","","","0","","","","CC BY-SA 4.0"
"216546","2","","216540","2020-12-18 02:29:50","","4","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 20 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ÜTCÑ ¢@∙╡·Gò╝╠Δh÷╠╧m
</code></pre>
<p><a href=""https://staxlang.xyz/#p=9a5443a5209b40f9b5fa4795bcccff68f6cccf6d&amp;i=3"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>This uses the fact that results need not be unique.</p>
<p><sup><sup>As with most of caird's challenges, you get brownie points for finding/outgolfing my 16 byte Husk solution :P</sup></sup></p>

<h2>Explanation</h2>
<pre><code>Wi:r3:${{x#mNs|+:-2&lt;f|uP
W                        iterate forever
 i                       push current iteration index
  :r                     symmetric range (-n..n)
    3:$                  cartesian power of 3
       {            f    filter each triple by the following:
        {x#m             map each number to the power of input
            Ns           push the last element separately
              |+         sum the first two
                :-       absolute difference
                  1=     equals 1?
                     |u  stringify the result
                       P print with newline
</code></pre>
","80214","","80214","","2020-12-18 10:39:04","2020-12-18 10:39:04","","","","5","","","","CC BY-SA 4.0"
"216602","2","","216576","2020-12-19 01:57:08","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>foS=upİ↔
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Py0/2La04MiGR21T/v8HAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2020-12-19 01:57:08","","","","0","","","","CC BY-SA 4.0"
"216606","2","","216594","2020-12-19 03:26:49","","4","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>16</s></sup> 14 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>¯1 4⍴⍋2/,∘⌽⍨…⎕
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97f@h9YYKJo96tzzq7TbS13nUMeNRz95HvSseNSx71DcVpOR/GpcRAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a>, <a href=""https://staxlang.xyz/#p=854aaf5cc29ce02fe98c14f424&amp;i=12"" rel=""nofollow noreferrer"">Stax</a></p>
<p>A port of xash's solution.</p>
<p>a full program which returns a matrix.</p>
<p>-2 bytes from Bubbler.</p>
","80214","","80214","","2020-12-19 11:50:22","2020-12-19 11:50:22","","","","1","","","","CC BY-SA 4.0"
"216610","2","","67072","2020-12-19 08:41:31","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 35 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⍬⊣⎕{⎕←⌽⍵↑'.'⋄1⌈40⌊⍵+3-?5⊣⎕DL⍺}⍣⎕⊢20
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qKM97f@j3jWPuhY/6ptaDcSP2iY86tn7qHfro7aJ6nrqj7pbDB/1dJgYPOrpAgpqG@vam0IUu/g86t1V@6gXxH7UtcjIAGTY/zQuYwMuIwA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A full program which takes n as first input and s as the second.</p>
<pre class=""lang-apl prettyprint-override""><code>⍬⊣⎕{⎕←⌽⍵↑'.'⋄1⌈40⌊⍵+3-?5⊣⎕DL⍺}⍣⎕⊢20
   {                         }⍣⎕    do the following n times
  ⎕                                 with s as constant left argument ⍺
                                ⊢20 and 20 as right argument ⍵
       ⍵↑'.'                        take ⍵ characters from '.'   
      ⌽                             reverse to pad with spaces
    ⎕←                              and display it    
                         ⎕DL⍺       delay s seconds
                        ⊣           suppress it's return value with
                      ?5            a random number in 1-5
                    3-              subtract from 3 to get negative possibilities
                  ⍵+                add current ⍵ to it
               40⌊                  minimum of that and 40
             1⌈                     maximum of that and 1
⍬⊣                                  suppress the final return value.
</code></pre>
","80214","","80214","","2020-12-19 11:57:20","2020-12-19 11:57:20","","","","0","","","","CC BY-SA 4.0"
"216636","2","","216621","2020-12-20 03:30:26","","4","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 18 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>é·║⌂╞8Q⌡ë♀NM╟¥É▌╦!
</code></pre>
<p><a href=""https://staxlang.xyz/#p=82faba7fc63851f5890c4e4dc79d90ddcb21&amp;i=%5B1,2,3,4%5D%0A%5B123,+64,+0,+-4%5D%0A%5B7,+11%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Manually pads with 1s/0s to get the correct representation.</p>
<p>Displays a single number for each testcase.</p>
","80214","","","","","2020-12-20 03:30:26","","","","3","","","","CC BY-SA 4.0"
"216741","2","","216734","2020-12-22 03:12:59","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>mo±€¹ḣ▲
</code></pre>
<p><a href=""https://tio.run/##ASEA3v9odXNr//9tb8Kx4oKswrnhuKPilrL///9bMCwyLDQsNV0"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>I feel like I'm missing a way to do this with <code>η</code>.</p>
<h2>Explanation</h2>
<pre><code>mo±€¹ḣ▲
     ḣ▲ range 1..max(input)
mo      map each to
   €¹   whether it's present in the input(index if present, 0 if not)
  ±     and take the sign of that
</code></pre>
","80214","","80214","","2020-12-22 03:20:45","2020-12-22 03:20:45","","","","0","","","","CC BY-SA 4.0"
"216815","1","","","2020-12-23 03:41:02","","6","348","<p><a href=""https://codegolf.codidact.com/posts/280092"" rel=""nofollow noreferrer"">Codidact post</a>, <a href=""https://codegolf.meta.stackexchange.com/a/20491/80214"">CGCC Sandbox</a>, <a href=""https://codegolf.codidact.com/posts/279245"" rel=""nofollow noreferrer"">Codidact Sandbox</a></p>
<p>Given three positive integers as input, animate an ascii-art polygonal loading symbol on the screen.</p>
<h2>Intro</h2>
<p>You will be given three inputs, <span class=""math-container"">\$n\$</span>, <span class=""math-container"">\$l\$</span>, and <span class=""math-container"">\$d\$</span>...</p>
<p><span class=""math-container"">\$n\$</span> (one of <span class=""math-container"">\$3\$</span>, <span class=""math-container"">\$4\$</span>, <span class=""math-container"">\$6\$</span>, or <span class=""math-container"">\$8\$</span>), is the number of sides of a polygon:</p>
<pre><code>                           * * *
                          *     *
                * * *    *       *
               *     *   *       *
  *    * * *  *       *  *       *
 * *   *   *   *     *    *     *
* * *  * * *    * * *      * * *
</code></pre>
<p><span class=""math-container"">\$l\$</span> is the side length to use. (The above all use <span class=""math-container"">\$l = 3\$</span>, the minimum possible value).</p>
<p>You may use any printable ASCII character other than space instead of <code>*</code>.</p>
<p><span class=""math-container"">\$d\$</span> is the load length and is less than the perimeter.</p>
<p>The task is to create a loading animation as follows:</p>
<ol>
<li>Make the first frame of the animation by starting at any one of the topmost corners and drawing the perimeter until its length is <span class=""math-container"">\$d\$</span>.</li>
<li>Make the next frame by shifting this partial perimeter by 1 clockwise.</li>
<li>Repeat step 2 ad-infinitum.</li>
</ol>
<p>For example, <span class=""math-container"">\$n=3,l=3,d=4\$</span> would result in the following steps:</p>
<pre><code>  *                          *       *        *
   *  -&gt;    *  -&gt;  *    -&gt;  *   -&gt;  * *  -&gt;  * *  -&gt; . . .
  * *    * * *    * * *    * *     *            *
</code></pre>
<h2>Example</h2>
<p>Here is a solution made by <a href=""https://codegolf.codidact.com/posts/280096#answer-280096"" rel=""nofollow noreferrer"">Hakerh400</a>: <a href=""https://hakerh400.github.io/cg/280092/"" rel=""nofollow noreferrer"">Try It Online!</a></p>
<h2>Further details(important):</h2>
<ul>
<li>You are guaranteed that <span class=""math-container"">\$n∊(3,4,6,8)\$</span></li>
<li>You are guaranteed that <span class=""math-container"">\$l≥3.\$</span>
You are guaranteed that <span class=""math-container"">\$d&lt;(l-1)×n.\$</span></li>
<li>There must be a delay of at least 0.1 s between each step. You can have a delay of up to 10 seconds.</li>
<li>Your language is allowed to output a list of steps infinitely if and only if it cannot clear the screen or do something similar.</li>
<li>If so, there must be at least 2 newlines between each step.</li>
<li>This is not <a href=""/questions/tagged/graphical-output"" class=""post-tag"" title=""show questions tagged &#39;graphical-output&#39;"" rel=""tag"">graphical-output</a>.</li>
</ul>
<h2>Scoring</h2>
<p>This is <a href=""/questions/tagged/code-golf"" class=""post-tag"" title=""show questions tagged &#39;code-golf&#39;"" rel=""tag"">code-golf</a>. Shortest answer in each language wins.</p>
","80214","","53748","","2020-12-24 01:57:19","2020-12-28 12:38:39","Golf me a polygonal loader","<code-golf><ascii-art><animation>","3","9","1","","","CC BY-SA 4.0"
"216838","2","","77866","2020-12-23 17:06:44","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 16 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ê±°&quot;;╙ñ♀C¼EE^☼ùΣ
</code></pre>
<p><a href=""https://staxlang.xyz/#p=88f1f8223bd3a40c43ac45455e0f97e4&amp;i=7%0A69&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-12-23 17:06:44","","","","0","","","","CC BY-SA 4.0"
"216853","2","","17665","2020-12-24 03:07:07","","4","","<h1><code>⎕FMT</code>, the formatting function</h1>
<p><a href=""https://help.dyalog.com/latest/#Language/System%20Functions/Format%20Dyadic.htm"" rel=""nofollow noreferrer"">Dyalog documentation page</a></p>
<p>In <a href=""https://codegolf.stackexchange.com/a/216797/80214"">user's answer to ascii art reflection,</a>, they used an interesting builtin called <code>⎕FMT</code> to split text on a carriage return <code>\r</code>. I feel it has potential to save a lot of bytes in <a href=""/questions/tagged/ascii-art"" class=""post-tag"" title=""show questions tagged &#39;ascii-art&#39;"" rel=""tag"">ascii-art</a> and <a href=""/questions/tagged/string"" class=""post-tag"" title=""show questions tagged &#39;string&#39;"" rel=""tag"">string</a> challenges. It works very well with specific output/input specifications.</p>
<h2>Converting carriage return separated input directly to a matrix</h2>
<p>A string with carriage returns can be converted directly to the matrix using monadic <code>⎕FMT</code>:</p>
<pre><code>      ⎕FMT'Hello'(⎕UCS 13)'There'
 Hello 
 There 
      ⍴⎕FMT'Hello'(⎕UCS 13)'There'
2 7
</code></pre>
<p>It automatically pads the matrix with spaces, just like <code>↑</code>(mix).</p>
<hr />
<p><code>⎕FMT</code> can take arrays as arguments, and can apply a format specification to each of it's elements. However, the rank of the array must not exceed 2, and the format specifier must be a proper match for the elements.</p>
<p>There are multiple format specifiers allowed, which give different results:</p>
<pre><code>rAw     Alphanumeric format
rEw.s   Scaled format
rqFw.d  Decimal format
rqG⍞pattern⍞    Pattern
rqIw    Integer format
Tn  Absolute tabulation
Xn  Relative tabulation
⍞t⍞     Text insertion
</code></pre>
<p>Where:</p>
<pre><code>r   is an optional repetition factor indicating that the format phrase is to be applied to r columns of Y
q   is an optional usage of qualifiers or affixtures from those described below.
w   is an integer value specifying the total field width per column of Y, including any affixtures.
s   is an integer value specifying the number of significant digits in Scaled format; s must be less than w-1
d   is an integer value specifying the number of places of decimal in Decimal format; d must be less than w.
n   is an integer value specifying a tab position relative to the notional left margin (for T-format) or relative to the last formatted position (for X-format) at which to begin the next format.
t   is any arbitrary text excluding the surrounding character pair.  Double quotes imply a single quote in the result.
</code></pre>
<p>This allows a lot of useful tricks like format strings, ASCII tabulation, representation of arbitrary precision floating point values, and allow you to apply them cyclically to the contents of any matrix you choose. <code>⎕R</code> might be simpler to use in the case of a single line character vector, however.</p>
<p>These letters and their modifiers are discussed in more depth in the <a href=""https://help.dyalog.com/latest/#Language/System%20Functions/Format%20Dyadic.htm"" rel=""nofollow noreferrer"">Documentation</a>.</p>
","80214","","","","","2020-12-24 03:07:07","","","","0","","","","CC BY-SA 4.0"
"216854","2","","117583","2020-12-24 03:15:48","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>│¼µ\Ä▬Éε╩X
</code></pre>
<p><a href=""https://staxlang.xyz/#p=b3ace65c8e1690eeca58&amp;i=132"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2020-12-24 03:15:48","","","","0","","","","CC BY-SA 4.0"
"216869","2","","117382","2020-12-25 04:55:38","","2","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, <sup><s>109</s></sup> 107 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>f←{x←⊃P5.size←⍵.sz⋄s←4⋄P5.setup←{0 0P5.G.img P5.img{r←x÷s×2÷x⍴(x÷s)⌿1¯1⋄2|2⍟s+←s:←⍵⌽⍨-r⋄⍉r⌽⍉⍵}⍣{s=x}⍵.mat}}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pSszMTfz/P@1R24TqCiDxqKs5wFSvOLMqFcTp3apXXPWou6UYyDEB0iCp1JLSApBqAwUDINddLzM3XQHIAFLVRUDxisPbiw9PNzq8veJR7xYNEE/zUc9@w0PrDYH6jWqMHvXOL9YGqiu2gljwqGfvo94VukVA2Ue9nUVgbidQvPZR7@LqYtuKWpAjchNLamv//wcA"" rel=""nofollow noreferrer"" title=""APL (dzaima/APL) – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Adám.</p>
<p>A dfn which takes an <code>APLImg</code> object as an argument, and displays the dragonized image.</p>
<p>Here are some cool dragons I found:</p>
<p><a href=""https://i.stack.imgur.com/r5JFu.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/r5JFu.jpg"" alt=""enter image description here"" /></a> <a href=""https://i.stack.imgur.com/8HNRQ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8HNRQ.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/Hb3Nj.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Hb3Nj.jpg"" alt=""enter image description here"" /></a> <a href=""https://i.stack.imgur.com/xMZOx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xMZOx.png"" alt=""enter image description here"" /></a></p>
<p>Image courtesy: <a href=""https://unsplash.com/photos/SK6KOj0MaRc"" rel=""nofollow noreferrer"">ThisGuy</a> and <a href=""https://unsplash.com/photos/vg4QEMxw9-I"" rel=""nofollow noreferrer"">GuillaumeDeGermain</a> on unsplash.</p>
","80214","","80214","","2020-12-25 11:02:36","2020-12-25 11:02:36","","","","1","","","","CC BY-SA 4.0"
"216893","2","","216880","2020-12-26 05:56:24","","3","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 7 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⊢×!∘⍳∘≢
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkG/x91LTo8XfFRx4xHvZtBZOei/2lAiUe9fY@6mh/1rnnUu@XQeuNHbROBWoKDnIFkiIdn8P80hUPrTXQUDHUUjHQUDHQUjAE"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Uses <code>⎕IO←0</code> (0-indexing)</p>
<p>Input as a list of coefficients.</p>
","80214","","","","","2020-12-26 05:56:24","","","","0","","","","CC BY-SA 4.0"
"216913","2","","60459","2020-12-27 05:10:02","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 42 - 30 = 12 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>±à&gt;mª≈◄ΣÇyⁿ`à&gt;²CΔ7ù«▀╦X╠;7╣ⁿ¡♣ë╩■B§F»é▲Y∩«
</code></pre>
<p><a href=""https://staxlang.xyz/#p=f1853e6da6f711e48079fc60853efd43ff3797aedfcb58cc3b37b9fcad0589cafe421546af821e59efae&amp;i=Wesley%0APolly"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Fractions are great to have.</p>
","80214","","","","","2020-12-27 05:10:02","","","","0","","","","CC BY-SA 4.0"
"216915","2","","64007","2020-12-27 08:18:36","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 56 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{a←⍬⋄(×≢¨a)/a←a,⊂'\([^()]*\)'⎕R{''⊣a,←⊂⍵.Match~'()'}⍣≡⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///vzrxUduER71rHnW3aBye/qhz0aEViZr6IMFEnUddTeoxGtFxGpqxWjGa6o/6pgZVq6s/6loMlAJq6mp61LtVzzexJDmjTl1DU732Ue/iR50LgYK1/9PApvY96moGmd275dB640dtE4EmBAc5A8kQD8/g/2kK6okaSZrJGimaqepcEJ5GsiaCBwRJmkAA5WomgRkQHpgEKoCboJmmma6ZAZEEGgOUAgqmaYAENTQ1MjWzNLNzNIGuBAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A dfn which uses repeated regex replacement, and returns a list of strings (unordered).</p>
","80214","","","","","2020-12-27 08:18:36","","","","2","","","","CC BY-SA 4.0"
"216955","2","","49943","2020-12-28 07:18:10","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 8 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ä;ªÜé▐ßó
</code></pre>
<p><a href=""https://staxlang.xyz/#p=843ba69a82dee1a2&amp;i=%222+3+2%22%0A%221+2+3%22%0A%222+5+9%22%0A%221+2+3+4%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Uncompressed is 9 bytes, still beating CJam(with the same method).</p>
<h2>Explanation</h2>
<pre><code>|T{Ze*m|M
|T        permutations of input
  {   m   mapped to:
   Z      tuck a zero under the string
    e     evaluate the string
     *    multiply the top two elements
       |M get the maximum of the mapped list
</code></pre>
","80214","","","","","2020-12-28 07:18:10","","","","0","","","","CC BY-SA 4.0"
"216956","2","","9319","2020-12-28 07:48:20","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>S£o¡oΣ↑_L¹d
</code></pre>
<p><a href=""https://tio.run/##AR0A4v9odXNr//9TwqNvwqFvzqPihpFfTMK5ZP///zE5Nw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Returns the iteration at which the Keith number is present, otherwise 0.</p>
<p>This challenge is perfect for Husk.</p>
<h2>Explanation</h2>
<pre><code>S£o¡oΣ↑_L¹d
   ¡o       create an infinite list, starting with
          d the digits of the input
      ↑_L¹  take length(input) numbers from the end
     Σ      and sum to compute the next number
S£o         is the input present in the list?
</code></pre>
","80214","","","","","2020-12-28 07:48:20","","","","0","","","","CC BY-SA 4.0"
"217001","2","","147143","2020-12-29 05:31:00","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 3 bytes</h1>
<pre><code>mAX
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P9cx4v///8b/oy10THTMdIyA0CQWAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Output as a list of rationals.</p>
","80214","","","","","2020-12-29 05:31:00","","","","2","","","","CC BY-SA 4.0"
"217006","2","","106387","2020-12-29 16:09:08","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 4 bytes</h1>
<pre><code>ΣTgO
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9zikHT/////e6YpVOaXKhTnF5UoJCoUlxRl5qWDRNRzchRKKgsykxNzcioV0lNLgEpyU0syQNI5mdmpVgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>ΣTgO
   O Order
  g  group
 T   Transpose
Σ    join
</code></pre>
","80214","","","","","2020-12-29 16:09:08","","","","0","","","","CC BY-SA 4.0"
"217034","2","","217008","2020-12-30 02:43:09","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 18 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>âë┴fτ♪C┼Hnm♥ì╩≈╘9ù
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8389c166e70d43c5486e6d038dcaf7d43997&amp;i=400,%2215008%22"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>first input is the threshold and second input is the number as a string.</p>
","80214","","","","","2020-12-30 02:43:09","","","","0","","","","CC BY-SA 4.0"
"217062","2","","124154","2020-12-31 05:15:49","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 71 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>' '~⍨,({' ',2{∧/x←'AEIOU'∊⍨⍺⍵:'N'⋄∧/~x:'U'⋄' '}/⍵},⍪)'OIREASGTBP'[⍎¨⍕⎕]
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkGXI862tP@qyuo1z3qXaGjUQ1k6RhVP@pYrl8BlFZ3dPX0D1V/1NEFlH3Uu@tR71YrdT/1R90tIBV1FVbqoSAOUFOtPlCuVudR7ypNdX/PIFfHYPcQpwD16Ee9fYeAOqcCLYz9D7TrfxqXqaGRibEhVxqXhbGJmbm5gQWIbWxoYmhqaQRkGRoZm5iamVtYGgA5ZoZmJhaG5gA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>This turned out surprisingly short!</p>
<p>Uses <code>⎕IO←0</code> (0-indexing).</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>' '~⍨,({' ',2{∧/x←'AEIOU'∊⍨⍺⍵:'N'⋄∧/~x:'U'⋄' '}/⍵},⍪)'OIREASGTBP'[⍎¨⍕⎕]
                                                                  ⍎¨⍕⎕  get the digits of the input
                                                     'OIREASGTBP'[    ] map to the correct letters
      {' ',2{∧/x←'AEIOU'∊⍨⍺⍵:'N'⋄∧/~x:'U'⋄' '}/⍵},⍪                     join the following with the tabled argument:
                                              /⍵                        map pairs of the argument to:
           2 ∧/x←'AEIOU'∊⍨⍺⍵:'N'                                        N if vowel pair,
                                ⋄∧/~x:'U'                               U if consonant pair,
                                         ⋄' '                           space otheriwse.
       ' ',                                                             prepend a space
    ,                                                                   flatten the result
' '~⍨                                                                   remove all spaces
</code></pre>
","80214","","","","","2020-12-31 05:15:49","","","","0","","","","CC BY-SA 4.0"
"217081","2","","217077","2020-12-31 17:29:06","","5","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>20 18 10</s></sup> 9 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>·╦Eà3ΩQù»
</code></pre>
<p><a href=""https://staxlang.xyz/#p=facb458533ea5197af&amp;i=%5B%22one%22,+%22wont%22,+%22tee%22%5D%0A%5B%22aaa%22,%22bbb%22,%22ccc%22%5D%0A%5B%22oneword%22%5D%0A%5B%22thee%22,%22lee%22%5D%0A%5B%22tee%22,%22lee%22%5D%0A%5B%22three%22,%22eon%22,%22one%22,%22holt%22%5D%0A%5B%22xeon%22,%22threes%22,%22eon%22,%22one%22,%22holt%22%5D%0A%5B%22xeon%22,%22threes%22,%22eon%22,%22one%22,%22holt%22,%22apple%22,%22mango%22,%22george%22,%22any%22,%22fine%22%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p><s>Explanation coming next year™.</s> Happy new Year!</p>
<p>-8 bytes from recursive using the surprisingly fitting <code>multi-anti-mode</code> builtin.</p>
<p>-1 more byte from recursive with an insane compression hack.</p>
<p>Replacing <code>H</code> from <a href=""https://staxlang.xyz/#c=%24%7C%21x%7Bn%7C%26%25oH&amp;i=%5B%22one%22,+%22wont%22,+%22tee%22%5D%0A%5B%22aaa%22,%22bbb%22,%22ccc%22%5D%0A%5B%22oneword%22%5D%0A%5B%22thee%22,%22lee%22%5D%0A%5B%22tee%22,%22lee%22%5D%0A%5B%22three%22,%22eon%22,%22one%22,%22holt%22%5D%0A%5B%22xeon%22,%22threes%22,%22eon%22,%22one%22,%22holt%22%5D%0A%5B%22xeon%22,%22threes%22,%22eon%22,%22one%22,%22holt%22,%22apple%22,%22mango%22,%22george%22,%22any%22,%22fine%22%5D&amp;m=2"" rel=""nofollow noreferrer"">this version</a> with <code>E</code>(a lower codepoint), results in -1 byte due to packing magic.</p>
<h2>Explanation</h2>
<pre><code>$|!x{n|&amp;%oE
$           join the input together
 |!         get the rarest characters(anti-mode)
   x        push the input again
    {    o  and order by the following:
     n|&amp;    intersect with the anti-mode 
        %   and take the length
          E push all the elements onto stack
            implicitly print the last element
</code></pre>
","80214","","80214","","2021-01-01 02:55:48","2021-01-01 02:55:48","","","","0","","","","CC BY-SA 4.0"
"217107","2","","217090","2021-01-01 01:56:24","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>8</s></sup> 7 bytes</h1>
<pre><code>ṁȯ\dB9ḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxhPrY1KcLB/uWPz//39DAwMDAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Outputs the <span class=""math-container"">\$n^{th}\$</span> partial sum. I tried using <code>İ\</code> from <a href=""https://github.com/barbuz/Husk/wiki/Sequences"" rel=""nofollow noreferrer"">here</a>, but it's longer.</p>
<p>Uses fireflame's idea.</p>
<p>-1 byte from user.</p>
<h2>Explanation</h2>
<pre><code>∫mȯ\dB9N
       N the list of natural numbers
 mȯ      map to:
     B9  base 9 digits
    d    represented as base 10 number
   \     take reciprocal
∫        take the cumulative sum
</code></pre>
","80214","","80214","","2021-01-02 05:47:38","2021-01-02 05:47:38","","","","1","","","","CC BY-SA 4.0"
"217218","2","","65549","2021-01-03 09:05:17","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>moF≠ḋŀ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Pzff7VHngoc7uo82/P//38gAAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Using infinite list:</h2>
<pre><code>↑¹!¡S+m¬;0
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbxEM7FQ8tDNbOPbTG2uD///9GBgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-01-03 09:05:17","","","","0","","","","CC BY-SA 4.0"
"217330","2","","217297","2021-01-05 10:33:30","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>107</sup></s> 62 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⍎'\]' '\[' ',' '\(' '\)'⎕R')' '(' '{⍺+⍳0⌈1+⍵-⍺}' '(1↓' '-1)'⊢⎕
</code></pre>
<p><a href=""https://tio.run/##dZA9asNAEIV7nSLdSmQEO1rJJEdwZUi72kJgnMZgt8akdYSxTCDkAinTqAhpUuoocxF5VhJjS@Bm55s3P7ydYruOl7tivXlt6fw1X9DhQwdUvq9aqs4qd@pB5ZYf8BD6J1Lc@KIiZp/vqfp/pOpX06lEhr@YhTdfRDp8coyRJ47fPNTy3nYVKKshcypgCoW8FonWk30GNEO5qTNoahxnw8CoFo5q3GkgcTcsM6KHNzrb0GJNizUt1gayKJuEuv06ovKH@4ybaHaiuXtaIidBpl5JJ1fwalPPmBN39dP3mi4aSLuYyjETGG7iDWaA8hMD@OR71QU"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Does a huge regex replacement and then executes the string.</p>
<p>uses <code>∪</code> and <code>¯</code> for input.</p>
<p>Uses <code>⎕IO←0</code> (0-indexing)</p>
<p>-45 bytes by stealing a ton from <a href=""https://codegolf.stackexchange.com/a/217443/80214"">Adám's QuadR answer</a>(It has a well-written explanation, go upvote it!).</p>
","80214","","80214","","2021-01-08 03:27:14","2021-01-08 03:27:14","","","","4","","","","CC BY-SA 4.0"
"217359","2","","217328","2021-01-06 02:18:23","","1","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 40 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⊃1(,/↑,2↓⊢){'|','-'⍪⍢(1∘⊖)↑⌂deb⍵⊆⍨⍵≠⊃⍵}¨
</code></pre>
<p><a href=""https://tio.run/##nZDBSsNAEIbvfYrxtC0kaPUJRBAFT8YXiM02KaSJpCsqHS8qQaMpiigepacighd9gT7KvEicbEwlBMF0DruTn/kn37/2kW86Z7YfuqY8VTJwpJNllFx228YqxQ/GOsWPlEw7Y4HCEKag9I3SabtL1y@UPHd4hO4uHHlI6RclMaWzvLl55Q3cnM9nWZ/ie0onWnin9HP@sZGbJk/W/hafBzu7VubyzJg/@BKCbq/6kJtbLgiETfCk7cgIuA1C5XG3EPbskYJe6B8PAxYjCYAi95g/Bb/tH4LWtGd7EPEyLoQ1qBTCMOTdvTDg91HFjwqPJVl09EgUnlQ9yrOVECMYqJWFKJaI1DxQ8zhLhCmilEmwmgNrKfR7lYBY5cVaAj1dJsAqP9bo9XRJj1V2rJNjM/RG4I24/4ktWt8"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Adám's method.</p>
<p><strong>64 bytes(old)</strong></p>

<pre class=""lang-apl prettyprint-override""><code>{↑,/⍉↑{'|',¨¯1⌽(m∘↑¨1⌽⍵),⍨⊂'-'/⍨m←⌈/≢¨⍵}¨¯1⌽1↓1⌽⌂deb¨'|'(≠⊆⊢)¨⍵}
</code></pre>
<p><a href=""https://tio.run/##nVBNS8NAEL33V4ynbaGhFn@BCKLgyfoHYrP9gCaRdEWl46VKaGNTFBE8Sk85CL3o0Ut@yvyRONmYSgiC6Rx2Z9@@N/vemhcjw7oxR27fkNdKOpa0kmRC/lOzReGc94lA0YyjeN2mxVfdptkrg3GUnij8bDQpjCiYCkMwP7LJf6TFrEXzVRzx9W0ubJP/rCWLqSXP44iH1mn@RoFPwaqRcZNeqg6XFNxR@E7hR7ze47do@dI5PeD17Oi4k/SZM@EDb0LQw30PUmmtDwJhHwbStKQH3DquGnC3AU7MsYKuO7q0HQY9CYAi1Rg/Bb/tH4DGtOZw6PEwLoRdKBSC7fLsruvwV6rsoUzTkQxamuK5V0WNGphKiDEM1c4GFFtEqh6oepwtwmRR8iRYzIGlFPq/coNY9IulBJqdJ8Cifyy51@zcPRa9Y9k5VrNeyXgl3/@0LWrf"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>Takes the input as a list of lines, outputs a character matrix.</p>
<p>-9 bytes using <code>dfns.deb</code>.</p>
<h2>Explanation</h2>
<p><code>'|'(≠⊆⊢)¨⍵</code> split each line on pipes(<code>|</code>)</p>
<p><code>⌂deb¨</code> trim whitespace from both sides of each cell</p>
<p><code>¯1⌽1↓1⌽</code> drop the row with hyphens</p>
<p><code>{'|',¨¯1⌽(m∘↑¨1⌽⍵),⍨⊂'-'/⍨m←⌈/≢¨⍵}¨</code> do the following for each row:</p>
<p><code>m←⌈/≢¨⍵</code> set m to the maximum cell length</p>
<p><code>⊂'-'/⍨</code> create a cell of hyphens that long</p>
<p><code>,⍨</code> join with</p>
<p><code>m∘↑¨1⌽⍵</code> input shifted by 1, with each cell padded to length m.</p>
<p><code>¯1⌽</code> shift back to original position</p>
<p><code>'|',¨</code> prepend a pipe to each cell</p>
<p>Finally,</p>
<p><code>⍉↑</code> convert to matrix, and transpose</p>
<p><code>↑,/</code> join each row's cells, and convert to matrix again</p>
","80214","","80214","","2021-01-27 08:10:24","2021-01-27 08:10:24","","","","0","","","","CC BY-SA 4.0"
"217363","2","","217266","2021-01-06 06:50:11","","2","","<h1><a href=""https://github.com/mlochbaum/BQN"" rel=""nofollow noreferrer"">BQN</a>, 50 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{(519×(+´(⊢×1⊸⌽)𝕩⋆p)÷31+(27××´𝕩)÷3⋆˜+´𝕩)⋆÷p←1.535}
</code></pre>
<p><a href=""https://mlochbaum.github.io/BQN/try.html#code=RuKGkHsoNTE5w5coK8K0KOKKosOXMeKKuOKMvSnwnZWp4ouGcCnDtzMxKygyN8OXw5fCtPCdlakpw7cz4ouGy5wrwrTwnZWpKeKLhsO3cOKGkDEuNTM1fQoKb3DihpBGwqjin6gx4oC/MeKAvzHii4Qx4oC/MeKAvzLii4Qx4oC/MuKAvzLii4Qx4oC/MeKAvzEw4ouEMeKAvzLigL8z4ouEMeKAvzEw4oC/MTDii4Qx4oC/M+KAvzEw4p+pCnRlc3Rz4oaQMTIuNTY2NOKAvzIxLjQ3ODTigL8zNC42ODc14oC/OTkuMTUx4oC/NDguODgyMeKAvzY0Ny4yMuKAvzIxMi4wMApkZWx0YXPihpB8KG9wKS10ZXN0cwrijYk+4p+ob3Dii4R0ZXN0c+KLhGRlbHRhc+KLhGRlbHRhc8O3dGVzdHPii4QwLjAwMeKJpWRlbHRhc8O3dGVzdHPin6k="" rel=""nofollow noreferrer"">Try it!</a></p>
<p>An anonymous function which uses Arnauld's formula.</p>
<p>Input given as a single array.</p>
","80214","","80214","","2021-01-06 06:57:34","2021-01-06 06:57:34","","","","0","","","","CC BY-SA 4.0"
"217369","2","","217366","2021-01-06 08:54:19","","6","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""noreferrer"">Charcoal</a>, 14 bytes</h1>
<pre><code>←×_θ↖θ→↗θ×_θ‖Ｍ
</code></pre>
<p><a href=""https://tio.run/##S85ILErOT8z5//9R24TD0@PP7XjUNg1ETHrUNv3cDohIw7T3e9b@/x9taBD7XzcRAA"" rel=""noreferrer"" title=""Charcoal – Try It Online"">Try it online!</a></p>
<p>+1 byte fix from ASCII-Only.</p>
<p>Draws half of the hexagon, and mirrors it.</p>
","80214","","80214","","2021-01-06 09:39:06","2021-01-06 09:39:06","","","","7","","","","CC BY-SA 4.0"
"217370","2","","217366","2021-01-06 09:01:13","","12","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, <sup><s>15</sup></s> 9 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code> _；１＊⁸／∔╬
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JTIwXyV1RkYxQiV1RkYxMSV1RkYwQSV1MjA3OCV1RkYwRiV1MjIxNCV1MjU2Qw__,i=NQ__,v=8"" rel=""nofollow noreferrer"">Try it here!</a>, <a href=""https://dzaima.github.io/Canvas/?u=XyVENyUyMCV1MjA3OCV1RkYzQyV1MjIxNCV1RkYwQiV1MjE5NCV1MjU2Qw__,i=NQ__,v=8"" rel=""nofollow noreferrer"">another 9 bytes</a></p>
<p>-6 bytes after fixing the program.</p>
<p>Draws a quarter of the hexagon, and quad palindromizes.</p>
","80214","","80214","","2021-02-17 14:43:39","2021-02-17 14:43:39","","","","0","","","","CC BY-SA 4.0"
"217381","2","","9261","2021-01-06 17:17:07","","1","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, <sup><s>22</s></sup> 20 bytes</h1>
<pre><code>e€ØẠ+ƝỊŻœṗµḢ,ṪjW)ẎẊ€
</code></pre>
<p><a href=""https://tio.run/##PZA9TsNAEIWvMh1CRLkD4gog6rE98U60P9HuGMstZQoaCmiQECWiRSJJBwr3WC5iZm2EtMXsvLffzNs1WTuMI/3cvn095v3z2fdTPmyPh@N93j18vuePl0Xeva6vT/P@Lu@3ahvH8byuQ2zYtyABECIlwlgbioACF@iqyE1LcOX5hmJiGRbAAk2g5E8EHIqolT30Rv1K0psYAktFSEVB6LUPGGkxScHbAdhtQhT0oq0ynJMWKJNhxTEJoG/AohYzCiqCPz1yawQ2FmtawmVpkNpq9JNHcwhacJTSxBhCN2lJ2Fq1YlMC9CwmdEqJobLkCkdX0FNRjV2iaZDpnD50rJQSGHyQGUD6F8P/YppGEtkVVN284Jw3leQmWFr@Ag"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>This was fun to make.</p>
<p>Each non-alphabet character is grouped into a single character string, and the first and last characters of each word are grouped the same way as well. That way, taking a random permutation of those characters will not change their order.</p>
<p>Made with a lot of help from caird coinheringaahing.</p>
<p>-2 bytes from caird coinheringaahing.</p>
<h2>Explanation</h2>
<pre><code>e€ØẠ+2\ỊŻœṗ⁸µḢ,ṪjW)ẎẊ€ 
 €                     for each character:
e ØẠ                   check if it's in the alphabet
    +2\                add overlapping pairs
       Ị               check if they are ≤ 1
        œṗ⁸            and partition the input using that bitmask
           µ      )    execute the following on each part:
            Ḣ,ṪjW      get head, tail, and join with the modified list
                   Ẏ   join the list of triplets together
                    Ẋ€ get a random permutation of each of the elements
</code></pre>
","80214","","80214","","2021-01-07 02:38:29","2021-01-07 02:38:29","","","","1","","","","CC BY-SA 4.0"
"217382","2","","9261","2021-01-06 17:35:47","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>15 14</s></sup> 13 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>â#]ø\┘‼↕ip2╚_
</code></pre>
<p><a href=""https://staxlang.xyz/#p=83235d005cd91312697032c85f&amp;i=According+to+a+researcher+at+Cambridge+University,+it+doesn%27t+matter+in+what+order+the+letters+in+a+word+are,+the+only+important+thing+is+that+the+first+and+last+letter+be+at+the+right+place.+The+rest+can+be+a+total+mess+and+you+can+still+read+it+without+problem.+This+is+because+the+human+mind+does+not+read+every+letter+by+itself+but+the+word+as+a+whole."" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Regex is busted.</p>
<p>-2 bytes from recursive.</p>
","80214","","80214","","2021-01-08 03:04:08","2021-01-08 03:04:08","","","","0","","","","CC BY-SA 4.0"
"217413","2","","89283","2021-01-07 08:13:36","","0","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 10 bytes</h1>
<pre><code>ØA,Ɲẋ€13j⁷
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8///wDEedY3Mf7up@1LTG0DjrUeP2//8B"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>Noncompeting probably because some of the atoms are new.</p>
","80214","","","","","2021-01-07 08:13:36","","","","0","","","","CC BY-SA 4.0"
"217419","2","","65409","2021-01-07 08:53:49","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 93 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{↑⍕¨¨{(⊂1⌽'|',⍨¯1⌽⊃⍵),(¯1↓1↓⍵),⊂(⊢,⊢/)⊃⌽⍵}⊃{(⊂⍺,(⊃⌽⍺)+⊃⌽⊃⍵),⍵}/⌽⊂@1⌽{⍵,⊂-2-/⊃⌽⍵}⍣{1≥≢∪⊃⌽⍺}⊂⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v/pR28RHvVMPrTi0olrjUVeT4aOeveo16jqPelccWg/iPOpqftS7VVNHA8RtmwzCYD5QLVD9IiC9SF8TpAiotHdrLZAFNudR7y4dDZjwLk1tKBNqGEilPpjf5ACypBooADJR10hXH8ms3sXVho86lz7qXPSoYxXcsFqw8Vtr/6c9apvwqLcPbOiaR71bDq03Bvmmb2pwkDOQDPHwDP7vDlRTDeQAKXX1R90taQogrVzuCiYKFgqGpgqGZgpGxgomRkARIwUg10DB0FzByAwA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>The output format is a bit annoying, and takes up most of the space here.</p>
","80214","","","","","2021-01-07 08:53:49","","","","0","","","","CC BY-SA 4.0"
"217422","2","","126159","2021-01-07 10:31:12","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>6</s></sup> 5 bytes</h1>
<pre><code>↔k#¹u
</code></pre>
<p><a href=""https://tio.run/##yygtzv5flZpbfGhnbn7xo6bG/4/apmQrH9pZ@v///@hoQx0jHeNYHSANgkYgHhCa6JjqmMFFwTwwNAdCCxRoCZZDxrqmIJ2xsQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Leo.</p>
<h2>Explanation</h2>
<pre><code>↔k#¹u 
    u uniquify the input 
 k#¹  key on frequency in input
↔     reverse
</code></pre>
","80214","","80214","","2021-01-13 06:01:31","2021-01-13 06:01:31","","","","1","","","","CC BY-SA 4.0"
"217446","2","","95932","2021-01-08 08:18:15","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 30 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>↑{'×'@⍵⊢x}¨,\⊂¨y[?⍨≢y←,x←⍳2/⎕]
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkGXI862tP@P2qbWK1@eLq6w6PerY@6FlXUHlqhE/Ooq@nQispo@0e9Kx51LqoEqtapABKPejcb6QP1x/4Hav2fxmUKAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Uses <code>⎕IO←0</code> (0-indexing)</p>
<p>Uses the <code>×</code> symbol for replacement, in a grid of co-ordinate pairs.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>↑{'×'@⍵⊢x}¨,\⊂¨y[?⍨≢y←,x←⍳2/⎕]
                            ⎕  get the input n
                         ⍳2/   create an n×n coordinate grid
                       x←      store in x
                    y←,        convert to a list, and store in y
                 ?⍨≢           get indexes for shuffling the list
               y[            ] and get a random permutation of y
             ⊂¨                wrap each list
           ,\                  and get it's array prefixes
 {       }¨                    for each prefix:
  '×'@⍵⊢x                      place an '×' at those coordinates in the grid x
↑                              align all the grids into a matrix
</code></pre>
","80214","","","","","2021-01-08 08:18:15","","","","0","","","","CC BY-SA 4.0"
"217558","2","","17287","2021-01-13 14:37:03","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 7 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>èó±☻₧╛╗
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8aa2f1029ebebb&amp;i=%5B%22John%22,%22Doe%22,%22Dick%22,%22Harry%22,%22Harry%22,%22Doe%22,%22Doe%22,%22Harry%22,%22Doe%22,%22John%22%5D"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-01-13 14:37:03","","","","0","","","","CC BY-SA 4.0"
"217588","2","","217536","2021-01-14 12:44:11","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 24 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╘J∙╢☼♥DÉ♀→⌂NP¶▐↓╚∞J¼╣øCû
</code></pre>
<p><a href=""https://staxlang.xyz/#p=d44af9b60f0344900c1a7f4e5014de19c8ec4aacb9004396&amp;i=1%0A2%0A3%0A4%0A5%0A6%0A7%0A8%0A9%0A10%0A11%0A12%0A13%0A14%0A15%0A16%0A17%0A18%0A19%0A20&amp;a=1&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Algorithm borrowed from Kevin Cruijssen's answer, can probably be optimized further.</p>
","80214","","","","","2021-01-14 12:44:11","","","","0","","","","CC BY-SA 4.0"
"217593","2","","17287","2021-01-14 16:24:59","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>u↔Ö#¹
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/v/RR25TD05QP7fz//3@0kld@Rp6SjpJLfiqIzEzOBlIeiUVFlUg0VBJMooqBdccCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-01-14 16:24:59","","","","0","","","","CC BY-SA 4.0"
"217611","2","","59625","2021-01-15 10:43:47","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 5 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╤•╗jP
</code></pre>
<p><a href=""https://staxlang.xyz/#p=d107bb6a50&amp;i=Type+unique+chars%21%0A%22I+think+it%27s+dark+and+it+looks+like+rain%22,+you+said%0A%223.1415926535897932384626433832795%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-01-15 10:43:47","","","","0","","","","CC BY-SA 4.0"
"217624","2","","217614","2021-01-15 15:47:42","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>†szeŀ256Sṙohṡ128
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HDguKq1KMNRqZmwQ93zszPeLhzoaGRxf//AA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a>, <a href=""https://tio.run/##ASIA3f9odXNr///igKBz4bmgemVvzpjFgFPhuZlvaOG5oTEyOP//"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Another method</a>, <a href=""https://tio.run/##ASAA3/9odXNr///igKBzwqd6ZW/FgERT4bmZb2jhuaExMjj//w"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Another method</a></p>
<h2>Explanation</h2>
<pre><code>†szeŀ256Sṙohṡ128
            ṡ128 symmetric range of 128 [-128...128]
          oh     remove last element
        Sṙ       rotate 128 spaces
    ŀ256         range [0...255]
  ze             zip the two, creating pairs
†s               convert all the numbers to strings
                 (can also be mw)
</code></pre>
","80214","","80214","","2021-01-16 10:12:29","2021-01-16 10:12:29","","","","0","","","","CC BY-SA 4.0"
"217643","2","","163870","2021-01-16 05:04:30","","1","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, <sup><s>21</s></sup> 18 bytes</h1>
<pre><code>3RṚðṄṛ50r³÷³XœS@ð/
</code></pre>
<p><a href=""https://tio.run/##AScA2P9qZWxsef//M1LhuZrDsOG5hOG5mzUwcsKzw7fCs1jFk1NAw7Av//8"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>-3 bytes from xigoi.</p>
<h2>Explanation</h2>
<p>from caird coinheringaahing.</p>
<pre><code>3RṚðṄṛ50r³÷³XœS@ð/ - Main link. Takes no arguments on the left
3R                 - Generate the range [1, 2, 3]
  Ṛ                - Reverse it
   ð            ð  - Define a dyadic chain f(a, b):
    Ṅ              -   Print a
     ṛ             -   Replace a with b
      50r³         -   Yield a range [50, 51, ..., 100]
          ÷³       -   Divide each by 100; Yields [0.5, 0.51, ..., 1]
            X      -   Take a random element t
             œS@   -   Sleep for t seconds then return b
                 / - Reduce the range by the dyadic chain.
                     Remember, f(a, b) = b (with some side effects), so this runs:
                     f(f(3, 2), 1) = f(2, 1) = 1, printing a each time (3, 2, 1)
</code></pre>
","80214","","80214","","2021-01-16 16:41:42","2021-01-16 16:41:42","","","","2","","","","CC BY-SA 4.0"
"217663","2","","147254","2021-01-17 08:23:52","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 9 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>α╖ª»º√π├╔
</code></pre>
<p><a href=""https://staxlang.xyz/#p=e0b7a6afa7fbe3c3c9&amp;i=%5B8,+10%5D%0A%5B20,+22%5D%0A%5B65,+65%5D%0A%5B73,+73%5D%0A%5B86,+84%5D%0A%5B326,+318%5D%0A%5B513,+518%5D%0A%5B4,+5%5D%0A%5B6,+8%5D%0A%5B409,+401%5D%0A%5B348,+347%5D%0A%5B419,+418%5D%0A%5B311,+313%5D%0A%5B326,+305%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-01-17 08:23:52","","","","0","","","","CC BY-SA 4.0"
"217664","2","","181299","2021-01-17 09:05:29","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 14 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü≈:☻‼Xí┌ùß♦▲▬á
</code></pre>
<p><a href=""https://staxlang.xyz/#p=81f73a021358a1da97e1041e16a0&amp;i=%5B1,2,3%5D%0A%5B1,2,3,4,5%5D%0A%5B1,3,2%5D%0A%5B1,6,2,7,3,8,4,9,5,10%5D%0A%5B1,3,5,7,2,4,6%5D%0A%5B1,8,6,4,2,9,7,5,3,10%5D%0A%5B1,9,8,7,6,5,4,3,2,10%5D%0A%5B1,5,9,4,8,3,7,2,6,10%5D%0A%5B1,3,5,7,9,2,4,6,8%5D%0A%5B1,6,11,5,10,4,9,3,8,2,7%5D%0A%5B1,10,19,9,18,8,17,7,16,6,15,5,14,4,13,3,12,2,11,20%5D%0A%5B1,3,5,7,9,11,13,15,17,19,2,4,6,8,10,12,14,16,18,20%5D%0A%5B1,141,32,172,63,203,94,234,125,16,156,47,187,78,218,109,249,140,31,171,62,202,93,233,124,15,155,46,186,77,217,108,248,139,30,170,61,201,92,232,123,14,154,45,185,76,216,107,247,138,29,169,60,200,91,231,122,13,153,44,184,75,215,106,246,137,28,168,59,199,90,230,121,12,152,43,183,74,214,105,245,136,27,167,58,198,89,229,120,11,151,42,182,73,213,104,244,135,26,166,57,197,88,228,119,10,150,41,181,72,212,103,243,134,25,165,56,196,87,227,118,9,149,40,180,71,211,102,242,133,24,164,55,195,86,226,117,8,148,39,179,70,210,101,241,132,23,163,54,194,85,225,116,7,147,38,178,69,209,100,240,131,22,162,53,193,84,224,115,6,146,37,177,68,208,99,239,130,21,161,52,192,83,223,114,5,145,36,176,67,207,98,238,129,20,160,51,191,82,222,113,4,144,35,175,66,206,97,237,128,19,159,50,190,81,221,112,3,143,34,174,65,205,96,236,127,18,158,49,189,80,220,111,2,142,33,173,64,204,95,235,126,17,157,48,188,79,219,110,250%5D%0A&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-01-17 09:05:29","","","","0","","","","CC BY-SA 4.0"
"217665","2","","181299","2021-01-17 09:05:48","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>L↑S≠ŀ¡ȯΣTC2
</code></pre>
<p><a href=""https://tio.run/##HZK9jRZQEAMbcvDW7z8mJYPsRI5EiMiJkAjpAEQB9ICEREQR18jH@AqwdzTe958@fng8Xj9/@fbm@ev3P59///j769/Pt6/8eDyeSjVK3aptrS63rjvkPlSeqqWaS2OrztY@ch1Vu/K4JJs6Bbu0TNK6FPROkjThOTUoOEt7k6Sk0TBo6Fe9kWxaRbJ0KQiFSSc8NCg4U3uRpKTREIxOA6fX1Wokmy4FoTBpwrNrUHCG9iRJSaMhGJ0GTq@jScG9uhSEwkmTtAYFp2sjIBSNhmB0Gji9tiYF9@ggIBQmTXiWBgXH2ggIRaMhGJ0GTq@lScHdOuCHokgTnk3or1NCv0OBfweDAV78T@G/7hL@HQoGiPor7Ndpwr4DgX6HoqeA4BD6606h34HAP4exj/zaV8h3GLDvQPRMQLAL@8UTYN9hQD93kY/74gdw7xZ@CgKB/cjnB5Bf/ADyHQbscxf3qC9eAPXmA1DvMPQAkCuhvvgA1DsIuOcs5hFfPADizf6IdxCc@@SaEF/sj3iHAPNcxTvai/nRbtZHu0MQ75xlfbQX65@AU4H3vF1Xvp7xkW62R7pDEOtE2T5Pz/ZY98v05MmRJs70ODfL49whiHSiLJ@XZ3mkOwRY92zv/gM"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-01-17 09:05:48","","","","0","","","","CC BY-SA 4.0"
"217686","2","","73411","2021-01-18 07:54:58","","2","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 93 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{w←⍵⋄m←÷/(⊢/-⊃)p←⍸¯1≠⍵.mat⋄y x←⊃p⋄P5.size←⍵.sz⋄P5.setup←{P5.G.bg¯1⋄P5.G.ln∊{⍵,y+m×⍵-x}¨⍳101}}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pSszMTfz/qG@qp/@jtgkG/6vLgdSj3q2PultygazD2/U1HnUt0td91NWsWQCW2nFoveGjzgVANXq5iSVAdZUKFSCJruYCICfAVK84syoVYohecRVUKLWkFKS7Gsh210tKBxkBlnDXy8l71NFVDVSsU6mde3g6kKFbUXtoxaPezYYGhrW1//8DAA"" rel=""nofollow noreferrer"" title=""APL (dzaima/APL) – Try It Online"">Try it online!</a></p>
<p>A dfn which takes the image as an <code>APLImg</code> object. Taking the image as a URL is 102: <a href=""https://tio.run/##SyzI0U2pSszMTfz/qG@qp/@jtgkG/6vLgVSAqR5QND1V4VHv1kfdLblAocPb9TUedS3S133U1axZABR41Lvj0HrDR50LyvVyE0uAqioVKkDCXc0FQA7QhOLMqlSgQLlecRVUILWkFKSzGsh210tKB2kHS7jr5eQ96uiqBtqmU6mde3g6kKFbUXtoxaPezYYGhrW1//8DAA"" rel=""nofollow noreferrer"" title=""APL (dzaima/APL) – Try It Online"">Try it online!</a></p>
<p>Uses <code>⎕IO←0</code> (0-indexing).</p>
<p>The function effectively takes the line, calculates its equation and redraws it.</p>
<h2>Explanation</h2>
<p><strong>Slope calculation:</strong>
<code>m←÷/(⊢/-⊃)p←⍸¯1≠⍵.mat</code></p>
<p><code>⍵.mat</code> get the image as an integer matrix</p>
<p><code>¯1≠</code> check which pixels aren't white</p>
<p><code>⍸</code> get all the required coordinates</p>
<p><code>p←</code> store in p</p>
<p><code>(⊢/-⊃)</code> subtract the last point from the first</p>
<p><code>÷/</code> reduce by division</p>
<hr />
<p><code>y x←⊃p</code> store the first point in y and x</p>
<p><code>P5.size←⍵.sz</code> set canvas size to image size</p>
<hr />
<p><strong>Draw the image:</strong>
<code>P5.setup←{P5.G.bg¯1⋄P5.G.ln∊{⍵,y+m×⍵-x}¨0,w.width}</code></p>
<p><code>P5.setup←{...}</code> draw the following once:</p>
<p><code>P5.G.bg¯1</code> set the background to white</p>
<p><code>P5.G.ln∊{⍵,y+m×⍵-x}¨⍳101</code> draw lines between the following points:</p>
<p><code>{...}¨0,w.width</code> get the points for each x in 0-100:</p>
<p><code>y+m×⍵-x</code> <span class=""math-container"">\$y = y_1+m(x-x_{1})\$</span></p>
<p><code>⍵,</code> pair the x value with that</p>
<p><code>∊</code> enlist so it can be drawn</p>
","80214","","80214","","2021-01-18 08:00:28","2021-01-18 08:00:28","","","","0","","","","CC BY-SA 4.0"
"217694","2","","217690","2021-01-18 11:11:53","","3","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>24 18 17</s></sup> 16 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ù←⌐0ø\d▀→&quot;ε╞☺Γ|▓
</code></pre>
<p><a href=""https://staxlang.xyz/#p=971ba930005c64df1a22eec601e27cb2&amp;i=%22code%22,%22I+do+not+control+the+speed+at+which+lobsters+die%22%0A%22tas%22,%22testcase+string%22%0A%22ulhwagpqvyntzmf%22,%22uglhwagp+qvyntzmf%22%0A%22qcfvf%22,%22qrkacxx+wwfja+jsyjdffa+vwfgxf%22%0A%22gcujxlb%22,%22z+wzsgovhh+jopw+igcx+muxj+xmmisxdn+t+lmb%22%0A%22e%22,%22kxf+jgmzejypb+ya%22%0A%22ex%22,%22fe+oxyk+y%22%0A%22owrfmik%22,%22o+wr+fmik%22%0A%22e%22,%22pgezt+yozcyqq+drxt+gcvaj+hx+l+ix+xemimmox%22%0A%22k%22,%22kqclk+b+hkgtrh%22%0A%22crwqqhxl%22,%22sia+prcrdfckg+otqwvdv+wzdqxvqb+h+xclxmaj+xjdwt+lzfw%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>-6 bytes, following Dingus's idea.</p>
<p>-1 byte from recursive. (<code>h=</code> → <code>h</code>)</p>
<p>-1 byte, using <code>\0</code> as a filler character.</p>
","80214","","80214","","2021-01-22 02:01:24","2021-01-22 02:01:24","","","","1","","","","CC BY-SA 4.0"
"217706","2","","74127","2021-01-18 17:04:07","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 48 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>¢≈3ä⌂♪s♂N#┼DuΦeÑα▼dσÿóYRC├[♂≡α%┴&amp;UZ≤§╟Ω^j╪♪■∞xëa
</code></pre>
<p><a href=""https://staxlang.xyz/#p=9bf733847f0d730b4e23c54475e865a5e01f64e598a2595243c35b0bf0e025c126555af315c7ea5e6ad80dfeec788961&amp;i=%5B50,50%5D%0A%5B1651,+9879%5D%0A%5B6489789,+9874,+287%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p><code>)</code> is a lifesaver here, but it still feels too long.</p>
","80214","","","","","2021-01-18 17:04:07","","","","0","","","","CC BY-SA 4.0"
"217724","2","","55770","2021-01-19 02:26:40","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 36 bytes</h1>
<pre><code>↔T' `+₁√ṁ□¹`+C1&quot; = &quot;JC1&quot; + &quot;m₁
SRR'#
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HblBB1hQTtR02NjzpmPdzZ@GjawkM7E7SdDZUUbBWUvEC0toJSLlCeKzgoSF35////0cY6JrEA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>This can be made shorter if I can find a good way to add the symbols in.</p>
","80214","","","","","2021-01-19 02:26:40","","","","0","","","","CC BY-SA 4.0"
"217727","2","","122568","2021-01-19 03:28:04","","0","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 45 bytes</h1>
<pre><code>“from datetime import*;print(date.today())”ŒV
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8//9Rw5y0ovxchZTEktSSzNxUhczcgvyiEi3rgqLMvBINkLBeSX5KYqWGpuajhrlHJ4X9/w8A"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>evaluates python code because <em>comedy</em></p>
","80214","","","","","2021-01-19 03:28:04","","","","0","","","","CC BY-SA 4.0"
"217730","2","","198952","2021-01-19 04:52:06","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Å²@8Ω@╩vä3
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8ffd4038ea40ca768433&amp;i=1%0A2%0A3%0A4&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-01-19 04:52:06","","","","0","","","","CC BY-SA 4.0"
"217733","2","","61940","2021-01-19 07:02:15","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 37 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>(⊃,/){⎕A∊⍨⌈⍵:⍵…⍨'A'××⍵⋄⍵∊⎕D:'0'…⍵⋄⍵}¨
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/X@NRV7OOvmb1o76pjo86uh71rnjU0/God6sVED9qWAbkqzuqH55@eDqI390CIoGq@qa6WKkbqIMVQIVrD634n/aobcKj3j6gkY961zzq3XJovfGjtolA1cFBzkAyxMMz@H@agrpjkrOhkbE6F5BZkGlrrGdoYmhqCeZ6pObk5OsohOcX5aQoqgMA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A train that accepts a string as right argument.</p>
","80214","","","","","2021-01-19 07:02:15","","","","0","","","","CC BY-SA 4.0"
"217738","2","","127765","2021-01-19 09:20:05","","2","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 81 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{u⊃+/{⌽[1+2|⍵]∘⍉w×1@(y/⍨∨/¨(⍵,x)∘∊¨y←,∘.,⍨(⍵-1)↓⍳x←1+|⍵-≢w)⊢0×w}¨⍳⌈.5×≢w←⍵}u←⎕UCS
</code></pre>
<p><a href=""https://tio.run/##RY69TsJgFIZ3r@Izmnw0FLBUUDa0/oD/UlDROKClFUWKYC0VmTSkICUaQ3Bm6mDioI4u5U7OjdTz6eByTs77PDl5C9VySLEKZV3zoT@Q8oQqaqVO/aYB3ftgpAm97yMhGL0D5@sY7FdwOuZ4KCQDVgQcF2w34rkBZHyDY9Tueq4F7ScejzCPBmMhgYP2CzgfDSRCkL0KQWdkctAdzYyHZstzEULPDsfGQwZQQ6dlsN0f5CTZV3@jPlYC5w2cT@9dhPYzQjkj4cym0rKvodPEAxel8PiglOpVwnvuX0EuoLLZmtCISER8QYWoOBuLz80nKGZxEv/PFhalpeWV1VR6bX1jc2t7ZzcjZ3N7@wf5w8nk1DTTEyTB9OxZkVwZpdMLclLTzQpR9QY5Ny6rdaLfFGvkGnG5cGsRRdfoDw"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A 2-train which takes the matrix as its right argument.</p>
<p>The idea behind this is to peel the matrix into its rings, like so:</p>
<pre class=""lang-apl prettyprint-override""><code>┌──────┬──────┬──────┬──────┐
│123456│123456│      │      │
│ABCDEF│A    F│ BCDE │      │
│GHIJKL│G    L│ H  K │  IJ  │
│MNOPQR│M    R│ N  Q │  OP  │
│STUVWX│S    X│ TUVW │      │
│YZ!@#$│YZ!@#$│      │      │
└──────┴──────┴──────┴──────┘
</code></pre>
<p>Then each of these rings are rotated left/right based on their index.</p>
<p>My algorithm for getting the rings has a lot of room for improvement (Porting the python solution may be shorter).</p>
<h2>Explanation</h2>
<p><code>⎕UCS</code> convert the matrix to its unicode values</p>
<p><code>u←⎕UCS</code> store conversion function as u</p>
<p><code>{...}</code> apply the following function on the matrix:</p>
<p><code>w←⍵</code> store argument as w</p>
<p><code>⍳⌈.5×≢</code> range <code>1..ceil(length(w)/2)</code></p>
<hr />
<p><strong>Getting the rings</strong></p>
<p><code>{...}¨</code> for each value <code>i</code> in the range:</p>
<p><code>0×w</code> to the input, converted to zeroes,</p>
<p><code>1@(...)</code> replace the following coordinates with 1s:</p>
<p><code>1+|⍵-≢⍵</code> upper limit: <code>length(w) - i</code></p>
<p><code>(⍵-1)↓⍳</code> create range from i to that</p>
<p><code>,∘.,⍨</code> get all points in that range</p>
<p><code>y←</code> store in <code>y</code></p>
<p><code>∨/¨(⍵,x)∘∊¨</code> check which ones are part of the ring, and get a list of booleans</p>
<p><code>y/⍨</code> filter <code>y</code> using the boolean array</p>
<p><code>w×</code> multiply <code>w</code> with that (vectorizes)</p>
<p><code>⌽[1+2|⍵]∘⍉</code> Rotate right if <code>i</code> is odd, otherwise left</p>
<hr />
<p>Finally,</p>
<p><code>+/</code> sum all the matrices (vectorizes)</p>
<p><code>⊃</code> unwrap</p>
<p><code>u</code> convert back to character matrix.</p>
","80214","","","","","2021-01-19 09:20:05","","","","0","","","","CC BY-SA 4.0"
"217742","2","","66197","2021-01-19 12:26:49","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 5 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>é►Ö_Z
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8210995f5a&amp;i=%22AbCdEfGhIjKlMnOpQrStUvWxYz%22%0A%22ACEGIKMOQSUWY%5CnBDFHJLNPRTVXZ%22%0A%22public+static+void+main%28String%5B%5D+args%29%22%0A%22The+quick+brown+fox+jumped+over+the+lazy+dogs.+BOING+BOING+BOING%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-01-19 12:26:49","","","","0","","","","CC BY-SA 4.0"
"217743","2","","113051","2021-01-19 13:11:37","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>↑¡o→Ẋ`-
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbxEML8x@1TXq4qytB9////9GmBjomBjqGBrH/zQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>↑¡o→Ẋ`-
 ¡o     create an infinite list using the array:
        the next element is:
   →    the last element of
    Ẋ`- overlapping pairs reduced by subtraction.
↑       take n elements
</code></pre>
","80214","","","","","2021-01-19 13:11:37","","","","0","","","","CC BY-SA 4.0"
"217750","2","","217748","2021-01-19 16:22:32","","8","","<h1>2. <a href=""https://www.ruby-lang.org/"" rel=""noreferrer"">Ruby</a>, 11 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;x{1+~x%2}
</code></pre>
<p><a href=""https://tio.run/##KypNqvyfZvtf166i2lC7rkLVqPZ/gUJatKmFqZlxLBeIaWFgZGgS@x8A"" rel=""noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
<p>Updated list:</p>
<pre class=""lang-ruby prettyprint-override""><code>58563 -&gt; 1
80214 -&gt; 2
</code></pre>
","80214","","","","","2021-01-19 16:22:32","","","","2","","","","CC BY-SA 4.0"
"217779","2","","175485","2021-01-20 05:47:25","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>+¹ht…
</code></pre>
<p><a href=""https://tio.run/##yygtzv6f@6ip8b/2oZ0ZJY8alv3//z862kDHNFYnWtdYxwJImeiYgEmQkIWOEUjCSEfXPDYWAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Thanks to Dominic Van Essen for the fix.</p>
","80214","","80214","","2021-01-24 14:00:17","2021-01-24 14:00:17","","","","1","","","","CC BY-SA 4.0"
"217789","2","","122771","2021-01-20 10:51:49","","0","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 5 bytes</h1>
<pre><code>ỴẈ=2Ȧ
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8///h7i0Pd3XYGp1Y9v///7z8Aq6KEgA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>A small improvement over the other jelly answer.</p>
<h2>Explanation</h2>
<pre><code>ỴẈ=2Ȧ Main Link: takes string on the left
Ỵ     split on newlines
 Ẉ    length(vectorizes)
  =2  equals 2? (vectorizes)
    Ȧ are all elements truthy?
</code></pre>
","80214","","","","","2021-01-20 10:51:49","","","","0","","","","CC BY-SA 4.0"
"217791","2","","26657","2021-01-20 11:14:55","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 12 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ç≈°▼╔╔²AGΓM4
</code></pre>
<p><a href=""https://staxlang.xyz/#p=87f7f81fc9c9fd4147e24d34&amp;i=%22%7C++v++%7C%5Cn*+*+*+*%5Cn+*+*+*%22"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>.\S'*YRQx2Dy#P
.\S              push regex \S
   '*            push '*'
     Y           store star in Y
      R          perform regex replacement on the input
       Q         peek and print with newline
        x        push input again
         2D      execute the following twice:
           y     push '*'
            #    number of stars
             P   pop and print with newline
            
</code></pre>
","80214","","","","","2021-01-20 11:14:55","","","","0","","","","CC BY-SA 4.0"
"217792","2","","165026","2021-01-20 11:34:26","","1","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 28 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>+/×/1=2(1⊥∘|-)/x[⌂pmat≢x←⍸⎕]
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qKM97b@2/uHp@oa2RhqGj7qWPuqYUaOrqV8R/ainqSA3seRR56KKR20THvXueNQ3NRak4X8a16O2iUCeV7C/n4J6dLShDhTG6kQb6EAgKjtWnQuHJqgyVFasOgA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A full program that accepts a matrix.</p>
","80214","","","","","2021-01-20 11:34:26","","","","0","","","","CC BY-SA 4.0"
"217793","2","","75448","2021-01-20 11:58:49","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>19</sup></s> 18 bytes</h1>
<pre><code>m←¤-w¨BYΘRΘF⁴ND¨ma
</code></pre>
<p><a href=""https://tio.run/##ATcAyP9odXNr//9t4oaQwqQtd8KoQlnOmFLOmEbigbRORMKobWH///9Kb3JkYW4gT2YgdGhlIFdvcmxk"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Dominic Van Essen.</p>
","80214","","80214","","2021-01-21 03:37:34","2021-01-21 03:37:34","","","","1","","","","CC BY-SA 4.0"
"217814","2","","8588","2021-01-21 03:22:47","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>ṁȯ…mix'-x',
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxhPrHzUsy82sUNetUNf5//@/oa6JjoWuoSEA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-01-21 03:22:47","","","","0","","","","CC BY-SA 4.0"
"217817","2","","102243","2021-01-21 04:41:33","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 18 bytes</h1>
<pre><code>m§,o←←oλm#⁰ḣ5)m→k←
</code></pre>
<p><a href=""https://tio.run/##yygtzv6f@6ip8X/uoeU6@Y/aJgBR/rnducqPGjc83LHYVDP3UdukbKDg////o6M1DHVMNHU0jHRMgaQhlDREYptoxupEAxFU2EjHCEga6xgDSROwVlOgwthYAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-01-21 04:41:33","","","","0","","","","CC BY-SA 4.0"
"217820","2","","5529","2021-01-21 06:03:41","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 2 bytes</h1>
<pre><code>€Ṗ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HTmoc7p/3//z8pMQ8I/yfm5SUCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Having a single byte builtin for powerset is useful.</p>
","80214","","","","","2021-01-21 06:03:41","","","","0","","","","CC BY-SA 4.0"
"217821","2","","47201","2021-01-21 06:14:53","","0","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 6 bytes</h1>
<pre><code>ŒuQ⁼ṢƊ
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8///opNLAR417Hu5cdKzr////BaVRAA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>ŒuQ⁼ṢƊ Main link: takes string on the left
Œu     uppercase the input
     Ɗ fork: f(x) g h(x)
  Q    unique
   ⁼   equals
    Ṣ  sorted?
</code></pre>
","80214","","","","","2021-01-21 06:14:53","","","","0","","","","CC BY-SA 4.0"
"217822","2","","103314","2021-01-21 06:59:05","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 101 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>↑¯9↑¨'^|'
f←{⍵×(≢⍵)⍴2?2}
{(5/'OJ')@(x[10?≢x←⍸↑f¨f¯2↓↓'#'=⍵])⊢⍵}↑{' #'/⍨⍵,17-2×⍵}¨⍎¨'7656543254321077'
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkGXI862tP@P2qbeGi9JYhcoR5Xo86VBpSqftS79fB0jUedi4AMzUe9W4zsjWq5qjVM9dX9vdQ1HTQqog0N7IHSFUDFj3p3AHWnHVqRdmi90aO2yUCkrqxuC9QZq/moC2RCLVC@Wl1BWV3/Ue8KIF/H0FzX6PB0kMwhIL8PaLO5mamZqYmxEQgbGpibq/8HOu5/GgA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A full program which returns the tree.</p>
<p>Tree creation algorithm borrowed from Arnauld's answer.</p>
<h2>Explanation</h2>
<p><strong>Displaying the top</strong></p>
<pre class=""lang-apl prettyprint-override""><code>↑¯9↑¨'^|'
     '^|' string
 ¯9↑¨     pad each with 8 spaces
↑         convert to matrix
</code></pre>
<hr />
<p><strong>Distancing the ornaments</strong></p>
<pre class=""lang-apl prettyprint-override""><code>f←{⍵×(≢⍵)⍴2?2} store the following lambda as f:
          2?2  generate 0 1 or 1 0 (random)
     (≢⍵)⍴     reshape to the length of the input
   ⍵×          multiply the input with it(vectorizes)
</code></pre>
<hr />
<p><strong>Display the tree</strong></p>
<pre class=""lang-apl prettyprint-override""><code>↑{' #'/⍨⍵,17-2×⍵}¨⍎¨'7656543254321077'
                  ⍎¨'7656543254321077' create an array of digits from the string
 {              }¨                     for each digit x:
        ⍵,17-2×⍵                       array [x,17-2*x]
  ' #'/⍨                               replicate spaces and hashes as per that
↑                                      convert to matrix
</code></pre>
<hr />
<p><strong>Add the ornaments:</strong></p>
<pre class=""lang-apl prettyprint-override""><code>{(5/'OJ')@(x[10?≢x←⍸↑f¨f¯2↓↓'#'=⍵])⊢⍵} apply the following to the tree:
                            '#'=⍵      boolean matrix for the tree
                           ↓           convert to 2d array
                        ¯2↓            remove trunk rows
                     f¨f               convert to swiss cheese with function f
                   ⍸↑                  get the indices of all 1s
                 x←                    and store in x
             10?≢                      pick 10 random indices in length(x) range
           x[                    ]     and take those from x
         @(                       )⊢⍵  replace those coordinates with:
 (5/'OJ')                              5 instances of 'O' and 5 instances of 'J'
</code></pre>
","80214","","","","","2021-01-21 06:59:05","","","","0","","","","CC BY-SA 4.0"
"217823","2","","65907","2021-01-21 08:27:36","","2","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 37 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>.5×(⊢/,⊃)¨{⍵⊂⍨1,1&lt;2-/⍵}⊃∩/∨⍤∊¨…/¨¨2×⎕
</code></pre>
<p><a href=""https://tio.run/##NY6xDoIwEIZ3n@JGmoC0lSIkvowJ4GLUwUFjTAwOEhLcjLsxpk5MvkB9k3sRvBZcrnff/ff/nW@WQbafL9eLIN9t81WWZx1Wl6Ibq@/dw/oR@lifmdEHbD5Yl9ho4YuZDEKaj7TC6h1ipbF5YlUbjadXaLTR8nvH681adaNi5HmmTTmYNmLgRZByRi8Zl6ZVHBRng0YCp4UEK4shsSqiAgQ1E1BUFaTsr07JMCFG1d2Zdkokdp1yYf29pcpRMegSImLwES5N9Wn2TxJi9gM"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A full program which takes a nested array in STDIN and returns a nested array.</p>
<p>Code fixed by bubbler.</p>
","80214","","80214","","2021-01-21 09:11:31","2021-01-21 09:11:31","","","","3","","","","CC BY-SA 4.0"
"217829","2","","127501","2021-01-21 09:50:48","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 72 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{g' '∘,∘⌽∘⍉⍣4(g←{'+'@(⊂1 1)∘⌽∘⍉⍣4⊃(⍪∘⌽∘⍉)/'-|-|',⊂⍵})↑(¯1+3×⍵)⍺⍴⍺/'  :'}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///vzpdXUH9UccMHSB@1LMXRPZ2PupdbKKR/qhtQrW6trqDxqOuJkMFQ010FY@6mjUe9a5CFtbUV9et0a1R1wFqedS7tVbzUdtEjUPrDbWND08H8jUf9e561LsFSOqrKyhYqdf@TwNa8qi3D2jUo941QKlD642BWh71TQ0OcgaSIR6ewf/BDgFygJS6@qPuFqD2NJDhXIYGCukKRlxGIMqYyxREmUIEDU0B"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A function that takes L on the left and x on the right.</p>
","80214","","","","","2021-01-21 09:50:48","","","","0","","","","CC BY-SA 4.0"
"217867","2","","1159","2021-01-22 04:00:13","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 19 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>┬░╩íΩ{\ë╔B_m♦½─Γe╧¼
</code></pre>
<p><a href=""https://staxlang.xyz/#p=c2b0caa1ea7b5c89c9425f6d04abc4e265cfac&amp;i=1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+5+5+5+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+5+5+5+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+5+5+5+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1%0A1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1&amp;m=1"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Input is given directly, no quotes.</p>
<h2>Explanation</h2>
<pre><code>L{eL3B{|+mmM{3B{:*mm$|M Input: STDIN, auto split on newlines, pushed to stack
L                       listify the stack
 {        m             map each line to:
 {e       m             evaluate it
   L                    listify the stack
    3B                  overlapping slices of length 3
      {|+m              map those to their sums
           M            transpose
            {      m    map to:
             3B         overlapping slices of length 3
               {:*m     mapped to products
                    $   flatten
                     |M maximum
</code></pre>
","80214","","","","","2021-01-22 04:00:13","","","","0","","","","CC BY-SA 4.0"
"217894","2","","198237","2021-01-22 13:07:26","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>#S=ηÖPḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XznY9tz2w9MCHu5Y/P//f3MA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##ARwA4/9odXNr/23igoHFgDn/4bmBUz3Ot8OWUOG4o///"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify first 10 values</a></p>
<p>Same idea as the Jelly answer, and equally as slow.</p>
<p>0-indexed.</p>
<h2>Explanation</h2>
<pre><code>#S=ηÖPḣ
      ḣ range 1..n
     P  permutations
#       number of arrays which satisfy:
 S      self
  =     equals
   η    indices of
    Ö   ordered elements?
</code></pre>
","80214","","","","","2021-01-22 13:07:26","","","","0","","","","CC BY-SA 4.0"
"217905","2","","2563","2021-01-22 17:37:56","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 28 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>'# +#'⎕R{'@'@(' '∘=)⍵.Match}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///X11ZQVtZ/VHf1KBqdQd1Bw11BfVHHTNsNR/1btXzTSxJzqj9n/aobcKj3r5HXc2Petc86t1yaL3xo7aJQC3BQc5AMsTDM/h/mgKQ5RXs76egrqQAA8oKqCAmDyGljF1KGSiDJheTpwzRAQWoUspIMshyYCllZVQ5CIUpBTMELIUGYCqxSCkTllJSBwA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-01-22 17:37:56","","","","0","","","","CC BY-SA 4.0"
"217907","2","","198237","2021-01-22 17:48:26","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 24 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍵&lt;2:1⋄+/(1,⍵-1)×∇¨⍵-⍳2}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v/pR71YbIyvDR90t2voahjpArq6h5uHpjzraD60AcR71bjaq/Z/2qG3Co96@R13Nj3rXPOrdcmi98aO2iY/6pgYHOQPJEA/PYLBRQP2r0sAaaw2A7M2GBgA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-01-22 17:48:26","","","","0","","","","CC BY-SA 4.0"
"217921","2","","77138","2021-01-23 05:44:49","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>19</s></sup> 12 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>æöT┴S○♂èα ôG
</code></pre>
<p><a href=""https://staxlang.xyz/#p=919454c153090b8ae0209347&amp;i=%28%29%0A%5B%5D%28%29%7B%7D%3C%3E%0A%28%28%28%28%29%29%29%29%0A%28%7B%5B%3C%3E%5D%7D%29%0A%5B%7B%28%29%3C%3E%28%29%7D%5B%5D%5D%0A%5B%28%5B%5D%7B%7D%29%3C%7B%5B%28%29%3C%28%29%3E%5D%7D%28%29%3E%7B%7D%5D%0A%28%0A%7D%7B%0A%28%3C%29%3E%0A%28%28%29%28%29foobar%29%0A%5B%28%7B%7D%3C%3E%29%3E%0A%28%28%28%28%29%29%29&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Link is to unpacked code.</p>
<p>-7 using a brackets builtin.</p>
<h2>Explanation</h2>
<pre><code>c%{Vb2/{z:rF}*!
c%              get the input's length
  {         }*  execute this block that many times:
   Vb           take the brackets
     2/         groups of 2
       {   F    for each:
        z:r     replace the brackets with nothing
              ! logical not
</code></pre>
","80214","","80214","","2021-01-26 09:12:34","2021-01-26 09:12:34","","","","0","","","","CC BY-SA 4.0"
"217922","2","","80379","2021-01-23 06:01:46","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>!fo`€d¹dİp
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XzEtP@FR05qUQztTjmwo@P//v6EBAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>!fo`€d¹dİp
 fo     İp filter the infinite list of primes by the following:
     d¹    are the digits of n
   `€      a sublist of('`' switches the arguments)
       d   the digits of the number?
!          get nth element
</code></pre>
","80214","","","","","2021-01-23 06:01:46","","","","0","","","","CC BY-SA 4.0"
"217923","2","","80379","2021-01-23 06:17:42","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>14</s></sup> 13 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>éâ^^εîï5~8&lt;IM
</code></pre>
<p><a href=""https://staxlang.xyz/#p=82835e5eee8c8b357e383c494d&amp;i=1%0A2%0A3%0A10&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>A good question for a generator.</p>
<p>-1 byte from recursive.</p>
<h2>Explanation</h2>
<pre><code>Z{|p_$yI^*}{gnH input: single number, n
             n  generator mode: count(stops after n values are found)
Z               push a 0 under the input(start value)
 {        }     filter block:
  |p            number is prime?
         *      and
    _$          string representation of number
      yI^       contains n?
           {g   generator block:
                implicit increment to get next number
              H get last generated value
</code></pre>
","80214","","80214","","2021-01-23 06:24:01","2021-01-23 06:24:01","","","","0","","","","CC BY-SA 4.0"
"217932","2","","38282","2021-01-23 17:09:40","","0","","<h1><a href=""https://github.com/dzaima/APL"" rel=""nofollow noreferrer"">APL (dzaima/APL)</a>, 84 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{{⍵@(b∘|¨2⌿¨⍳≢⍵)⊢(b←{a⊃⍨⊃⍋+/↑a←(≠/¨⌿⊢)⍸⍵=∘.×⍨⍳⍵}≢⍵)⍴0}⊃(⍵∘{1=≢⍵~⍨⍳⍺}¨⌿⊢)↓⍵|∘.*⍨⍳⍵-1}
</code></pre>
<p><a href=""https://repl.it/join/imysopnc-razetime"" rel=""nofollow noreferrer"">Try it on repl.it!</a></p>
<p>Uses <code>⎕IO←0</code> (0-indexing).</p>
<p>A dfn which takes input as a long integer, and returns a matrix of long ints for the first primitive root of <code>⍵</code>.</p>
<p>Hosted on repl.it since tio is not updated with the latest version of dzaima/APL. The run button runs all testcases.</p>
<h2>Explanation</h2>
<p><code>{{⍵@(b∘|¨2⌿¨⍳≢⍵)⊢(b←{a⊃⍨⊃⍋+/↑a←(≠/¨⌿⊢)⍸⍵=∘.×⍨⍳⍵}≢⍵)⍴0}⊃(⍵∘{1=≢⍵~⍨⍳⍺}¨⌿⊢)↓⍵|∘.*⍨⍳⍵-1}</code></p>
<p><code>∘.*⍨⍳⍵-1</code> create a power table for 0..n-1</p>
<p><code>⍵|</code>  modulo that by the input <code>⍵</code></p>
<p><code>↓</code> convert to list of lists</p>
<p><code>(⍵∘{...}¨⌿⊢)</code> tacit function, filter lists where:</p>
<p><code>1=≢⍵~⍨⍳⍺</code> numbers from 1 to n-1 are present</p>
<p><code>⊃</code> take the first one</p>
<p><code>{⍵@(b∘|¨2⌿¨⍳≢⍵)⊢(b←{a⊃⍨⊃⍋+/↑a←(≠/¨⌿⊢)⍸⍵=∘.×⍨⍳⍵}≢⍵)⍴0}</code> and do the following:</p>
<p><strong>Dimension finding function(courtesy of ngn):</strong></p>
<p><code>{a⊃⍨⊃⍋+/↑a←(≠/¨⌿⊢)⍸⍵=∘.×⍨⍳⍵}≢⍵</code> do the following with the length of the first list:</p>
<p><code>∘.×⍨⍳⍵</code> multiplication table of 1..length</p>
<p><code>⍸⍵=</code> coordinates at which product = length</p>
<p><code>(≠/¨⌿⊢)</code> remove the ones which create squares</p>
<p><code>a←</code> assign the final coordinates to <code>a</code></p>
<p><code>⊃⍋+/↑</code> index of coordinate with highest sum</p>
<p><code>a⊃⍨</code> take that coordinate from <code>a</code></p>
<p><code>b←</code> assign that to b</p>
<p><code>(...)⍴0</code> create a grid of zeroes of that size</p>
<p><code>⍵@(...)⊢</code> assign the first list at the following indices:</p>
<p><code>⍳≢⍵</code> 1..length</p>
<p><code>2⌿¨</code> each replicated twice</p>
<p><code>b∘|¨</code> mod b(vectorizes)</p>
<p>This gives the final diagonally oriented matrix.</p>
","80214","","80214","","2021-01-23 17:19:47","2021-01-23 17:19:47","","","","0","","","","CC BY-SA 4.0"
"217949","2","","217933","2021-01-24 02:19:05","","6","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, <sup><s>27</s></sup> 22 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>｛╷２×/×^L⁸×＋］：↕vL∙ &quot;╋∔ｒ
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjVCJXUyNTc3JXVGRjEyJUQ3LyVENyU1RUwldTIwNzglRDcldUZGMEIldUZGM0QldUZGMUEldTIxOTV2TCV1MjIxOSUyMCUyMiV1MjU0QiV1MjIxNCV1RkY1Mg__,i=NQ__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<h2>Explanation</h2>
<pre><code>{|2×/×^L⁸×+]:↕vL∙ &quot;╋∔r
{          ]           map each i from 1 to n:
 |2×                   decrement and double i
    /×                 repeat &quot;/&quot; that many times
      ^L⁸×             repeat &quot;^L&quot; n times
          +            add that to get one line
            :          copy the top half
             ↕         mirror vertically (mirrors characters)
              vL∙&quot; ╋   replace 'vL' with '&quot; '
                    ∔  and add vertically
                     r center the whole art  
</code></pre>
","80214","","80214","","2021-01-31 12:32:00","2021-01-31 12:32:00","","","","0","","","","CC BY-SA 4.0"
"217966","2","","217960","2021-01-24 15:44:43","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<p><em><sup>I got ninja'd..</sup></em></p>
<pre><code>§&amp;tΛo€Ṗd¹dp
</code></pre>
<p><a href=""https://tio.run/##ARwA4/9odXNr///CpyZ0zptv4oKs4bmWZMK5ZHD///81"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Outputs truthy for a lobster number and falsy otherwise. This would be shorter if <code>all</code> returned 0 for empty lists.</p>
<h2>Explanation</h2>
<pre><code>§&amp;tΛo€Ṗd¹dp
          p prime factorization of the input
§           fork:
  t          is the list not composed of a single element?
 &amp;          and,
   Λo    d   are all the prime factors' digits
     €       present in
      Ṗd¹    the powerset of the input's digits?
</code></pre>
","80214","","66833","","2021-01-25 13:12:12","2021-01-25 13:12:12","","","","0","","","","CC BY-SA 4.0"
"217967","2","","146911","2021-01-24 16:28:54","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 24 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>▒tP☻↕╘`¼½ª√ΘBöQm&gt;\%▒IïR}
</code></pre>
<p><a href=""https://staxlang.xyz/#p=b174500212d460acaba6fbe94294516d3e5c25b1498b527d&amp;i=10%2B%5B%3E%2B%3E3%2B%3E7%2B%3E10%2B4%3C-%5D3%3E2%2B.%3E%2B.7%2B2.3%2B.2%3C2%2B.%3E15%2B.%3E.3%2B.6-.8-.2%3C%2B.%3C."" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Regex replace and execute.</p>
","80214","","","","","2021-01-24 16:28:54","","","","0","","","","CC BY-SA 4.0"
"217979","2","","116616","2021-01-25 03:02:35","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 22 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╵ｒＨ２；＾／Ｌ ×；＋ｎ｝ｌ＼ｎＬ-×；∔
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXUyNTc1JXVGRjUyJXVGRjI4JXVGRjEyJXVGRjFCJXVGRjNFJXVGRjBGJXVGRjJDJTIwJUQ3JXVGRjFCJXVGRjBCJXVGRjRFJXVGRjVEJXVGRjRDJXVGRjNDJXVGRjRFJXVGRjJDLSVENyV1RkYxQiV1MjIxNA__,i=NQ__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<h2>Explanation</h2>
<pre><code>'rH2;^/L ×;+n}l\nL-×;∔
'                      increment input integer n
 r                     range 0..n
  H          }         push an empty string and start a loop
   2;^                 get 2^i
      /                antidiagonal of that length
       L               get width(don't pop)
         ×;_           add that many spaces to the left
            n          overlap with prev iteration
              l        get height(don't pop)
               \       create a diagonal of that length 
                n      and overlap with the created sides
                 L     get width(don't pop)
                  -×;∔ add that many minuses to the top
       
</code></pre>
","80214","","80214","","2021-01-25 08:39:58","2021-01-25 08:39:58","","","","0","","","","CC BY-SA 4.0"
"217987","2","","81253","2021-01-25 10:45:00","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 16 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>â↕ÿ╓d8‼Qlì&quot;┌nq╟ì
</code></pre>
<p><a href=""https://staxlang.xyz/#p=831298d6643813516c8d22da6e71c78d&amp;i=1%0A2%0A3%0A10%0A37%0A360%0A12345%0A67895678&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-01-25 10:45:00","","","","0","","","","CC BY-SA 4.0"
"217990","2","","74198","2021-01-25 14:44:16","","3","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 107 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{x←' '⍴⍨×⍨2/⌈/⍴⍵⋄(⌈⌿↑⍸' '≠x)↑x⊣{x⊢←(⊃⍵)@((⊃⌽⍵)∘+¨↓0,⍪1-⍨⍳≢⊃⍵)⊢x}¨↓(⊃,/' '(≠⊆⊢)¨↓⍵),⍪⌽¨⍸2{1 0≡' '=⍺⍵}/' ',⍵}
</code></pre>
<p><a href=""https://tio.run/##bVBNSwJRFN37K97uKSl@RBSBELipbbVp@XLGmeg1I42SIq6KQc0nRUgt@9hIBC5KiCAC@yf3j9i5zyKDHsx79557zrn3jqrqjNNUOvRmNBiW9oR0KkEkE9SJS4LiC9Ei81acjvPruqwiV5CZtGetBipSSDIvZEaf17gKWep3shaY0PlZEhn1Pyi@JPPKzO5tI4WsQb0HqHv3MEhS7xTs1EbSRv13TqhzszQdUXyVS5N5zGdgTeaZuvffZEgbbUtgUToL7yTMqRejkrIFprEYjsjNa6GVFznq3oFaxDK8AcvSdpUKBiEzsO5PGH86XuahB8Od7RLu3c2tnZkHTgsJnpVcVmYkFqzYP5HwRF6sQibDwD0Jjx1pkTVGhIiqquxGDMFS1nwX/w9HHbtozxErIrw2rehQ1Q4CD@m3ApVIHVkyxD88exBxSSySoxAACnPXwz/k/6OodqD1Qjff1Tr8KcJGO4CabOmrGvB6dbGfEvt8OaJcZoEnfDjUfREEnjVousKpB0Hw29epO4DDeQ5PQN7vNKz1XXzKl18"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Makes an over-big matrix of spaces, and adds in the required words using <code>@</code>. Then, crops back to the required size.</p>
","80214","","","","","2021-01-25 14:44:16","","","","0","","","","CC BY-SA 4.0"
"218027","2","","218017","2021-01-26 12:08:16","","5","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>mF₁Te
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P9ftUVNjSOp/7f//o41NdIx0jGKBDCBtGAsA"" rel=""noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Takes the two arrays as arguments, and the function in the footer. You can use any binary function which operates on two <code>TNum</code>s from <a href=""https://github.com/barbuz/Husk/wiki/Commands"" rel=""noreferrer"">Husk's Commands page.</a></p>
<h2>Explanation</h2>
<pre><code>mF₁Te Main program: accepts two arrays
    e two element list from the arrays
   T  transpose
m     map each pair to
 F    itself folded by
  ₁   the black box function
</code></pre>
","80214","","","","","2021-01-26 12:08:16","","","","4","","","","CC BY-SA 4.0"
"218066","2","","218059","2021-01-27 06:51:00","","3","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 104 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{i←0⋄{(~×/1=,⍵)∧(⍴⍵)≡+/¨1⌷¨(⍉⍵)⍵}⌽∘⍉⍣{(~⊃⌽⊖⍺)∨i=4⊣i+←1}{×≢⍵:⍵⋄,0}p∧⌿⍵∧/⍨p←⌊/0~⍨+/⍵}{(¯1+⌊⌿c)↓⍵↑⍨⌈⌿c←↑⍸⍵}
</code></pre>
<p><a href=""https://tio.run/##dU7NSsNAEL77FAs9bEIakqAnIScverW@QFEaAgVzlSW9tIQkZosiWq/aQ3MQerEoggjpm8yLxJnNJqLFhd2d72e@mWE0ti@uhuPLoK5FCMmNC9czYUy2C8fz@yA3JqQrA@SrKrMny6lKD4q3qkQyU6TcxFB8QvqoiCU2Qz4lJn8A@YH9ZegfQL4MLYz3YrFdQPaMXYd4cVjfjSOcAcUX4XTlgCwjdEKRO@4EgeXQCGFUa89CEo3nJiR35E5uUYciJY5aCL@Tux4RlHPaRL7g@tV6n9T5/eD0CN@z45NBHaBHIGg7aZsGco6lwW3b5rh4w414j/uNz2TxXsAQ60uHK0ZVPz9jrFM0vePjnfhPhBawaOlW0G@Xz/5msN9ZvTZCu3Tk7ohmdR3/DQ"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A train of two dfns which takes a matrix of 0's and 1's as argument.</p>
<p>Can be simplified a lot using Jonah's idea.</p>
<p>It simplifies the matrix like so:</p>
<pre class=""lang-apl prettyprint-override""><code>#####
##### →  ####
   ##       #
</code></pre>
<p>rotates it to put the corner at the top left:</p>
<pre class=""lang-apl prettyprint-override""><code>##
#
#
#
</code></pre>
<p>and then checks if the first row and first column match its shape.</p>
","80214","","80214","","2021-01-27 11:47:58","2021-01-27 11:47:58","","","","0","","","","CC BY-SA 4.0"
"218072","2","","164364","2021-01-27 09:48:48","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>31</s></sup> 25 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>+/1 1⍉+.×⍣(⎕-1)⍨⌽∘.≤⍨⍳1+⎕
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG9qQMCjtglGBlyPOtrT/mvrGyoYPurt1NY7PP1R72INoLyuoeaj3hWPevY@6pih96hzCYjTu9lQGyj1H6jnfxqXKZehAQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A full program which takes N, then M as inputs.</p>
<p>Follows the same algorithm as xnor's Python solution.</p>
<p>-6 bytes from Bubbler.</p>
","80214","","80214","","2021-02-09 07:50:54","2021-02-09 07:50:54","","","","2","","","","CC BY-SA 4.0"
"218076","2","","172586","2021-01-27 10:41:38","","3","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 57 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>¯1~⍨,1↓∘⍉∘⌽⍣4⊢{2 2⌷⍵:2⊥(~¯9↑5↑1)/,⍵⋄¯1}⌺3 3⊢⍉∘(¯1∘↑⍪⊢⍪1∘↑)⍣2⊢'X'=⎕
</code></pre>
<p><a href=""https://tio.run/##bU9Na8JAEL37K/YWBbtlV3Noof9jroLoRajXIuYkMbXZghShZ4tQcvGiCAUv/pT5I3F2dvNJN5nZee/NvExG89nD@G00e53mmKwn@e2oIjS/fYXxFybfaN5tTq9ofoa42S@00Jhe0JyfNW4O3eh2fMJ4G1Ko3mOfePxYkccS07@BGNCEc@gSZ43iLZqM2czjHjmT1T6A4AU/d3aLfNJRQqE5EdexteZaWqALQQSMycEqhKCCrIJsEsBtIL2nCp0p2BekTY0JR4OjeZqbJB1K3Ggy3qMI6QNqd1UXzsw6R7e1Tw6WQgVrPwYCOIRwPXSXTwv/q7fmRf2w7hsqfz9c@EOJoYUb8/y9Ow"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A full program which takes a binary matrix through STDIN, returns an array of codepoints.</p>
<h2>Explanation</h2>
<p><code>x¯1~⍨,1↓∘⍉∘⌽⍣4⊢{2 2⌷⍵:2⊥(~¯9↑5↑1)/,⍵⋄¯1}⌺3 3⊢⍉∘(¯1∘↑⍪⊢⍪1∘↑)⍣2⊢'X'=⎕</code></p>
<p><code>⎕</code> take input</p>
<p><code>'X'=</code>  boolean matrix where 'X's are 1s</p>
<p><code>⍉∘(...)⍣2⊢</code> do the following twice:</p>
<p><code>¯1∘↑⍪⊢⍪1∘↑</code> pad each row with its wraparound on both sides</p>
<p><code>⍉∘</code> and transpose</p>
<p><code>{...}⌺3 3⊢</code> then, do the following for each 3x3 window:</p>
<p><code>2 2⌷⍵:</code> if the middle element is 1:</p>
<p><code>2⊥(~¯9↑5↑1)/,⍵</code> decode the rest of the window as binary</p>
<p><code>⋄¯1</code> Otherwise, return ¯1.</p>
<p><code>⍣4⊢</code> Do the following 4 times:</p>
<p><code>1↓∘⍉∘⌽</code> rotate 90°, drop first row (remove the border cells)</p>
<p><code>,</code> flatten into a simple array</p>
<p><code>¯1~⍨</code> remove all ¯1s</p>
","80214","","","","","2021-01-27 10:41:38","","","","0","","","","CC BY-SA 4.0"
"218078","2","","107598","2021-01-27 11:40:59","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 33 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>¬♣╘╣Ye╗}Ω╩Ñ╬↓ï|§≈b↕£♠╨z▐₧3→ÿ≡Δ:╔♫
</code></pre>
<p><a href=""https://staxlang.xyz/#p=aa05d4b95965bb7deacaa5ce198b7c15f762129c06d07ade9e331a98f0ff3ac90e&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Uses a similar idea to the 05AB1E answer.</p>
","80214","","","","","2021-01-27 11:40:59","","","","0","","","","CC BY-SA 4.0"
"218084","2","","217690","2021-01-27 14:34:58","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 35 bytes</h1>
<pre><code>ṁ←tU¡λ?:;←!2¹mtt¹ė&quot; &quot;t!2¹!3¹Ë←t)ė&quot; 
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxkdtE0pCDy08t9veyhrIVjQ6tDO3pOTQziPTlRSUSkBcReNDOw93g9RpggT///9fklpckpxYnKpQXFKUmZf@vySxGAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>A very clunky infinite list based solution, but so far the only one that works correctly, so I decided to post it.</p>
","80214","","","","","2021-01-27 14:34:58","","","","0","","","","CC BY-SA 4.0"
"218108","2","","217972","2021-01-28 04:35:18","","4","","<h1>Honnold (66 bytes, -33 points)</h1>
<pre class=""lang-javascript prettyprint-override""><code>{
    name: &quot;Honnold&quot;,
    color: &quot;#0000FF&quot;,
    run:()=&gt;dirTo(chars().sort((a,b)=&gt;distTo(a.pos)-distTo(b.pos))[0].pos)
}
</code></pre>
<p>Bonus points for guessing the name's origin.</p>
<p>Try it:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var botData = [
  {
      name: ""ExampleBot"",
      color: ""#999999"",
      run: () =&gt; dirTo(chars().sort((a, b) =&gt; dist(center(), a.pos) - dist(center(), b.pos))[0].pos)
  },
  {
      name: ""ExampleBot"",
      color: ""#999999"",
      run: () =&gt; dirTo(chars().sort((a, b) =&gt; dist(center(), a.pos) - dist(center(), b.pos))[0].pos)
  },
  {
      name: ""ExampleBot"",
      color: ""#999999"",
      run: () =&gt; dirTo(chars().sort((a, b) =&gt; dist(center(), a.pos) - dist(center(), b.pos))[0].pos)
  },
  {
    name: ""Honnold"",
    color: ""#0000FF"",
    run:()=&gt;dirTo(chars().sort((a,b)=&gt;distTo(a.pos)-distTo(b.pos))[0].pos)
  }
];


{
var game = {
  randPos: (center, any = !1, uid = 0, owner = 0, p = 0.1) =&gt; {
      var theta, radius, pos;
      
      do {
          theta = Math.random() * Math.PI * 2;
          radius = 0;
          
          while (Math.random() &gt; p)
              radius++;
          
          pos = [Math.trunc(center[0] + Math.cos(theta) * radius), Math.trunc(center[1] + Math.sin(theta) * radius)];
      } while (!any &amp;&amp; game.bots.find(a =&gt; a &amp;&amp; a.uid != uid &amp;&amp; Math.abs(a.pos[0] - pos[0]) + Math.abs(a.pos[1] - pos[1]) &lt; (a.uid == owner ? 3 : 4)));
      
      return pos;
  },
  debug: function(){},
  log: 0 // 0 = NONE, 1 = SUMMARY, 2 = ALL
};

var north = () =&gt; [""north""];
var east = () =&gt; [""east""];
var south = () =&gt; [""south""];
var west = () =&gt; [""west""];

var build = code =&gt; [""worker"", code];

var drop = {
  north: char =&gt; [""drop.north"", char],
  east: char =&gt; [""drop.east"", char],
  south: char =&gt; [""drop.south"", char],
  west: char =&gt; [""drop.west"", char]
};

var bots = () =&gt; game.bots.map(a =&gt; ({
  uid: a.uid,
  owner: a.owner,
  original: a.original,
  score: a.score,
  pos: [...a.pos],
  chars: game.uid == a.uid ? [...a.chars] : undefined,
  source: game.uid == a.uid ? a.source : undefined
})).sort((a, b) =&gt; a.uid - b.uid);

var chars = () =&gt; game.chars.map(a =&gt; ({
  char: a.char,
  pos: [...a.pos]
}));

var self = () =&gt; {
  var bot = game.bots.find(a =&gt; a.uid == game.uid);
  return bot ? {
      uid: bot.uid,
      owner: bot.owner,
      original: bot.original,
      score: bot.score,
      pos: [...bot.pos],
      chars: [...bot.chars],
      source: bot.source
  } : null;
};

var owner = () =&gt; {
  var bot = game.bots.find(a =&gt; a.uid == game.bots.find(b =&gt; b.uid == game.uid).owner);
  return bot ? {
      uid: bot.uid,
      owner: bot.owner,
      original: bot.original,
      score: bot.score,
      pos: [...bot.pos],
      chars: [...bot.chars],
      source: bot.source
  } : null;
};

var center = () =&gt; game.center;
var turn = () =&gt; game.turns;

var at = pos =&gt; ({
  bot: (game.bots.find(b =&gt; b.pos[0] == pos[0] &amp;&amp; b.pos[1] == pos[1]) || {uid: null}).uid,
  chars: chars().filter(c =&gt; c.pos[0] == pos[0] &amp;&amp; c.pos[1] == pos[1])
});

var dir = (posFrom, pos) =&gt; {
  if (Math.abs(posFrom[0] - pos[0]) &lt;= Math.abs(posFrom[1] - pos[1]))
      return posFrom[1] &lt; pos[1] ? [""north""] : [""south""];
  else
      return posFrom[0] &lt; pos[0] ? [""west""] : [""east""];
};

var dirTo = pos =&gt; {
  var bot = game.bots.find(a =&gt; a.uid == game.uid);
  if (Math.abs(pos[0] - bot.pos[0]) &lt;= Math.abs(pos[1] - bot.pos[1]))
      return pos[1] &lt; bot.pos[1] ? [""north""] : [""south""];
  else
      return pos[0] &lt; bot.pos[0] ? [""west""] : [""east""];
};

var dist = (posFrom, pos) =&gt; {
  return Math.abs(posFrom[0] - pos[0]) + Math.abs(posFrom[1] - pos[1]);
};

var distTo = pos =&gt; {
  var bot = game.bots.find(a =&gt; a.uid == game.uid);
  return Math.abs(pos[0] - bot.pos[0]) + Math.abs(pos[1] - bot.pos[1]);
};

async function runRound(turns = 100000) {
  var uids = [];
  
  game.perf = performance.now();
  
  for (let i = 1; i &lt;= botData.length; i++)
      uids[i - 1] = i;
  
  for (let j, i = uids.length - 1; i &gt; 0; i--) {
      j = Math.floor(Math.random() * (i + 1));
      [uids[i], uids[j]] = [uids[j], uids[i]];
  }
  
  game.bots = [];
  game.chars = [];
  game.records = game.records || [];
  game.uids = [];
  
  for (let i = 0; i &lt; botData.length; i++) {
      game.bots[i] = {
          uid: uids[i],
          owner: uids[i],
          original: uids[i],
          score: Math.floor(botData[i].run.toString().length * -1 / 2),
          chars: [],
          pos: game.randPos([0, 0]),
          source: botData[i].run.toString(),
          run: botData[i].run,
          storage: {},
          name: botData[i].name || ""Bot"",
          color: botData[i].color || ""#000000""
      };
      
      game.uids[uids[i]] = i;
      game.records[i] = game.records[i] || 0;
  }
  
  game.center = [
      game.bots.reduce((a, b) =&gt; a + b.pos[0] * (b.score + 1), 0) / game.bots.reduce((a, b) =&gt; a + (b.score + 1), 0),
      game.bots.reduce((a, b) =&gt; a + b.pos[1] * (b.score + 1), 0) / game.bots.reduce((a, b) =&gt; a + (b.score + 1), 0)
  ];
  
  game.charPool = game.bots.map(a =&gt; a.source).join("""");
  
  for (let i = 0; i &lt; botData.length * 4; i++)
      game.chars.push({
          char: game.charPool[Math.random() * game.charPool.length | 0],
          pos: game.randPos([0, 0]),
          game: !0
      });
  
  game.cuid = botData.length + 1;
  game.turns = 0;
  
  if (!game.fps) {
      while (game.chars.length &amp;&amp; game.bots.length &amp;&amp; game.turns &lt; turns) {
          runTurn();
          
          game.turns++;
      }
  } else {
      game.debug();
      
      while (game.chars.length &amp;&amp; game.bots.length &amp;&amp; game.turns &lt; turns) {
          await new Promise(function(resolve) {
              setTimeout(resolve, 1000 / game.fps);
          });
          
          if (!game.pause) {
              runTurn();
              
              game.debug();
              game.turns++;
          }
      }
  }
  bots().map(b =&gt; game.records[game.uids[b.original]] += b.score);
  
  if (game.log)
      console.log(""Round Completed ("" + ((performance.now() - game.perf) / 1000).toFixed(3) + ""s):\n"" + game.bots.map(a =&gt; a).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join(""\n""));
}

function runTurn() {
  var cbots = [];
  var npos = [];
  var nposl = [];
  var nbots = [];
  
  for (let b, p, m, i = 0; i &lt; game.bots.length; i++) {
      b = game.bots[i];
      
      game.uid = b.uid;
      
      try {
          m = b.run(b.storage);
      } catch(e) {
          m = [""dead""];
          
          if (game.log == 2)
              console.warn(""["" + game.turns + ""] Error: "" + b.name + ""\n"" + (e.stack || e.message));
          
          for (let j = 0; j &lt; b.chars.length; j++)
              game.chars.push({
                  char: b.chars[j],
                  pos: game.randPos(b.pos, !0, 0, 0, 0.2),
                  game: !1
              });
      }
      
      if (!Array.isArray(m))
          m = [];
      
      if (m[0] == ""north"")
          p = [b.pos[0], b.pos[1] - 1];
      else if (m[0] == ""east"")
          p = [b.pos[0] + 1, b.pos[1]];
      else if (m[0] == ""south"")
          p = [b.pos[0], b.pos[1] + 1];
      else if (m[0] == ""west"")
          p = [b.pos[0] - 1, b.pos[1]];
      else
          p = [...b.pos];
      
      if (m[0] != ""dead"")
          npos.push({
              bot: b.uid,
              pos: p
          });
      
      if (m[0] == ""worker"" &amp;&amp; m[1].split("""").reduce((c, d, e) =&gt; d &amp;&amp; (e = c.indexOf(d)) != -1 ? c.filter((f, g) =&gt; g != e) : null, [...b.chars])) {
          p = game.randPos(b.pos, !1, 0, b.uid);
          
          try {
              cbots.push({
                  uid: game.cuid,
                  owner: b.uid,
                  original: b.original,
                  score: 0,
                  chars: [],
                  pos: p,
                  source: m[1],
                  run: eval(m[1]),
                  storage: {},
                  name: b.name + ""*"",
                  color: b.color
              });
              
              npos.push({
                  bot: game.cuid++,
                  pos: p
              });
              
              b.score -= Math.floor(m[1].length / 2);
              
              for (let n, j = 0; j &lt; m[1].length; j++) {
                  n = b.chars.indexOf(m[1][j]);
                  
                  b.chars = b.chars.slice(0, n).concat(b.chars.slice(n + 1));
              }
              
              if (game.log == 2)
                  console.log(""["" + game.turns + ""] New Worker: "" + b.name);
          } catch(e) {
              if (game.log == 2)
                  console.warn(""["" + game.turns + ""] Invalid Worker: "" + b.name + ""\n"" + (e.stack || e.message));
          }
      }
      
      if (typeof m[0] == ""string"" &amp;&amp; m[0].match(/^drop.(north|east|south|west)$/) &amp;&amp; b.chars.includes(m[1])) {
          b.score--;
          
          for (let j = 0; j &lt; b.chars.length; j++) {
              if (b.chars[j] == m[1]) {
                  b.chars = b.chars.slice(0, j) + b.chars.slice(j + 1);
                  
                  break;
              }
          }
          
          if (m[0] == ""drop.north"")
              p = [b.pos[0], b.pos[1] - 1];
          else if (m[0] == ""drop.east"")
              p = [b.pos[0] + 1, b.pos[1]];
          else if (m[0] == ""drop.south"")
              p = [b.pos[0], b.pos[1] + 1];
          else if (m[0] == ""drop.west"")
              p = [b.pos[0] - 1, b.pos[1]];
          
          game.chars.push({
              char: m[1],
              pos: p,
              game: !1
          });
      }
  }
  
  game.bots.push(...cbots);
  
  for (let f, i = 0; i &lt; npos.length; i++) {
      if (!(f = nposl.find(a =&gt; a.pos[0] == npos[i].pos[0] &amp;&amp; a.pos[1] == npos[i].pos[1])))
          nposl.push(f = {
              pos: [...npos[i].pos],
              bots: []
          });
      
      f.bots.push(npos[i].bot);
  }
  
  for (let n, m, b, i = 0; i &lt; nposl.length; i++) {
      n = nposl[i];
      
      if (n.bots.length &gt; 1) {
          m = Math.max(...n.bots.map(a =&gt; game.bots.find(b =&gt; b.uid == a).score));
          
          if (game.bots.filter(a =&gt; n.bots.includes(a.uid) &amp;&amp; a.score == m).length &gt; 1) {
              m += 1;
              
              if (game.log == 2)
                  console.log(""["" + game.turns + ""] Collision: "" + n.bots.map(a =&gt; game.bots.find(b =&gt; a == b.uid)).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join("", ""));
          } else {
              if (game.log == 2)
                  console.log(""["" + game.turns + ""] Collision: "" + n.bots.map(a =&gt; game.bots.find(b =&gt; a == b.uid)).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join("", ""));
          }
          
          for (let j = 0; j &lt; n.bots.length; j++) {
              b = game.bots.find(a =&gt; a.uid == n.bots[j]);
              
              if (b.score &lt; m)
                  for (let k = 0; k &lt; b.chars.length; k++)
                      game.chars.push({
                          char: b.chars[k],
                          pos: game.randPos(b.pos, !0, 0, 0, 0.2),
                          game: !1
                      });
              else
                  nbots.push({
                      uid: b.uid,
                      owner: b.owner,
                      original: b.original,
                      score: b.score,
                      chars: [...b.chars],
                      pos: n.pos,
                      source: b.source,
                      run: b.run,
                      storage: b.storage,
                      name: b.name,
                      color: b.color
                  });
          }
      } else {
          b = game.bots.find(a =&gt; a.uid == n.bots[0]);
          
          nbots.push({
              uid: b.uid,
              owner: b.owner,
              original: b.original,
              score: b.score,
              chars: [...b.chars],
              pos: n.pos,
              source: b.source,
              run: b.run,
              storage: b.storage,
              name: b.name,
              color: b.color
          });
      }
  }
  
  game.center = [
      nbots.reduce((a, b) =&gt; a + b.pos[0] * (b.score + 1), 0) / nbots.reduce((a, b) =&gt; a + (b.score + 1), 0),
      nbots.reduce((a, b) =&gt; a + b.pos[1] * (b.score + 1), 0) / nbots.reduce((a, b) =&gt; a + (b.score + 1), 0)
  ];
  
  game.charPool = nbots.map(a =&gt; a.source).join("""");
  
  for (let b, c, i = 0; i &lt; game.chars.length; i++) {
      c = game.chars[i];
      
      if (b = nbots.find(a =&gt; a.pos[0] == c.pos[0] &amp;&amp; a.pos[1] == c.pos[1])) {
          b.score++;
          
          b.chars.push(c.char);
          
          if (c.game &amp;&amp; game.chars.filter(a =&gt; a &amp;&amp; a.game).length &lt; nbots.length * 4 &amp;&amp; game.bots.map(a =&gt; a.original).reduce((a, b) =&gt; a.includes(b) ? a : a.concat(b), []).length &gt; 1)
              game.chars.push({
                  char: game.charPool[Math.random() * game.charPool.length | 0],
                  pos: game.randPos([0, 0]),
                  game: !0
              });
          
          game.chars[i] = null;
      }
  }
  
  game.chars = game.chars.filter(a =&gt; a);
  game.bots = nbots;
};

function drawRound(turns = 100000, log = 2, fps = 5, zoom = 50){
  var c, ctx, wdim, scale;
  
  document.body.innerHTML = ""&lt;canvas&gt;&lt;/canvas&gt;"";
  
  c = document.body.firstChild;
  c.style.position = ""absolute"";
  c.style.top = ""0"";
  c.style.left = ""0"";
  c.style.zIndex = ""2"";
  ctx = c.getContext(""2d"");
  
  game.records = new Array(botData.length).fill(0);
  game.log = log;
  game.pause = !1;
  game.fps = fps;
  
  (window.onresize = function() {
      wdim = [window.innerWidth || 600, window.innerHeight || 400];
      scale = Math.ceil(wdim[1] / zoom);
      c.width = wdim[0];
      c.height = wdim[1];
  })();
  
  window.onkeydown = function() {
      var key = event.code;
      if (key == ""Escape"")
          game.pause = !game.pause;
      if (key == ""ArrowLeft"" &amp;&amp; game.fps &gt; 1)
          game.fps -= 1;
      if (key == ""ArrowRight"")
          game.fps += 1;
  };
  
  game.debug = function() {
      ctx.clearRect(0, 0, wdim[0], wdim[1]);
      ctx.textBaseline = ""middle"";
      ctx.textAlign = ""center"";
      ctx.font = Math.floor(scale * 0.6) + ""px monospace"";
      for (let x = -Math.ceil(wdim[0] / 2 / scale), i = wdim[0] / 2 - (Math.ceil(wdim[0] / 2 / scale) - 0.5) * scale; i &lt;= wdim[0]; i += scale, x++) {
          for (let b, c, y = -Math.ceil(wdim[1] / 2 / scale), j = wdim[1] / 2 - (Math.ceil(wdim[1] / 2 / scale) - 0.5) * scale; j &lt;= wdim[1]; j += scale, y++) {
              if ((c = game.chars.filter(a =&gt; a.pos[0] == Math.floor(x) &amp;&amp; a.pos[1] == Math.floor(y))).length) {
                  for (let k = 0; k &lt; c.length; k++)
                      ctx.fillText(JSON.stringify(c[k].char).slice(1, -1).replace(/\\""/, ""\"""").replace(/\\\\/, ""\\"").replace(/ /, ""_""), i + scale / 2, j + scale / 2);
              }
              if (b = game.bots.find(a =&gt; a.pos[0] == Math.floor(x) &amp;&amp; a.pos[1] == Math.floor(y))) {
                  ctx.fillStyle = b.color;
                  ctx.fillRect(i, j, scale, scale);
                  ctx.fillStyle = ""#000000"";
              }
          }
          ctx.lineWidth = 0.1;
          ctx.beginPath();
          ctx.moveTo(i, 0);
          ctx.lineTo(i, wdim[1]);
          ctx.stroke();
      }
      for (let i = wdim[1] / 2 - (Math.ceil(wdim[1] / 2 / scale) - 0.5) * scale; i &lt;= wdim[1]; i += scale) {
          ctx.beginPath();
          ctx.moveTo(0, i);
          ctx.lineTo(wdim[0], i);
          ctx.stroke();
      }
      ctx.fillRect(wdim[0] / 2 - 3, wdim[1] / 2 - 3, 7, 7);
  };
  
  runRound(turns);
}

function runGame(rounds = 1, turns = 100000, log = 0) {
  game.records = new Array(botData.length).fill(0);
  game.log = log;
  
  for (let i = 0; i &lt; rounds; i++)
      runRound(turns, 0);
  
  console.log(""Game Conclusion:\n"" + botData.map((a, b) =&gt; [a.name, game.records[b]]).sort((a, b) =&gt; b[1] - a[1]).map(a =&gt; ""["" + a[1] + ""] "" + a[0]).join(""\n""));
}

};

drawRound(/*turns =*/ 1000, /*log =*/ 2, /*fps =*/ 10,/* zoom =*/ 50);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;body&gt;&lt;/body&gt;</code></pre>
</div>
</div>
</p>
","80214","","80214","","2021-01-28 15:12:09","2021-01-28 15:12:09","","","","0","","","","CC BY-SA 4.0"
"218112","1","","","2021-01-28 09:49:51","","13","1125","<p>Heavily based on <a href=""https://codegolf.stackexchange.com/q/148911/80214"">this closed challenge.</a></p>
<p><a href=""https://codegolf.codidact.com/posts/279253"" rel=""noreferrer"">Codidact post</a>, <a href=""https://codegolf.meta.stackexchange.com/a/20435/80214"">Sandbox</a></p>
<h1>Description</h1>
<p>A Sumac sequence starts with two non-zero integers <span class=""math-container"">\$t_1\$</span> and  <span class=""math-container"">\$t_2.\$</span></p>
<p>The next term, <span class=""math-container"">\$t_3 = t_1 - t_2\$</span></p>
<p>More generally, <span class=""math-container"">\$t_n = t_{n-2} - t_{n-1}\$</span></p>
<p>The sequence ends when <span class=""math-container"">\$t_n ≤ 0\$</span>. All values in the sequence must be positive.</p>
<h1>Challenge</h1>
<p>Given two integers <span class=""math-container"">\$t_1\$</span> and <span class=""math-container"">\$t_2\$</span>, compute the Sumac sequence, and output its length.</p>
<p>If there is a negative number in the input, remove everything after it, and compute the length.</p>
<p>You may take the input in any way (Array, two numbers, etc.)</p>
<h1>Test Cases</h1>
<p>(Sequence is included for clarification)</p>
<pre><code>[t1,t2]   Sequence          n
------------------------------
[120,71]  [120,71,49,22,27] 5
[101,42]  [101,42,59]       3
[500,499] [500,499,1,498]   4
[387,1]   [387,1,386]       3
[3,-128]  [3]               1
[-2,3]    []                0
[3,2]     [3,2,1,1]         4
</code></pre>

<h1>Scoring</h1>
<p>This is <a href=""/questions/tagged/code-golf"" class=""post-tag"" title=""show questions tagged &#39;code-golf&#39;"" rel=""tag"">code-golf</a>. Shortest answer in each language wins.</p>

","80214","","97857","","2021-01-28 15:14:06","2021-04-11 09:08:51","Get the length of a Sumac Sequence","<code-golf><number><sequence>","21","7","0","","","CC BY-SA 4.0"
"218133","2","","108362","2021-01-28 13:55:59","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>V≥¹∫∫ḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P@xR59JDOx91rAaihzsW////39wUAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##yygtzv5/aFvuo6bG/2GPOpce2vmoYzUQPdyx@P///9GGOqY65qY6hgYGOkZGIGyoY2xmEgsA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify all test cases</a></p>
<h2>Explanation</h2>
<pre><code>V≥¹∫∫ḣ
     ḣ range 1..n
   ∫∫  cumulative sum, twice
V      index of first element that is
 ≥¹    greater than or equal to the input 
</code></pre>
","80214","","","","","2021-01-28 13:55:59","","","","0","","","","CC BY-SA 4.0"
"218143","2","","218138","2021-01-28 14:58:31","","5","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, <sup><s>15 11 10 <sup>33</sup></s></sup> 16 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>100,∘?⍨⍣{0=⊃⌽⍺}⍬
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkGXI862tP@GxoY6DzqmGH/qHfFo97F1Qa2j7qaH/XsfdS7q/ZR75r/QDX/0wA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A full program which outputs the numbers separated by spaces.</p>
<p>Uses <code>⎕IO←0</code> (0-indexing).</p>
<p>-4 then -1 byte from Adám.</p>
<p>-19 bytes from 1_am_Jack.</p>
","80214","","80214","","2021-03-17 02:33:39","2021-03-17 02:33:39","","","","14","","","","CC BY-SA 4.0"
"218149","2","","52867","2021-01-28 15:36:29","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 12 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>å■Åxb◄34Γφ¥r
</code></pre>
<p><a href=""https://staxlang.xyz/#p=86fe8f7862113334e2ed9d72&amp;i=1%0A2%0A3%0A10&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-01-28 15:36:29","","","","0","","","","CC BY-SA 4.0"
"218154","2","","217972","2021-01-28 15:58:09","","2","","<h1>Centrist, 18 bytes(-9 points)</h1>
<pre><code>{
    name: &quot;Centrist&quot;,
    color: &quot;#666666&quot;,
    run:_=&gt;dirTo(center())
}
</code></pre>
<p>Even dumber than our friendly neighbourhood copycat. Just follows the crowd and hopes that he can live. Even his color is dull.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var botData = [
  {
name: ""Honnold"",
color: ""#0000FF"",
run:()=&gt;dirTo(chars().sort((a,b)=&gt;distTo(a.pos)-distTo(b.pos))[0].pos)
  },

  {
    name: ""The Caveman"",
    color: ""#FF0000"",
    run:_=&gt;{w=bots().sort((a,b)=&gt;a.score-b.score)[0];return self().score&lt;=w.score?dirTo(chars().sort((a,b)=&gt;distTo(a.pos)-distTo(b.pos))[0].pos):dirTo(w.pos)}
  },
    {
    name: ""Centrist"",
    color: ""#666666"",
    run:_=&gt;dirTo(center())
  },
  {
    name: ""True Neutral"",
    color: ""#400000"",
    run: _=&gt;dirTo(chars().sort((a,b)=&gt;dist(a.pos,[0,0])-dist(b.pos,[0,0])+distTo(a.pos)-distTo(b.pos))[0].pos)
}
 
];


{
var game = {
  randPos: (center, any = !1, uid = 0, owner = 0, p = 0.1) =&gt; {
      var theta, radius, pos;
      
      do {
          theta = Math.random() * Math.PI * 2;
          radius = 0;
          
          while (Math.random() &gt; p)
              radius++;
          
          pos = [Math.trunc(center[0] + Math.cos(theta) * radius), Math.trunc(center[1] + Math.sin(theta) * radius)];
      } while (!any &amp;&amp; game.bots.find(a =&gt; a &amp;&amp; a.uid != uid &amp;&amp; Math.abs(a.pos[0] - pos[0]) + Math.abs(a.pos[1] - pos[1]) &lt; (a.uid == owner ? 3 : 4)));
      
      return pos;
  },
  debug: function(){},
  log: 0 // 0 = NONE, 1 = SUMMARY, 2 = ALL
};

var north = () =&gt; [""north""];
var east = () =&gt; [""east""];
var south = () =&gt; [""south""];
var west = () =&gt; [""west""];

var build = code =&gt; [""worker"", code];

var drop = {
  north: char =&gt; [""drop.north"", char],
  east: char =&gt; [""drop.east"", char],
  south: char =&gt; [""drop.south"", char],
  west: char =&gt; [""drop.west"", char]
};

var bots = () =&gt; game.bots.map(a =&gt; ({
  uid: a.uid,
  owner: a.owner,
  original: a.original,
  score: a.score,
  pos: [...a.pos],
  chars: game.uid == a.uid ? [...a.chars] : undefined,
  source: game.uid == a.uid ? a.source : undefined
})).sort((a, b) =&gt; a.uid - b.uid);

var chars = () =&gt; game.chars.map(a =&gt; ({
  char: a.char,
  pos: [...a.pos]
}));

var self = () =&gt; {
  var bot = game.bots.find(a =&gt; a.uid == game.uid);
  return bot ? {
      uid: bot.uid,
      owner: bot.owner,
      original: bot.original,
      score: bot.score,
      pos: [...bot.pos],
      chars: [...bot.chars],
      source: bot.source
  } : null;
};

var owner = () =&gt; {
  var bot = game.bots.find(a =&gt; a.uid == game.bots.find(b =&gt; b.uid == game.uid).owner);
  return bot ? {
      uid: bot.uid,
      owner: bot.owner,
      original: bot.original,
      score: bot.score,
      pos: [...bot.pos],
      chars: [...bot.chars],
      source: bot.source
  } : null;
};

var center = () =&gt; game.center;
var turn = () =&gt; game.turns;

var at = pos =&gt; ({
  bot: (game.bots.find(b =&gt; b.pos[0] == pos[0] &amp;&amp; b.pos[1] == pos[1]) || {uid: null}).uid,
  chars: chars().filter(c =&gt; c.pos[0] == pos[0] &amp;&amp; c.pos[1] == pos[1])
});

var dir = (posFrom, pos) =&gt; {
  if (Math.abs(posFrom[0] - pos[0]) &lt;= Math.abs(posFrom[1] - pos[1]))
      return posFrom[1] &lt; pos[1] ? [""north""] : [""south""];
  else
      return posFrom[0] &lt; pos[0] ? [""west""] : [""east""];
};

var dirTo = pos =&gt; {
  var bot = game.bots.find(a =&gt; a.uid == game.uid);
  if (Math.abs(pos[0] - bot.pos[0]) &lt;= Math.abs(pos[1] - bot.pos[1]))
      return pos[1] &lt; bot.pos[1] ? [""north""] : [""south""];
  else
      return pos[0] &lt; bot.pos[0] ? [""west""] : [""east""];
};

var dist = (posFrom, pos) =&gt; {
  return Math.abs(posFrom[0] - pos[0]) + Math.abs(posFrom[1] - pos[1]);
};

var distTo = pos =&gt; {
  var bot = game.bots.find(a =&gt; a.uid == game.uid);
  return Math.abs(pos[0] - bot.pos[0]) + Math.abs(pos[1] - bot.pos[1]);
};

async function runRound(turns = 100000) {
  var uids = [];
  
  game.perf = performance.now();
  
  for (let i = 1; i &lt;= botData.length; i++)
      uids[i - 1] = i;
  
  for (let j, i = uids.length - 1; i &gt; 0; i--) {
      j = Math.floor(Math.random() * (i + 1));
      [uids[i], uids[j]] = [uids[j], uids[i]];
  }
  
  game.bots = [];
  game.chars = [];
  game.records = game.records || [];
  game.uids = [];
  
  for (let i = 0; i &lt; botData.length; i++) {
      game.bots[i] = {
          uid: uids[i],
          owner: uids[i],
          original: uids[i],
          score: Math.floor(botData[i].run.toString().length * -1 / 2),
          chars: [],
          pos: game.randPos([0, 0]),
          source: botData[i].run.toString(),
          run: botData[i].run,
          storage: {},
          name: botData[i].name || ""Bot"",
          color: botData[i].color || ""#000000""
      };
      
      game.uids[uids[i]] = i;
      game.records[i] = game.records[i] || 0;
  }
  
  game.center = [
      game.bots.reduce((a, b) =&gt; a + b.pos[0] * (b.score + 1), 0) / game.bots.reduce((a, b) =&gt; a + (b.score + 1), 0),
      game.bots.reduce((a, b) =&gt; a + b.pos[1] * (b.score + 1), 0) / game.bots.reduce((a, b) =&gt; a + (b.score + 1), 0)
  ];
  
  game.charPool = game.bots.map(a =&gt; a.source).join("""");
  
  for (let i = 0; i &lt; botData.length * 4; i++)
      game.chars.push({
          char: game.charPool[Math.random() * game.charPool.length | 0],
          pos: game.randPos([0, 0]),
          game: !0
      });
  
  game.cuid = botData.length + 1;
  game.turns = 0;
  
  if (!game.fps) {
      while (game.chars.length &amp;&amp; game.bots.length &amp;&amp; game.turns &lt; turns) {
          runTurn();
          
          game.turns++;
      }
  } else {
      game.debug();
      
      while (game.chars.length &amp;&amp; game.bots.length &amp;&amp; game.turns &lt; turns) {
          await new Promise(function(resolve) {
              setTimeout(resolve, 1000 / game.fps);
          });
          
          if (!game.pause) {
              runTurn();
              
              game.debug();
              game.turns++;
          }
      }
  }
  bots().map(b =&gt; game.records[game.uids[b.original]] += b.score);
  
  if (game.log)
      console.log(""Round Completed ("" + ((performance.now() - game.perf) / 1000).toFixed(3) + ""s):\n"" + game.bots.map(a =&gt; a).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join(""\n""));
}

function runTurn() {
  var cbots = [];
  var npos = [];
  var nposl = [];
  var nbots = [];
  
  for (let b, p, m, i = 0; i &lt; game.bots.length; i++) {
      b = game.bots[i];
      
      game.uid = b.uid;
      
      try {
          m = b.run(b.storage);
      } catch(e) {
          m = [""dead""];
          
          if (game.log == 2)
              console.warn(""["" + game.turns + ""] Error: "" + b.name + ""\n"" + (e.stack || e.message));
          
          for (let j = 0; j &lt; b.chars.length; j++)
              game.chars.push({
                  char: b.chars[j],
                  pos: game.randPos(b.pos, !0, 0, 0, 0.2),
                  game: !1
              });
      }
      
      if (!Array.isArray(m))
          m = [];
      
      if (m[0] == ""north"")
          p = [b.pos[0], b.pos[1] - 1];
      else if (m[0] == ""east"")
          p = [b.pos[0] + 1, b.pos[1]];
      else if (m[0] == ""south"")
          p = [b.pos[0], b.pos[1] + 1];
      else if (m[0] == ""west"")
          p = [b.pos[0] - 1, b.pos[1]];
      else
          p = [...b.pos];
      
      if (m[0] != ""dead"")
          npos.push({
              bot: b.uid,
              pos: p
          });
      
      if (m[0] == ""worker"" &amp;&amp; m[1].split("""").reduce((c, d, e) =&gt; d &amp;&amp; (e = c.indexOf(d)) != -1 ? c.filter((f, g) =&gt; g != e) : null, [...b.chars])) {
          p = game.randPos(b.pos, !1, 0, b.uid);
          
          try {
              cbots.push({
                  uid: game.cuid,
                  owner: b.uid,
                  original: b.original,
                  score: 0,
                  chars: [],
                  pos: p,
                  source: m[1],
                  run: eval(m[1]),
                  storage: {},
                  name: b.name + ""*"",
                  color: b.color
              });
              
              npos.push({
                  bot: game.cuid++,
                  pos: p
              });
              
              b.score -= Math.floor(m[1].length / 2);
              
              for (let n, j = 0; j &lt; m[1].length; j++) {
                  n = b.chars.indexOf(m[1][j]);
                  
                  b.chars = b.chars.slice(0, n).concat(b.chars.slice(n + 1));
              }
              
              if (game.log == 2)
                  console.log(""["" + game.turns + ""] New Worker: "" + b.name);
          } catch(e) {
              if (game.log == 2)
                  console.warn(""["" + game.turns + ""] Invalid Worker: "" + b.name + ""\n"" + (e.stack || e.message));
          }
      }
      
      if (typeof m[0] == ""string"" &amp;&amp; m[0].match(/^drop.(north|east|south|west)$/) &amp;&amp; b.chars.includes(m[1])) {
          b.score--;
          
          for (let j = 0; j &lt; b.chars.length; j++) {
              if (b.chars[j] == m[1]) {
                  b.chars = b.chars.slice(0, j) + b.chars.slice(j + 1);
                  
                  break;
              }
          }
          
          if (m[0] == ""drop.north"")
              p = [b.pos[0], b.pos[1] - 1];
          else if (m[0] == ""drop.east"")
              p = [b.pos[0] + 1, b.pos[1]];
          else if (m[0] == ""drop.south"")
              p = [b.pos[0], b.pos[1] + 1];
          else if (m[0] == ""drop.west"")
              p = [b.pos[0] - 1, b.pos[1]];
          
          game.chars.push({
              char: m[1],
              pos: p,
              game: !1
          });
      }
  }
  
  game.bots.push(...cbots);
  
  for (let f, i = 0; i &lt; npos.length; i++) {
      if (!(f = nposl.find(a =&gt; a.pos[0] == npos[i].pos[0] &amp;&amp; a.pos[1] == npos[i].pos[1])))
          nposl.push(f = {
              pos: [...npos[i].pos],
              bots: []
          });
      
      f.bots.push(npos[i].bot);
  }
  
  for (let n, m, b, i = 0; i &lt; nposl.length; i++) {
      n = nposl[i];
      
      if (n.bots.length &gt; 1) {
          m = Math.max(...n.bots.map(a =&gt; game.bots.find(b =&gt; b.uid == a).score));
          
          if (game.bots.filter(a =&gt; n.bots.includes(a.uid) &amp;&amp; a.score == m).length &gt; 1) {
              m += 1;
              
              if (game.log == 2)
                  console.log(""["" + game.turns + ""] Collision: "" + n.bots.map(a =&gt; game.bots.find(b =&gt; a == b.uid)).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join("", ""));
          } else {
              if (game.log == 2)
                  console.log(""["" + game.turns + ""] Collision: "" + n.bots.map(a =&gt; game.bots.find(b =&gt; a == b.uid)).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join("", ""));
          }
          
          for (let j = 0; j &lt; n.bots.length; j++) {
              b = game.bots.find(a =&gt; a.uid == n.bots[j]);
              
              if (b.score &lt; m)
                  for (let k = 0; k &lt; b.chars.length; k++)
                      game.chars.push({
                          char: b.chars[k],
                          pos: game.randPos(b.pos, !0, 0, 0, 0.2),
                          game: !1
                      });
              else
                  nbots.push({
                      uid: b.uid,
                      owner: b.owner,
                      original: b.original,
                      score: b.score,
                      chars: [...b.chars],
                      pos: n.pos,
                      source: b.source,
                      run: b.run,
                      storage: b.storage,
                      name: b.name,
                      color: b.color
                  });
          }
      } else {
          b = game.bots.find(a =&gt; a.uid == n.bots[0]);
          
          nbots.push({
              uid: b.uid,
              owner: b.owner,
              original: b.original,
              score: b.score,
              chars: [...b.chars],
              pos: n.pos,
              source: b.source,
              run: b.run,
              storage: b.storage,
              name: b.name,
              color: b.color
          });
      }
  }
  
  game.center = [
      nbots.reduce((a, b) =&gt; a + b.pos[0] * (b.score + 1), 0) / nbots.reduce((a, b) =&gt; a + (b.score + 1), 0),
      nbots.reduce((a, b) =&gt; a + b.pos[1] * (b.score + 1), 0) / nbots.reduce((a, b) =&gt; a + (b.score + 1), 0)
  ];
  
  game.charPool = nbots.map(a =&gt; a.source).join("""");
  
  for (let b, c, i = 0; i &lt; game.chars.length; i++) {
      c = game.chars[i];
      
      if (b = nbots.find(a =&gt; a.pos[0] == c.pos[0] &amp;&amp; a.pos[1] == c.pos[1])) {
          b.score++;
          
          b.chars.push(c.char);
          
          if (c.game &amp;&amp; game.chars.filter(a =&gt; a &amp;&amp; a.game).length &lt; nbots.length * 4 &amp;&amp; game.bots.map(a =&gt; a.original).reduce((a, b) =&gt; a.includes(b) ? a : a.concat(b), []).length &gt; 1)
              game.chars.push({
                  char: game.charPool[Math.random() * game.charPool.length | 0],
                  pos: game.randPos([0, 0]),
                  game: !0
              });
          
          game.chars[i] = null;
      }
  }
  
  game.chars = game.chars.filter(a =&gt; a);
  game.bots = nbots;
};

function drawRound(turns = 100000, log = 2, fps = 60, zoom = 50){
  var c, ctx, wdim, scale;
  
  document.body.innerHTML = ""&lt;canvas&gt;&lt;/canvas&gt;"";
  
  c = document.body.firstChild;
  c.style.position = ""absolute"";
  c.style.top = ""0"";
  c.style.left = ""0"";
  c.style.zIndex = ""2"";
  ctx = c.getContext(""2d"");
  
  game.records = new Array(botData.length).fill(0);
  game.log = log;
  game.pause = !1;
  game.fps = fps;
  
  (window.onresize = function() {
      wdim = [window.innerWidth || 600, window.innerHeight || 400];
      scale = Math.ceil(wdim[1] / zoom);
      c.width = wdim[0];
      c.height = wdim[1];
  })();
  
  window.onkeydown = function() {
      var key = event.code;
      if (key == ""Escape"")
          game.pause = !game.pause;
      if (key == ""ArrowLeft"" &amp;&amp; game.fps &gt; 1)
          game.fps -= 1;
      if (key == ""ArrowRight"")
          game.fps += 1;
  };
  
  game.debug = function() {
      ctx.clearRect(0, 0, wdim[0], wdim[1]);
      ctx.textBaseline = ""middle"";
      ctx.textAlign = ""center"";
      ctx.font = Math.floor(scale * 0.6) + ""px monospace"";
      for (let x = -Math.ceil(wdim[0] / 2 / scale), i = wdim[0] / 2 - (Math.ceil(wdim[0] / 2 / scale) - 0.5) * scale; i &lt;= wdim[0]; i += scale, x++) {
          for (let b, c, y = -Math.ceil(wdim[1] / 2 / scale), j = wdim[1] / 2 - (Math.ceil(wdim[1] / 2 / scale) - 0.5) * scale; j &lt;= wdim[1]; j += scale, y++) {
              if ((c = game.chars.filter(a =&gt; a.pos[0] == Math.floor(x) &amp;&amp; a.pos[1] == Math.floor(y))).length) {
                  for (let k = 0; k &lt; c.length; k++)
                      ctx.fillText(JSON.stringify(c[k].char).slice(1, -1).replace(/\\""/, ""\"""").replace(/\\\\/, ""\\"").replace(/ /, ""_""), i + scale / 2, j + scale / 2);
              }
              if (b = game.bots.find(a =&gt; a.pos[0] == Math.floor(x) &amp;&amp; a.pos[1] == Math.floor(y))) {
                  ctx.fillStyle = b.color;
                  ctx.fillRect(i, j, scale, scale);
                  ctx.fillStyle = ""#000000"";
              }
          }
          ctx.lineWidth = 0.1;
          ctx.beginPath();
          ctx.moveTo(i, 0);
          ctx.lineTo(i, wdim[1]);
          ctx.stroke();
      }
      for (let i = wdim[1] / 2 - (Math.ceil(wdim[1] / 2 / scale) - 0.5) * scale; i &lt;= wdim[1]; i += scale) {
          ctx.beginPath();
          ctx.moveTo(0, i);
          ctx.lineTo(wdim[0], i);
          ctx.stroke();
      }
      ctx.fillRect(wdim[0] / 2 - 3, wdim[1] / 2 - 3, 7, 7);
  };
  
  runRound(turns);
}

function runGame(rounds = 1, turns = 100000, log = 0) {
  game.records = new Array(botData.length).fill(0);
  game.log = log;
  
  for (let i = 0; i &lt; rounds; i++)
      runRound(turns, 0);
  
  console.log(""Game Conclusion:\n"" + botData.map((a, b) =&gt; [a.name, game.records[b]]).sort((a, b) =&gt; b[1] - a[1]).map(a =&gt; ""["" + a[1] + ""] "" + a[0]).join(""\n""));
}

};

drawRound(/*turns =*/ 1000000, /*log =*/ 2, /*fps =*/ 600,/* zoom =*/ 50);</code></pre>
</div>
</div>
</p>
","80214","","","","","2021-01-28 15:58:09","","","","2","","","","CC BY-SA 4.0"
"218158","2","","217972","2021-01-28 16:14:27","","3","","<h1>Rabbit, 56 bytes(-28 points)</h1>
<pre><code>{
    name: &quot;Rabbit&quot;,
    color: &quot;#FFC0CB&quot;,
    run:_=&gt;turn()%1e3?dirTo(chars()[0].pos):build(self().source)
}
</code></pre>
<p>Why rabbit? Because it runs away, forages for food, and then immediately reproduces.</p>
<p>Fixed with some help from Redwolf, and now works after a fix to the controller.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var botData = [
  {
name: ""Honnold"",
color: ""#0000FF"",
run:()=&gt;dirTo(chars().sort((a,b)=&gt;distTo(a.pos)-distTo(b.pos))[0].pos)
  },

  {
    name: ""The Caveman"",
    color: ""#FF0000"",
    run:_=&gt;{w=bots().sort((a,b)=&gt;a.score-b.score)[0];return self().score&lt;=w.score?dirTo(chars().sort((a,b)=&gt;distTo(a.pos)-distTo(b.pos))[0].pos):dirTo(w.pos)}
  },
    {
    name: ""Centrist"",
    color: ""#666666"",
    run:_=&gt;dirTo(center())
  },
  {
    name: ""True Neutral"",
    color: ""#400000"",
    run: _=&gt;dirTo(chars().sort((a,b)=&gt;dist(a.pos,[0,0])-dist(b.pos,[0,0])+distTo(a.pos)-distTo(b.pos))[0].pos)
},{
    name: ""Rabbit"",
    color: ""#FFC0CB"",
    run:_=&gt;turn()%1e3?dirTo(chars()[0].pos):build(self().source)
}
 
];

var game = {
    randPos: (center, any = !1, uid = 0, owner = 0, p = 0.1) =&gt; {
        var theta, radius, pos;
        
        do {
            theta = Math.random() * Math.PI * 2;
            radius = 0;
            
            while (Math.random() &gt; p)
                radius++;
            
            pos = [Math.trunc(center[0] + Math.cos(theta) * radius), Math.trunc(center[1] + Math.sin(theta) * radius)];
        } while (!any &amp;&amp; game.bots.find(a =&gt; a &amp;&amp; a.uid != uid &amp;&amp; Math.abs(a.pos[0] - pos[0]) + Math.abs(a.pos[1] - pos[1]) &lt; (a.uid == owner ? 3 : 4)));
        
        return pos;
    },
    debug: function(){},
    log: 0 // 0 = NONE, 1 = SUMMARY, 2 = ALL
};

var north = () =&gt; [""north""];
var east = () =&gt; [""east""];
var south = () =&gt; [""south""];
var west = () =&gt; [""west""];

var build = code =&gt; [""worker"", code];

var drop = {
    north: char =&gt; [""drop.north"", char],
    east: char =&gt; [""drop.east"", char],
    south: char =&gt; [""drop.south"", char],
    west: char =&gt; [""drop.west"", char]
};

var bots = () =&gt; game.bots.map(a =&gt; ({
    uid: a.uid,
    owner: a.owner,
    original: a.original,
    score: a.score,
    pos: [...a.pos],
    chars: game.uid == a.uid ? [...a.chars] : undefined,
    source: game.uid == a.uid ? a.source : undefined
})).sort((a, b) =&gt; a.uid - b.uid);

var chars = () =&gt; game.chars.map(a =&gt; ({
    char: a.char,
    pos: [...a.pos]
}));

var self = () =&gt; {
    var bot = game.bots.find(a =&gt; a.uid == game.uid);
    
    return bot ? {
        uid: bot.uid,
        owner: bot.owner,
        original: bot.original,
        score: bot.score,
        pos: [...bot.pos],
        chars: [...bot.chars],
        source: bot.source
    } : null;
};

var owner = () =&gt; {
    var bot = game.bots.find(a =&gt; a.uid == game.bots.find(b =&gt; b.uid == game.uid).owner);
    
    return bot ? {
        uid: bot.uid,
        owner: bot.owner,
        original: bot.original,
        score: bot.score,
        pos: [...bot.pos],
        chars: [...bot.chars],
        source: bot.source
    } : null;
};

var center = () =&gt; game.center;
var turn = () =&gt; game.turns;

var at = pos =&gt; ({
    bot: (game.bots.find(b =&gt; b.pos[0] == pos[0] &amp;&amp; b.pos[1] == pos[1]) || {uid: null}).uid,
    chars: chars().filter(c =&gt; c.pos[0] == pos[0] &amp;&amp; c.pos[1] == pos[1])
});

var dir = (posFrom, pos) =&gt; {
    if (Math.abs(posFrom[0] - pos[0]) &lt;= Math.abs(posFrom[1] - pos[1]))
        return posFrom[1] &lt; pos[1] ? [""north""] : [""south""];
    else
        return posFrom[0] &lt; pos[0] ? [""west""] : [""east""];
};

var dirTo = pos =&gt; {
    var bot = game.bots.find(a =&gt; a.uid == game.uid);
    if (Math.abs(pos[0] - bot.pos[0]) &lt;= Math.abs(pos[1] - bot.pos[1]))
        return pos[1] &lt; bot.pos[1] ? [""north""] : [""south""];
    else
        return pos[0] &lt; bot.pos[0] ? [""west""] : [""east""];
};

var dist = (posFrom, pos) =&gt; {
    return Math.abs(posFrom[0] - pos[0]) + Math.abs(posFrom[1] - pos[1]);
};

var distTo = pos =&gt; {
    var bot = game.bots.find(a =&gt; a.uid == game.uid);
    return Math.abs(pos[0] - bot.pos[0]) + Math.abs(pos[1] - bot.pos[1]);
};

async function runRound(turns = 100000) {
    var uids = [];
    
    game.perf = performance.now();
    
    for (let i = 1; i &lt;= botData.length; i++)
        uids[i - 1] = i;
    
    for (let j, i = uids.length - 1; i &gt; 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        [uids[i], uids[j]] = [uids[j], uids[i]];
    }
    
    game.bots = [];
    game.chars = [];
    game.records = game.records || [];
    game.uids = [];
    
    for (let i = 0; i &lt; botData.length; i++) {
        game.bots[i] = {
            uid: uids[i],
            owner: uids[i],
            original: uids[i],
            score: Math.floor(botData[i].run.toString().length * -1 / 2),
            chars: [],
            pos: game.randPos([0, 0]),
            source: botData[i].run.toString(),
            run: botData[i].run,
            storage: {},
            name: botData[i].name || ""Bot"",
            color: botData[i].color || ""#000000""
        };
        
        game.uids[uids[i]] = i;
        game.records[i] = game.records[i] || 0;
    }
    
    game.center = [
        game.bots.reduce((a, b) =&gt; a + b.pos[0] * (b.score + 1), 0) / game.bots.reduce((a, b) =&gt; a + (b.score + 1), 0),
        game.bots.reduce((a, b) =&gt; a + b.pos[1] * (b.score + 1), 0) / game.bots.reduce((a, b) =&gt; a + (b.score + 1), 0)
    ];
    
    game.charPool = game.bots.map(a =&gt; a.source).join("""");
    
    for (let i = 0; i &lt; botData.length * 4; i++)
        game.chars.push({
            char: game.charPool[Math.random() * game.charPool.length | 0],
            pos: game.randPos([0, 0]),
            game: !0
        });
    
    game.cuid = botData.length + 1;
    game.turns = 0;
    
    if (!game.fps) {
        while (game.chars.length &amp;&amp; game.bots.length &amp;&amp; game.turns &lt; turns) {
            runTurn();
            
            game.turns++;
        }
    } else {
        game.debug();
        
        while (game.chars.length &amp;&amp; game.bots.length &amp;&amp; game.turns &lt; turns) {
            await new Promise(function(resolve) {
                setTimeout(resolve, 1000 / game.fps);
            });
            
            if (!game.pause) {
                runTurn();
                
                game.debug();
                game.turns++;
            }
        }
    }
    
    game.bots.map(b =&gt; game.records[game.uids[b.original]] += b.score);
    
    if (game.log)
        console.log(""Round Completed ("" + ((performance.now() - game.perf) / 1000).toFixed(3) + ""s):\n"" + game.bots.map(a =&gt; a).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join(""\n""));
}

function runTurn() {
    var cbots = [];
    var npos = [];
    var nposl = [];
    var nbots = [];
    
    for (let b, p, m, i = 0; i &lt; game.bots.length; i++) {
        b = game.bots[i];
        
        game.uid = b.uid;
        
        try {
            m = b.run(b.storage);
        } catch(e) {
            m = [""dead""];
            
            if (game.log == 2)
                console.warn(""["" + game.turns + ""] Error: "" + b.name + ""\n"" + (e.stack || e.message));
            
            for (let j = 0; j &lt; b.chars.length; j++)
                game.chars.push({
                    char: b.chars[j],
                    pos: game.randPos(b.pos, !0, 0, 0, 0.2),
                    game: !1
                });
        }
        
        if (!Array.isArray(m))
            m = [];
        
        if (m[0] == ""north"")
            p = [b.pos[0], b.pos[1] - 1];
        else if (m[0] == ""east"")
            p = [b.pos[0] + 1, b.pos[1]];
        else if (m[0] == ""south"")
            p = [b.pos[0], b.pos[1] + 1];
        else if (m[0] == ""west"")
            p = [b.pos[0] - 1, b.pos[1]];
        else
            p = [...b.pos];
        
        if (m[0] != ""dead"")
            npos.push({
                bot: b.uid,
                pos: p
            });
        
        if (m[0] == ""worker"" &amp;&amp; m[1].split("""").reduce((c, d, e) =&gt; c &amp;&amp; d &amp;&amp; (e = c.indexOf(d)) != -1 ? c.filter((f, g) =&gt; g != e) : null, [...b.chars])) {
            p = game.randPos(b.pos, !1, 0, b.uid);
            
            try {
                cbots.push({
                    uid: game.cuid,
                    owner: b.uid,
                    original: b.original,
                    score: 0,
                    chars: [],
                    pos: p,
                    source: m[1],
                    run: eval(m[1]),
                    storage: {},
                    name: b.name + ""*"",
                    color: b.color
                });
                
                npos.push({
                    bot: game.cuid++,
                    pos: p
                });
                
                b.score -= Math.floor(m[1].length / 2);
                
                for (let n, j = 0; j &lt; m[1].length; j++) {
                    n = b.chars.indexOf(m[1][j]);
                    
                    b.chars = b.chars.slice(0, n).concat(b.chars.slice(n + 1));
                }
                
                if (game.log == 2)
                    console.log(""["" + game.turns + ""] New Worker: "" + b.name);
            } catch(e) {
                if (game.log == 2)
                    console.warn(""["" + game.turns + ""] Invalid Worker: "" + b.name + ""\n"" + (e.stack || e.message));
            }
        }
        
        if (typeof m[0] == ""string"" &amp;&amp; m[0].match(/^drop.(north|east|south|west)$/) &amp;&amp; b.chars.includes(m[1])) {
            b.score--;
            
            for (let j = 0; j &lt; b.chars.length; j++) {
                if (b.chars[j] == m[1]) {
                    b.chars = b.chars.slice(0, j) + b.chars.slice(j + 1);
                    
                    break;
                }
            }
            
            if (m[0] == ""drop.north"")
                p = [b.pos[0], b.pos[1] - 1];
            else if (m[0] == ""drop.east"")
                p = [b.pos[0] + 1, b.pos[1]];
            else if (m[0] == ""drop.south"")
                p = [b.pos[0], b.pos[1] + 1];
            else if (m[0] == ""drop.west"")
                p = [b.pos[0] - 1, b.pos[1]];
            
            game.chars.push({
                char: m[1],
                pos: p,
                game: !1
            });
        }
    }
    
    game.bots.push(...cbots);
    
    for (let f, i = 0; i &lt; npos.length; i++) {
        if (!(f = nposl.find(a =&gt; a.pos[0] == npos[i].pos[0] &amp;&amp; a.pos[1] == npos[i].pos[1])))
            nposl.push(f = {
                pos: [...npos[i].pos],
                bots: []
            });
        
        f.bots.push(npos[i].bot);
    }
    
    for (let n, m, b, i = 0; i &lt; nposl.length; i++) {
        n = nposl[i];
        
        if (n.bots.length &gt; 1) {
            m = Math.max(...n.bots.map(a =&gt; game.bots.find(b =&gt; b.uid == a).score));
            
            if (game.bots.filter(a =&gt; n.bots.includes(a.uid) &amp;&amp; a.score == m).length &gt; 1) {
                m += 1;
                
                if (game.log == 2)
                    console.log(""["" + game.turns + ""] Collision: "" + n.bots.map(a =&gt; game.bots.find(b =&gt; a == b.uid)).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join("", ""));
            } else {
                if (game.log == 2)
                    console.log(""["" + game.turns + ""] Collision: "" + n.bots.map(a =&gt; game.bots.find(b =&gt; a == b.uid)).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join("", ""));
            }
            
            for (let j = 0; j &lt; n.bots.length; j++) {
                b = game.bots.find(a =&gt; a.uid == n.bots[j]);
                
                if (b.score &lt; m) {
                    for (let k = 0; k &lt; b.chars.length; k++)
                        game.chars.push({
                            char: b.chars[k],
                            pos: game.randPos(b.pos, !0, 0, 0, 0.2),
                            game: !1
                        });
                    
                    game.records[game.uids[b.original]] += b.score;
                } else {
                    nbots.push({
                        uid: b.uid,
                        owner: b.owner,
                        original: b.original,
                        score: b.score,
                        chars: [...b.chars],
                        pos: n.pos,
                        source: b.source,
                        run: b.run,
                        storage: b.storage,
                        name: b.name,
                        color: b.color
                    });
                }
            }
        } else {
            b = game.bots.find(a =&gt; a.uid == n.bots[0]);
            
            nbots.push({
                uid: b.uid,
                owner: b.owner,
                original: b.original,
                score: b.score,
                chars: [...b.chars],
                pos: n.pos,
                source: b.source,
                run: b.run,
                storage: b.storage,
                name: b.name,
                color: b.color
            });
        }
    }
    
    game.center = [
        nbots.reduce((a, b) =&gt; a + b.pos[0] * (b.score + 1), 0) / nbots.reduce((a, b) =&gt; a + (b.score + 1), 0),
        nbots.reduce((a, b) =&gt; a + b.pos[1] * (b.score + 1), 0) / nbots.reduce((a, b) =&gt; a + (b.score + 1), 0)
    ];
    
    game.charPool = nbots.map(a =&gt; a.source).join("""");
    
    for (let b, c, i = 0; i &lt; game.chars.length; i++) {
        c = game.chars[i];
        
        if (b = nbots.find(a =&gt; a.pos[0] == c.pos[0] &amp;&amp; a.pos[1] == c.pos[1])) {
            b.score++;
            
            b.chars.push(c.char);
            
            if (c.game &amp;&amp; game.chars.filter(a =&gt; a &amp;&amp; a.game).length &lt; nbots.length * 4 &amp;&amp; game.bots.map(a =&gt; a.original).reduce((a, b) =&gt; a.includes(b) ? a : a.concat(b), []).length &gt; 1)
                game.chars.push({
                    char: game.charPool[Math.random() * game.charPool.length | 0],
                    pos: game.randPos([0, 0]),
                    game: !0
                });
            
            game.chars[i] = null;
        }
    }
    
    game.chars = game.chars.filter(a =&gt; a);
    game.bots = nbots;
};

function drawRound(turns = 100000, log = 2, fps = 5, zoom = 50) {
    var c, ctx, wdim, scale;
    
    document.body.innerHTML = ""&lt;canvas&gt;&lt;/canvas&gt;"";
    
    c = document.body.firstChild;
    c.style.position = ""absolute"";
    c.style.top = ""0"";
    c.style.left = ""0"";
    c.style.zIndex = ""2"";
    ctx = c.getContext(""2d"");
    
    game.records = new Array(botData.length).fill(0);
    game.log = log;
    game.pause = !1;
    game.fps = fps;
    
    (window.onresize = function() {
        wdim = [window.innerWidth || 600, window.innerHeight || 400];
        scale = Math.ceil(wdim[1] / zoom);
        c.width = wdim[0];
        c.height = wdim[1];
    })();
    
    window.onkeydown = function() {
        var key = event.code;
        if (key == ""Escape"")
            game.pause = !game.pause;
        if (key == ""ArrowLeft"" &amp;&amp; game.fps &gt; 1)
            game.fps -= 1;
        if (key == ""ArrowRight"")
            game.fps += 1;
    };
    
    game.debug = function() {
        ctx.clearRect(0, 0, wdim[0], wdim[1]);
        ctx.textBaseline = ""middle"";
        ctx.textAlign = ""center"";
        ctx.font = Math.floor(scale * 0.6) + ""px monospace"";
        for (let x = -Math.ceil(wdim[0] / 2 / scale), i = wdim[0] / 2 - (Math.ceil(wdim[0] / 2 / scale) - 0.5) * scale; i &lt;= wdim[0]; i += scale, x++) {
            for (let b, c, y = -Math.ceil(wdim[1] / 2 / scale), j = wdim[1] / 2 - (Math.ceil(wdim[1] / 2 / scale) - 0.5) * scale; j &lt;= wdim[1]; j += scale, y++) {
                if ((c = game.chars.filter(a =&gt; a.pos[0] == Math.floor(x) &amp;&amp; a.pos[1] == Math.floor(y))).length) {
                    for (let k = 0; k &lt; c.length; k++)
                        ctx.fillText(JSON.stringify(c[k].char).slice(1, -1).replace(/\\""/, ""\"""").replace(/\\\\/, ""\\"").replace(/ /, ""_""), i + scale / 2, j + scale / 2);
                }
                if (b = game.bots.find(a =&gt; a.pos[0] == Math.floor(x) &amp;&amp; a.pos[1] == Math.floor(y))) {
                    ctx.fillStyle = b.color;
                    ctx.fillRect(i, j, scale, scale);
                    ctx.fillStyle = ""#000000"";
                }
            }
            ctx.beginPath();
            ctx.moveTo(i, 0);
            ctx.lineTo(i, wdim[1]);
            ctx.stroke();
        }
        for (let i = wdim[1] / 2 - (Math.ceil(wdim[1] / 2 / scale) - 0.5) * scale; i &lt;= wdim[1]; i += scale) {
            ctx.beginPath();
            ctx.moveTo(0, i);
            ctx.lineTo(wdim[0], i);
            ctx.stroke();
        }
        ctx.fillRect(wdim[0] / 2 - 3, wdim[1] / 2 - 3, 7, 7);
    };
    
    runRound(turns);
}

function runGame(rounds = 1, turns = 100000, log = 0) {
    game.records = new Array(botData.length).fill(0);
    game.log = log;
    
    for (let i = 0; i &lt; rounds; i++)
        runRound(turns, 0);
    
    console.log(""Game Conclusion:\n"" + botData.map((a, b) =&gt; [a.name, game.records[b]]).sort((a, b) =&gt; b[1] - a[1]).map(a =&gt; ""["" + a[1] + ""] "" + a[0]).join(""\n""));
}



drawRound(/*turns =*/ 1000000, /*log =*/ 2, /*fps =*/ 600,/* zoom =*/ 50);</code></pre>
</div>
</div>
</p>
","80214","","80214","","2021-01-28 17:17:00","2021-01-28 17:17:00","","","","2","","","","CC BY-SA 4.0"
"218204","2","","60733","2021-01-29 05:50:36","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 6 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>á!╜¡tº
</code></pre>
<p><a href=""https://staxlang.xyz/#p=a021bdad74a7&amp;i=%22void+p%28int+n%29%7BSystem.out.print%28n%2B5%29%3B%7D%22%0A%22%28%7ER%E2%88%8AR%E2%88%98.%C3%97R%29%2FR%E2%86%901%E2%86%93%CE%B9R%22%0A%22%5Cnfriends+%3D+%5B%27john%27,+%27pat%27,+%27gary%27,+%27michael%27%5D%5Cnfor+i,+name+in+enumerate%28friends%29%3A%5Cn++++print+%5C%22iteration+%7Biteration%7D+is+%7Bname%7D%5C%22.format%28iteration%3Di,+name%3Dname%29%5Cn%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>%Px|k%P
%       get length
 P      pop and print with newline
  x     push input again
   |k   get byte array
     %  get length
      P pop and print with newline
</code></pre>
","80214","","","","","2021-01-29 05:50:36","","","","0","","","","CC BY-SA 4.0"
"218205","2","","28249","2021-01-29 06:20:30","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 32 bytes</h1>
<pre><code>↑_5Ṡz+(mo`+&quot;: &quot;sŀ)mṁs↑htU¡oṁdẊ+d
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbxHjThzsXVGlr5OYnaCtZKSgVH23QzH24s7EYKJdREnpoYT6Qk/JwV5d2yv///41NTQz/mxoAAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Output format was cumbersome, but I had to answer this in Husk.</p>
<h2>Explanation</h2>
<pre><code>↑_5Ṡz+(mo`+&quot;: &quot;sŀ)mṁs↑htU¡oṁdẊ+d
                               d convert first input to digits
                         ¡       and iterate:
                             Ẋ+  sum overlapping pairs
                           ṁd    convert to digits and flatten
                        U        truncate till fixed point
                      ht         remove first and last element
                     ↑           take second input number of values from that
                  mṁs            convert all the arrays to strings
   Ṡz+(          )               zip and concat that with:
                ŀ                range 1..length(seq)
       mo`+&quot;: &quot;s                 convert each to string, append a colon
↑_5                              take the last 5 elements
</code></pre>
","80214","","","","","2021-01-29 06:20:30","","","","0","","","","CC BY-SA 4.0"
"218226","2","","60733","2021-01-29 13:50:33","","2","","<h1><a href=""http://www.scala-lang.org/"" rel=""nofollow noreferrer"">Scala</a>, <sup><s>30</s></sup> 26 bytes</h1>

<pre class=""lang-scala prettyprint-override""><code>s=&gt;s.size-&gt;s.getBytes.size
</code></pre>
<p><a href=""https://tio.run/##K05OzEn8n5@UlZpcouCbmJmnkFpRkpqXUqzgWFCgUM1VlpijkGalEFxSlJmXrmBrp6DhmVeiA8SaCrb/i23tivWKM6tSdYF0emqJU2VJKkTgfwFQfUlOnkaahpKhguGj3i0mSpqaXLX/AQ"" rel=""nofollow noreferrer"" title=""Scala – Try It Online"">Try it online!</a></p>
<p>My first Scala answer! Thanks to user for making it work.</p>
<p>-4 bytes from user.</p>
","80214","","80214","","2021-01-29 13:58:09","2021-01-29 13:58:09","","","","1","","","","CC BY-SA 4.0"
"218228","2","","138510","2021-01-29 14:34:36","","2","","<h1><a href=""http://www.scala-lang.org/"" rel=""nofollow noreferrer"">Scala</a>, <sup><S>58</s></sup> 46 bytes</h1>

<pre class=""lang-scala prettyprint-override""><code>x=&gt;2 to x.size map(x take _ sortBy(-_)apply 1)
</code></pre>
<p><a href=""https://tio.run/##bcyxCsIwAATQvV9xYwJRbKugQgt1E/QLREqsKURjGpogqeK3x2TW4W65x9mOKx6Gy010DkcuNYR3Ql8tGmPwzp5cod/iIK077bU7o6rR6AlV8FVdwA3wcytfAg9uiIfjd4EWdhjdbiKzlnJj1IScBjNK7ZQmPUlfJGcrVrAy9iZmTSnNfkQeRTIlW/7Zi7gv2CxVhAl8whc"" rel=""nofollow noreferrer"" title=""Scala – Try It Online"">Try it online!</a></p>
<p>Takes a List as an argument, and returns a Vector.</p>
<p>-12 bytes from user.</p>
","80214","","80214","","2021-01-30 03:28:56","2021-01-30 03:28:56","","","","1","","","","CC BY-SA 4.0"
"218231","2","","148337","2021-01-29 16:14:45","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 27 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>é!?q╚&lt;╙≈╣íå▒{¼Φ8ôƒ¡m↨;-◘-u♥
</code></pre>
<p><a href=""https://staxlang.xyz/#p=82213f71c83cd3f7b9a186b17bace838939fad6d173b2d082d7503&amp;i=This+input+has%0A%23%23+trailing+hash+marks+%23%23%0A%23and+a+hash+mark+without+a+space+after+it.%0A"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>This was fun.</p>
","80214","","","","","2021-01-29 16:14:45","","","","0","","","","CC BY-SA 4.0"
"218250","2","","217972","2021-01-30 06:41:54","","3","","<h1>Camper</h1>
<pre><code>{
name: &quot;Camper&quot;,
color: &quot;#00FF00&quot;,
run:_=&gt;dirTo(chars().sort((a,b)=&gt;dist(&quot;00&quot;,a.pos)-dist(&quot;00&quot;,b.pos))[0].pos)
}
</code></pre>
<p>Camps the center, and collects the characters closest to it, since the center has a higher density of those.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var botData = [
{
    name: ""ExampleBot"",
    color: ""#aaaaaa"",
    run: () =&gt; dirTo(chars().sort((a, b) =&gt; dist(center(), a.pos) - dist(center(), b.pos))[0].pos)
},
{
    name: ""Honnold"",
    color: ""#0000FF"",
    run:()=&gt;dirTo(chars().sort((a,b)=&gt;distTo(a.pos)-distTo(b.pos))[0].pos)
},
{
    name: ""The Caveman"",
    color: ""#FF0000"",
    run:()=&gt;{w=bots().sort((a,b)=&gt;a.score-b.score)[0];return self().score&lt;=w.score?dirTo(chars().sort((a,b)=&gt;distTo(a.pos)-distTo(b.pos))[0].pos):dirTo(w.pos)}
},
{
    name: ""True Neutral"",
    color: ""#400000"",
    run: _=&gt;dirTo(chars().sort((a,b)=&gt;dist(a.pos,[0,0])-dist(b.pos,[0,0])+distTo(a.pos)-distTo(b.pos))[0].pos)
},
{
    name: ""Centrist"",
    color: ""#666666"",
    run:_=&gt;dirTo(center())
},
{
name: ""Rabbit"",
    color: ""#FFC0CB"",
    run:_=&gt;turn()%1e3?dirTo(chars()[0].pos):build(self().source)
},{
    name: ""Shy Guy"",
    color: ""#dd0044"",
    run: _=&gt;{var Z=""pos"",E=self(),P=E[Z],D=distTo,T=bots().filter(b=&gt;D(b[Z])==2&amp;&amp;b.score&gt;E.score),H=(d,n)=&gt;!T.find(t=&gt;t[Z][d]*n&lt;P[d]*n),N=[north,east,south,west],x=P[0],y=P[1],l={[N[0]]:-y,[N[1]]:x,[N[2]]:y,[N[3]]:-x},S=[H(1,1),H(0,-1),H(1,-1),H(0,1)],U=bots().find(b=&gt;D(b[Z])==1&amp;&amp;b.score&gt;E.score),r=chars().filter(c=&gt;!bots().find(b=&gt;b.uid!=E.uid&amp;&amp;dist(b[Z],c[Z])-D(c[Z])&lt;1));return r.length?(dirTo(r.sort((a,b)=&gt;D(a[Z])-D(b[Z]))[0][Z])):T.length?U?(N.filter((n,i)=&gt;S[i]).sort((a,b)=&gt;l[a]-l[b])[0]||(_=&gt;_))():0:(turn()%20||U?dirTo(""00""):build(E.source))}
},
{
name: ""The Luggage"",
color: ""#8B4513"",
run:()=&gt;dirTo(bots()[0].pos)
},
{
name: ""Camper"",
color: ""#00FF00"",
run:_=&gt;dirTo(chars().sort((a,b)=&gt;dist(""00"",a.pos)-dist(""00"",b.pos))[0].pos)
}
];

// _=&gt;{var r,d,e,l,I,N,P,D=distTo,s=self(),p=s[P=""pos""],w=""_=&gt;dirTo(chars().sort((a,b)=&gt;distTo(a.pos)-distTo(b.pos))[0].pos)"",n=w.split``;s.chars.map(c=&gt;n[n[N=""indexOf""](c)]="""");if(!n.find(_=&gt;_))return build(w);r=chars().filter(c=&gt;!bots().find(b=&gt;b.uid!=s.uid&amp;&amp;dist(b[P],c[P])-D(c[P])&lt;1));if(r.length)return dirTo(r.sort((a,b)=&gt;D(a[P])-D(b[P])+(n[I=""includes""](b)-n[I](a))*10)[0][P]);l={n:-p[1],e:p[0],s:p[1],w:-p[0]};d=""nesw"".split``.sort((a,b)=&gt;l[a]-l[b]);e=bots().filter(b=&gt;b.uid!=s.uid&amp;&amp;b.score&gt;=s.score&amp;&amp;D(b[P])&lt;5).map(b=&gt;d[d[N](dirTo(b[P])[0][0])]="""");return[north,east,south,west][""nesw""[N](d.find(x=&gt;x))]()}

var game = {
randPos: (center, any = !1, uid = 0, owner = 0, p = 0.1) =&gt; {
    var theta, radius, pos;
    
    do {
        theta = Math.random() * Math.PI * 2;
        radius = 0;
        
        while (Math.random() &gt; p)
            radius++;
        
        pos = [Math.trunc(center[0] + Math.cos(theta) * radius), Math.trunc(center[1] + Math.sin(theta) * radius)];
    } while (!any &amp;&amp; game.bots.find(a =&gt; a &amp;&amp; a.uid != uid &amp;&amp; Math.abs(a.pos[0] - pos[0]) + Math.abs(a.pos[1] - pos[1]) &lt; (a.uid == owner ? 3 : 4)));
    
    return pos;
},
debug: function(){},
log: 0 // 0 = NONE, 1 = SUMMARY, 2 = ALL
};

var north = () =&gt; [""north""];
var east = () =&gt; [""east""];
var south = () =&gt; [""south""];
var west = () =&gt; [""west""];

var build = code =&gt; [""worker"", code];

var drop = {
north: char =&gt; [""drop.north"", char],
east: char =&gt; [""drop.east"", char],
south: char =&gt; [""drop.south"", char],
west: char =&gt; [""drop.west"", char]
};

var bots = () =&gt; game.bots.map(a =&gt; ({
uid: a.uid,
owner: a.owner,
original: a.original,
score: a.score,
pos: [...a.pos],
chars: game.uid == a.uid ? [...a.chars] : undefined,
source: game.uid == a.uid ? a.source : undefined
})).sort((a, b) =&gt; a.uid - b.uid);

var chars = () =&gt; game.chars.map(a =&gt; ({
char: a.char,
pos: [...a.pos]
}));

var self = () =&gt; {
var bot = game.bots.find(a =&gt; a.uid == game.uid);

return bot ? {
    uid: bot.uid,
    owner: bot.owner,
    original: bot.original,
    score: bot.score,
    pos: [...bot.pos],
    chars: [...bot.chars],
    source: bot.source
} : null;
};

var owner = () =&gt; {
var bot = game.bots.find(a =&gt; a.uid == game.bots.find(b =&gt; b.uid == game.uid).owner);

return bot ? {
    uid: bot.uid,
    owner: bot.owner,
    original: bot.original,
    score: bot.score,
    pos: [...bot.pos],
    chars: [...bot.chars],
    source: bot.source
} : null;
};

var center = () =&gt; game.center;
var turn = () =&gt; game.turns;

var at = pos =&gt; ({
bot: (game.bots.find(b =&gt; b.pos[0] == pos[0] &amp;&amp; b.pos[1] == pos[1]) || {uid: null}).uid,
chars: chars().filter(c =&gt; c.pos[0] == pos[0] &amp;&amp; c.pos[1] == pos[1])
});

var dir = (posFrom, pos) =&gt; {
if (Math.abs(posFrom[0] - pos[0]) &lt;= Math.abs(posFrom[1] - pos[1]))
    return posFrom[1] &lt; pos[1] ? [""north""] : [""south""];
else
    return posFrom[0] &lt; pos[0] ? [""west""] : [""east""];
};

var dirTo = pos =&gt; {
var bot = game.bots.find(a =&gt; a.uid == game.uid);
if (Math.abs(pos[0] - bot.pos[0]) &lt;= Math.abs(pos[1] - bot.pos[1]))
    return pos[1] &lt; bot.pos[1] ? [""north""] : [""south""];
else
    return pos[0] &lt; bot.pos[0] ? [""west""] : [""east""];
};

var dist = (posFrom, pos) =&gt; {
return Math.abs(posFrom[0] - pos[0]) + Math.abs(posFrom[1] - pos[1]);
};

var distTo = pos =&gt; {
var bot = game.bots.find(a =&gt; a.uid == game.uid);
return Math.abs(pos[0] - bot.pos[0]) + Math.abs(pos[1] - bot.pos[1]);
};

async function runRound(turns = 100000) {
var uids = [];

game.perf = performance.now();

for (let i = 1; i &lt;= botData.length; i++)
    uids[i - 1] = i;

for (let j, i = uids.length - 1; i &gt; 0; i--) {
    j = Math.floor(Math.random() * (i + 1));
    [uids[i], uids[j]] = [uids[j], uids[i]];
}

game.bots = [];
game.chars = [];
game.records = game.records || [];
game.uids = [];

for (let i = 0; i &lt; botData.length; i++) {
    game.bots[i] = {
        uid: uids[i],
        owner: uids[i],
        original: uids[i],
        score: Math.floor(botData[i].run.toString().length * -1 / 2),
        chars: [],
        pos: game.randPos([0, 0]),
        source: botData[i].run.toString(),
        run: botData[i].run,
        storage: {},
        name: botData[i].name || ""Bot"",
        color: botData[i].color || ""#000000""
    };
    
    game.uids[uids[i]] = i;
    game.records[i] = game.records[i] || 0;
}

game.center = [
    game.bots.reduce((a, b) =&gt; a + b.pos[0] * (b.score + 1), 0) / game.bots.reduce((a, b) =&gt; a + (b.score + 1), 0),
    game.bots.reduce((a, b) =&gt; a + b.pos[1] * (b.score + 1), 0) / game.bots.reduce((a, b) =&gt; a + (b.score + 1), 0)
];

game.charPool = game.bots.map(a =&gt; a.source).join("""");

for (let i = 0; i &lt; botData.length * 4; i++)
    game.chars.push({
        char: game.charPool[Math.random() * game.charPool.length | 0],
        pos: game.randPos([0, 0]),
        game: !0
    });

game.cuid = botData.length + 1;
game.turns = 0;

if (!game.fps) {
    while (game.chars.length &amp;&amp; game.bots.length &amp;&amp; game.turns &lt; turns) {
        runTurn();
        
        game.turns++;
    }
} else {
    game.debug();
    
    while (game.chars.length &amp;&amp; game.bots.length &amp;&amp; game.turns &lt; turns) {
        await new Promise(function(resolve) {
            setTimeout(resolve, 1000 / game.fps);
        });
        
        if (!game.pause) {
            runTurn();
            
            game.debug();
            game.turns++;
        }
    }
}

game.bots.map(b =&gt; game.records[game.uids[b.original]] += b.score);

if (game.log)
    console.log(""Round Completed ("" + ((performance.now() - game.perf) / 1000).toFixed(3) + ""s):\n"" + game.bots.map(a =&gt; a).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join(""\n""));
}

function runTurn() {
var cbots = [];
var npos = [];
var nposl = [];
var nbots = [];

for (let b, p, m, i = 0; i &lt; game.bots.length; i++) {
    b = game.bots[i];
    
    game.uid = b.uid;
    
    try {
        m = b.run(b.storage);
    } catch(e) {
        m = [""dead""];
        
        if (game.log == 2)
            console.warn(""["" + game.turns + ""] Error: "" + b.name + ""\n"" + (e.stack || e.message));
        
        for (let j = 0; j &lt; b.chars.length; j++)
            game.chars.push({
                char: b.chars[j],
                pos: game.randPos(b.pos, !0, 0, 0, 0.2),
                game: !1
            });
    }
    
    if (!Array.isArray(m))
        m = [];
    
    if (m[0] == ""north"")
        p = [b.pos[0], b.pos[1] - 1];
    else if (m[0] == ""east"")
        p = [b.pos[0] + 1, b.pos[1]];
    else if (m[0] == ""south"")
        p = [b.pos[0], b.pos[1] + 1];
    else if (m[0] == ""west"")
        p = [b.pos[0] - 1, b.pos[1]];
    else
        p = [...b.pos];
    
    if (m[0] != ""dead"")
        npos.push({
            bot: b.uid,
            pos: p
        });
    
    if (m[0] == ""worker"" &amp;&amp; m[1].split("""").reduce((c, d, e) =&gt; c &amp;&amp; d &amp;&amp; (e = c.indexOf(d)) != -1 ? c.filter((f, g) =&gt; g != e) : null, [...b.chars])) {
        p = game.randPos(b.pos, !1, 0, b.uid);
        
        try {
            cbots.push({
                uid: game.cuid,
                owner: b.uid,
                original: b.original,
                score: 0,
                chars: [],
                pos: p,
                source: m[1],
                run: eval(m[1]),
                storage: {},
                name: b.name + ""*"",
                color: b.color
            });
            
            npos.push({
                bot: game.cuid++,
                pos: p
            });
            
            b.score -= Math.floor(m[1].length / 2);
            
            for (let n, j = 0; j &lt; m[1].length; j++) {
                n = b.chars.indexOf(m[1][j]);
                
                b.chars = b.chars.slice(0, n).concat(b.chars.slice(n + 1));
            }
            
            if (game.log == 2)
                console.log(""["" + game.turns + ""] New Worker: "" + b.name);
        } catch(e) {
            if (game.log == 2)
                console.warn(""["" + game.turns + ""] Invalid Worker: "" + b.name + ""\n"" + (e.stack || e.message));
        }
    }
    
    if (typeof m[0] == ""string"" &amp;&amp; m[0].match(/^drop.(north|east|south|west)$/) &amp;&amp; b.chars.includes(m[1])) {
        b.score--;
        
        for (let j = 0; j &lt; b.chars.length; j++) {
            if (b.chars[j] == m[1]) {
                b.chars = b.chars.slice(0, j) + b.chars.slice(j + 1);
                
                break;
            }
        }
        
        if (m[0] == ""drop.north"")
            p = [b.pos[0], b.pos[1] - 1];
        else if (m[0] == ""drop.east"")
            p = [b.pos[0] + 1, b.pos[1]];
        else if (m[0] == ""drop.south"")
            p = [b.pos[0], b.pos[1] + 1];
        else if (m[0] == ""drop.west"")
            p = [b.pos[0] - 1, b.pos[1]];
        
        game.chars.push({
            char: m[1],
            pos: p,
            game: !1
        });
    }
}

game.bots.push(...cbots);

for (let f, i = 0; i &lt; npos.length; i++) {
    if (!(f = nposl.find(a =&gt; a.pos[0] == npos[i].pos[0] &amp;&amp; a.pos[1] == npos[i].pos[1])))
        nposl.push(f = {
            pos: [...npos[i].pos],
            bots: []
        });
    
    f.bots.push(npos[i].bot);
}

for (let n, m, b, i = 0; i &lt; nposl.length; i++) {
    n = nposl[i];
    
    if (n.bots.length &gt; 1) {
        m = Math.max(...n.bots.map(a =&gt; game.bots.find(b =&gt; b.uid == a).score));
        
        if (game.bots.filter(a =&gt; n.bots.includes(a.uid) &amp;&amp; a.score == m).length &gt; 1) {
            m += 1;
            
            if (game.log == 2)
                console.log(""["" + game.turns + ""] Collision: "" + n.bots.map(a =&gt; game.bots.find(b =&gt; a == b.uid)).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join("", ""));
        } else {
            if (game.log == 2)
                console.log(""["" + game.turns + ""] Collision: "" + n.bots.map(a =&gt; game.bots.find(b =&gt; a == b.uid)).sort((a, b) =&gt; b.score - a.score).map(a =&gt; a.name + "" ["" + a.score + ""]"").join("", ""));
        }
        
        for (let j = 0; j &lt; n.bots.length; j++) {
            b = game.bots.find(a =&gt; a.uid == n.bots[j]);
            
            if (b.score &lt; m) {
                for (let k = 0; k &lt; b.chars.length; k++)
                    game.chars.push({
                        char: b.chars[k],
                        pos: game.randPos(b.pos, !0, 0, 0, 0.2),
                        game: !1
                    });
                
                game.records[game.uids[b.original]] += b.score;
            } else {
                nbots.push({
                    uid: b.uid,
                    owner: b.owner,
                    original: b.original,
                    score: b.score,
                    chars: [...b.chars],
                    pos: n.pos,
                    source: b.source,
                    run: b.run,
                    storage: b.storage,
                    name: b.name,
                    color: b.color
                });
            }
        }
    } else {
        b = game.bots.find(a =&gt; a.uid == n.bots[0]);
        
        nbots.push({
            uid: b.uid,
            owner: b.owner,
            original: b.original,
            score: b.score,
            chars: [...b.chars],
            pos: n.pos,
            source: b.source,
            run: b.run,
            storage: b.storage,
            name: b.name,
            color: b.color
        });
    }
}

game.center = [
    nbots.reduce((a, b) =&gt; a + b.pos[0] * (b.score + 1), 0) / nbots.reduce((a, b) =&gt; a + (b.score + 1), 0),
    nbots.reduce((a, b) =&gt; a + b.pos[1] * (b.score + 1), 0) / nbots.reduce((a, b) =&gt; a + (b.score + 1), 0)
];

game.charPool = nbots.map(a =&gt; a.source).join("""");

for (let b, c, i = 0; i &lt; game.chars.length; i++) {
    c = game.chars[i];
    
    if (b = nbots.find(a =&gt; a.pos[0] == c.pos[0] &amp;&amp; a.pos[1] == c.pos[1])) {
        b.score++;
        
        b.chars.push(c.char);
        
        if (c.game &amp;&amp; game.chars.filter(a =&gt; a &amp;&amp; a.game).length &lt; nbots.length * 4 &amp;&amp; game.bots.map(a =&gt; a.original).reduce((a, b) =&gt; a.includes(b) ? a : a.concat(b), []).length &gt; 1)
            game.chars.push({
                char: game.charPool[Math.random() * game.charPool.length | 0],
                pos: game.randPos([0, 0]),
                game: !0
            });
        
        game.chars[i] = null;
    }
}

game.chars = game.chars.filter(a =&gt; a);
game.bots = nbots;
};

function drawRound(turns = 100000, log = 2, fps = 5, zoom = 50) {
var c, ctx, wdim, scale;

document.body.innerHTML = ""&lt;canvas&gt;&lt;/canvas&gt;"";

c = document.body.firstChild;
c.style.position = ""absolute"";
c.style.top = ""0"";
c.style.left = ""0"";
c.style.zIndex = ""2"";
ctx = c.getContext(""2d"");

game.records = new Array(botData.length).fill(0);
game.log = log;
game.pause = !1;
game.fps = fps;

(window.onresize = function() {
    wdim = [window.innerWidth || 600, window.innerHeight || 400];
    scale = Math.ceil(wdim[1] / zoom);
    c.width = wdim[0];
    c.height = wdim[1];
})();

window.onkeydown = function() {
    var key = event.code;
    if (key == ""Escape"")
        game.pause = !game.pause;
    if (key == ""ArrowLeft"" &amp;&amp; game.fps &gt; 1)
        game.fps -= 1;
    if (key == ""ArrowRight"")
        game.fps += 1;
};

game.debug = function() {
    ctx.clearRect(0, 0, wdim[0], wdim[1]);
    ctx.textBaseline = ""middle"";
    ctx.textAlign = ""center"";
    ctx.font = Math.floor(scale * 0.6) + ""px monospace"";
    for (let x = -Math.ceil(wdim[0] / 2 / scale), i = wdim[0] / 2 - (Math.ceil(wdim[0] / 2 / scale) - 0.5) * scale; i &lt;= wdim[0]; i += scale, x++) {
        for (let b, c, y = -Math.ceil(wdim[1] / 2 / scale), j = wdim[1] / 2 - (Math.ceil(wdim[1] / 2 / scale) - 0.5) * scale; j &lt;= wdim[1]; j += scale, y++) {
            if ((c = game.chars.filter(a =&gt; a.pos[0] == Math.floor(x) &amp;&amp; a.pos[1] == Math.floor(y))).length) {
                for (let k = 0; k &lt; c.length; k++)
                    ctx.fillText(JSON.stringify(c[k].char).slice(1, -1).replace(/\\""/, ""\"""").replace(/\\\\/, ""\\"").replace(/ /, ""_""), i + scale / 2, j + scale / 2);
            }
            if (b = game.bots.find(a =&gt; a.pos[0] == Math.floor(x) &amp;&amp; a.pos[1] == Math.floor(y))) {
                ctx.fillStyle = b.color;
                ctx.fillRect(i, j, scale, scale);
                ctx.fillStyle = ""#000000"";
            }
        }
        ctx.beginPath();
        ctx.moveTo(i, 0);
        ctx.lineTo(i, wdim[1]);
        ctx.stroke();
    }
    for (let i = wdim[1] / 2 - (Math.ceil(wdim[1] / 2 / scale) - 0.5) * scale; i &lt;= wdim[1]; i += scale) {
        ctx.beginPath();
        ctx.moveTo(0, i);
        ctx.lineTo(wdim[0], i);
        ctx.stroke();
    }
    ctx.fillRect(wdim[0] / 2 - 3, wdim[1] / 2 - 3, 7, 7);
};

runRound(turns);
}

function runGame(rounds = 1, turns = 100000, log = 0) {
game.records = new Array(botData.length).fill(0);
game.log = log;

for (let i = 0; i &lt; rounds; i++)
    runRound(turns, 0);

console.log(""Game Conclusion:\n"" + botData.map((a, b) =&gt; [a.name, game.records[b]]).sort((a, b) =&gt; b[1] - a[1]).map(a =&gt; ""["" + a[1] + ""] "" + a[0]).join(""\n""));
}

drawRound(/*turns =*/ 1000000, /*log =*/ 2, /*fps =*/ 240,/* zoom =*/ 50);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;body&gt;&lt;/body&gt;</code></pre>
</div>
</div>
</p>
","80214","","","","","2021-01-30 06:41:54","","","","0","","","","CC BY-SA 4.0"
"218251","2","","97771","2021-01-30 08:08:26","","1","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 22 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{⍬≢⍵:∇⊃,/⍵~⎕←⍵/⍨0=≡¨⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///v/pR75pHnYse9W61etTR/qirWUcfyK571Df1UdsEIAvIW2Fg@6hz4aEVQF7t/zSwcB9QIUhj75ZD640ftU0EKg8OcgaSIR6ewf/TFIAsr2B/PwX1aEMdhWgjHQXjWCAdbRILpqJNdRTMgCxzMMciNhYkbBkbq84FsVZdV1dXnQvZlOhoQ7BWoEnRxiCWCZABNCXaDIhBxliAZC1B5hkaxEIAbtMM8cmBbAG70hjqWJNYKCPalJC5EGUg7cZQTSDN6gA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Similar to Dennis' answer, a test case per line.</p>
","80214","","80214","","2021-01-30 08:29:42","2021-01-30 08:29:42","","","","0","","","","CC BY-SA 4.0"
"218252","2","","102219","2021-01-30 08:27:12","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 4 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╖~♫p
</code></pre>
<p><a href=""https://staxlang.xyz/#p=b77e0e70&amp;i=1%0A10%0A101010%0A1101111111010101100101110111001110001000110100110011100000111&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>same reducing idea as Jelly.</p>
","80214","","","","","2021-01-30 08:27:12","","","","0","","","","CC BY-SA 4.0"
"218260","1","","","2021-01-30 15:07:30","","24","3651","<p><a href=""https://codegolf.meta.stackexchange.com/a/20666/80214"">Sandbox</a>, <a href=""https://codegolf.codidact.com/posts/280612"" rel=""nofollow noreferrer"">Codidact</a></p>
<p><em>A rewrite of <a href=""https://codegolf.stackexchange.com/questions/16124/write-an-interactive-deadfish-interpreter"">this question</a> with a simpler input format and guidelines.</em></p>
<h2>Challenge</h2>
<p>Deadfish uses a single accumulator, on which all commands are to be performed.</p>
<p>It has the following commands:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>i</code></td>
<td>increment the accumulator</td>
</tr>
<tr>
<td><code>d</code></td>
<td>decrement the accumulator</td>
</tr>
<tr>
<td><code>s</code></td>
<td>square the value of the accumulator</td>
</tr>
<tr>
<td><code>o</code></td>
<td>output the value of the accumulator as a number</td>
</tr>
</tbody>
</table>
</div>
<p>If, after executing a command, the accumulator is equal to -1 or equal to 256, the accumulator must be reset to zero.</p>
<h2>I/O</h2>
<p>Input can be taken as a single string, list of codepoints, or any other reasonable format. It is guaranteed that the input will only consist of deadfish commands.</p>
<p>Output can be given as an array of numbers, or just the numbers printed with separators between them.</p>
<h2>Testcases</h2>
<p>(some are borrowed from the <a href=""https://esolangs.org/wiki/Deadfish#Mandatory_test_cases"" rel=""nofollow noreferrer"">Esolangs wiki</a>)</p>
<pre><code>iissso -&gt; 0
diissisdo -&gt; 288
iissisdddddddddddddddddddddddddddddddddo -&gt; 0
isssoisoisoisoiso -&gt; 1,4,25,676,458329
ooooosioiiisooo -&gt; 0,0,0,0,0,1,16,16,16
iiii -&gt; nothing
iiiiiiiissdiiiiiiiiiiiiiiiiio -&gt; 4112
o -&gt; 0
</code></pre>
<p><a href=""https://dzaima.github.io/paste#0y8wsLi7O50rJBNKZxSn5XFAGIQBUCNKYiYS48kGgODM/E2gGkAUA"" rel=""nofollow noreferrer"">Without Outputs</a></p>
","80214","","60951","","2021-03-01 04:51:51","2021-03-01 15:51:02","Write a Deadfish Interpreter","<code-golf><interpreter>","40","12","2","","","CC BY-SA 4.0"
"218328","2","","199238","2021-01-31 15:22:51","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 11 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>äùóq◘0Jg•UÜ
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8497a27108304a6707559a&amp;i=%5B7,7,7%5D%0A%5B3,3,5%5D%0A%5B2,6,6%5D%0A%5B3,4,3%5D%0A%5B1,2,3%5D%0A%5B12,9,16%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>This one works for all testcases, and shorter! Uses Unrelated String's idea.</p>
<h2>Explanation</h2>
<pre><code>o{}/{Dz_?m$:*
o             order the array
 {}/          group equal adjacent values
    {    m    map to the following:
        ?     if:
     D        deleting the first element
              makes the array empty, then:
       _       push it again
      z        otherwise push an empty list
          $   flatten the result
           :* take the product 
</code></pre>
","80214","","","","","2021-01-31 15:22:51","","","","0","","","","CC BY-SA 4.0"
"218333","2","","218284","2021-01-31 17:15:01","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 16 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Æ▼.#t!♦ΩÿN+╪\7êI
</code></pre>
<p><a href=""https://staxlang.xyz/#p=921f2e23742104ea984e2bd85c378849&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Uses mixed base conversion and some zipping.</p>
<p>Made with a lot of @recursive's help.</p>
","80214","","","","","2021-01-31 17:15:01","","","","0","","","","CC BY-SA 4.0"
"218369","2","","218360","2021-02-01 09:17:20","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 23 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╙ù╞{)#Xk↕¬;÷&lt;fh/IKô[[zô
</code></pre>
<p><a href=""https://staxlang.xyz/#p=d397c67b2923586b12aa3bf63c66682f494b935b5b7a93&amp;i=%5B%5D%0A%5B0%5D%0A%5B1%5D%0A%5B0,0%5D%0A%5B0,1%5D%0A%5B1,0%5D%0A%5B1,1%5D%0A%5B0,0,0%5D%0A%5B0,0,1%5D%0A%5B0,1,0%5D%0A%5B0,1,1%5D%0A%5B1,0,0%5D%0A%5B1,0,1%5D%0A%5B1,1,0%5D%0A%5B1,1,1%5D%0A%5B0,0,0,0%5D%0A%5B0,0,0,1%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Input as a list of 1s and 0s. Will be further optimized soon.</p>
","80214","","","","","2021-02-01 09:17:20","","","","0","","","","CC BY-SA 4.0"
"218458","2","","218445","2021-02-02 11:07:21","","5","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, <sup><s>47 46</s></sup> 48 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>{x←0⋄⍵{x≡|x⊢←⍺-⍨⊥(1@1)∘⌽∘⍉⍣4⊢0×⍵:x⋄⍺∇⍵⍪0}⊤⍵+~×⍵}
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/v7riUdsEg0fdLY96twLZnQtrKh51LQKKPerdpfuod8WjrqUahg6Gmo86Zjzq2Qsiezsf9S42ASoyODwdqMmqAqx516OOdiDvUe8qg9pHXUuATO06sHzt/zSwaX2Pupof9a551Lvl0HrjR20TH/VNDQ5yBpIhHp7B/9OBaqqBHK9gfz@FNJBBXYuBXKCounotF1e6goGCEZA0VjBRMATSOiCOjgFYBAiBtKGCkbmCCUjEXMHIQMFMwQSo0gTBNTaGc0E8CMcQaKwhRLOCMQA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>A dfn which takes a vector as its right argument.</p>
<p>Outputs a list of 0's if the input is already a binary-box.</p>
<p>+2 bytes after a fix.(Thanks, Arnauld)</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{x←0⋄⍵{x≡|x⊢←⍺-⍨⊥(1@1)∘⌽∘⍉⍣4⊢0×⍵:x⋄⍺∇⍵⍪0}⊤⍵+~×⍵}
 x←0                                             set var x to 0(required for extended)
      {x≡|x⊢←⍺-⍨⊥(1@1)∘⌽∘⍉⍣4⊢0×⍵:x⋄⍺∇⍵⍪0}        call the following recursive function with
                                          ⍵+~×⍵  add !(signum(input)) to itself
                                                 (special casing for [0])
                                         ⊤       converted to binary matrix
     ⍵                                           and the input list as right arg
                                :                If:
                             0×⍵                 the matrix converted to zeroes
                 (1@1)∘⌽∘⍉⍣4⊢                    with 1s added on each side
                ⊥                                convert from binary
             ⍺-⍨                                 subtract from the input
          x⊢←                                    assign to x
       x≡|                                       if x matches its absolute value
                                 x               then return x
                                  ⋄⍺∇⍵⍪0         otherwise add a row of zeroes, and try again
</code></pre>
","80214","","80214","","2021-02-02 12:29:26","2021-02-02 12:29:26","","","","0","","","","CC BY-SA 4.0"
"218562","2","","140748","2021-02-04 07:40:14","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 8 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ç√'8½B=☺
</code></pre>
<p><a href=""https://staxlang.xyz/#p=80fb2738ab423d01&amp;i=%5B%5D,%5B%5D%0A%5B1,+2,+3%5D,+%5B1,+3,+2%5D%0A%5B1,+3,+3.2,+2.3%5D,+%5B3,+1,+3.2,+2.6%5D%0A%5B1,2,3,4,5,5,7,8,9,10%5D,+%5B10,9,8,7,6,5,4,3,2,1%5D%0A%5B-3.2,+-3.2,+-2.4,+7,+-10.1%5D,+%5B100,+-3.2,+2.4,+-7,+-10.1%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-02-04 07:40:14","","","","0","","","","CC BY-SA 4.0"
"218571","2","","113","2021-02-04 11:28:21","","1","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v3</a>, 69 bytes</h1>
<pre><code>&gt; Input
&gt; Input
&gt;&gt; 1…2
&gt;&gt; L’
&gt;&gt; Select∧ 4 3
&gt;&gt; ∑5
&gt;&gt; Output 6
</code></pre>
<p><a href=""https://tio.run/##K8/ILC5ILSo2@v/fTsEzr6C0hAtO2ykYPmpYZgRi@DxqmAmig1NzUpNLHnUsVzBRMAYJPOqYaAqi/UtLgHoUzP7/N@IyBwA"" rel=""nofollow noreferrer"" title=""Whispers v2 – Try It Online"">Try it online!</a></p>
<p>simply makes an inclusive range and filters it, then sums it.</p>
","80214","","","","","2021-02-04 11:28:21","","","","0","","","","CC BY-SA 4.0"
"218574","2","","82494","2021-02-04 12:10:01","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 3 bytes</h1>
<pre><code>F⌉ḣ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3@1RT@fDHYv//wcA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>same as APL.</p>
","80214","","","","","2021-02-04 12:10:01","","","","0","","","","CC BY-SA 4.0"
"218597","2","","86944","2021-02-04 15:46:29","","1","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v3</a>, 43 bytes</h1>
<pre><code>&gt; Input
&gt; fₙ
&gt;&gt; 2ᶠ1
&gt;&gt; ∏3
&gt;&gt; Output 4
</code></pre>
<p><a href=""https://repl.it/join/wpjvvcdd-razetime"" rel=""nofollow noreferrer"">Try it repl.it!</a></p>
<p>Needs to be run with</p>
<pre class=""lang-bash prettyprint-override""><code>python3 whispers\ v3.py fibonacciorial.wisp &lt; input.txt 2&gt; /dev/null
</code></pre>
<p>Finishes well within 5 seconds on repl.it.</p>
","80214","","80214","","2021-02-05 02:49:18","2021-02-05 02:49:18","","","","2","","","","CC BY-SA 4.0"
"218598","2","","190670","2021-02-04 16:03:48","","1","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v3</a>, <sup><s>32</s></sup> 30 bytes</h1>
<pre><code>&gt; Input
&gt;&gt; ⌈1⌋
&gt;&gt; Output 2
</code></pre>
<p><a href=""https://tio.run/##K8/ILC5ILSo2@v/fTsEzr6C0hMvOTuFRT4fho55uENO/tAQoqACU1zXRMwcA"" rel=""nofollow noreferrer"" title=""Whispers v2 – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Michael Chatiskatzi.</p>
","80214","","80214","","2021-02-04 16:52:47","2021-02-04 16:52:47","","","","2","","","","CC BY-SA 4.0"
"218601","2","","195551","2021-02-04 16:35:13","","3","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v3</a>, 31 bytes</h1>
<pre><code>1 tuptuO &gt;&gt;
&gt; 1
&gt;&gt; Output 1
0 &gt;
</code></pre>
<p><a href=""https://tio.run/##K8/ILC5ILSo2@v/fUKGktKCk1F/Bzo7LTsGQy85Owb@0pKC0BMg2ULD7/x8A"" rel=""nofollow noreferrer"" title=""Whispers v2 – Try It Online"">Try it online!</a>, <a href=""https://tio.run/##K8/ILC5ILSo2@v/fTsGAy1ChpLSgpNRfwc4OyLbjsrNT8C8tKSgtUTD8/x8A"" rel=""nofollow noreferrer"" title=""Whispers v2 – Try It Online"">!enilnO tI yrT</a></p>
<p>Hooray for strict parsing rules!</p>
<p>The first and last lines are ignored, because they don't fit the right syntax. They come into action when reversed.</p>
","80214","","","","","2021-02-04 16:35:13","","","","0","","","","CC BY-SA 4.0"
"218625","2","","218618","2021-02-05 03:53:40","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 23 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü▼2δ`▀ÆH╞íq`º╪ ≈♀ô☺ßX→ú
</code></pre>
<p><a href=""https://staxlang.xyz/#p=811f32eb60df9248c6a17160a7d820f70c9301e1581aa3&amp;i=%28%3E%3E%3C%29%0A%28%3C%3C%28%3C%3E%3C%29%29%0A%28%28%3E%3E%3E%29%3E%3C%29%0A%28%28%3C%28%3C%3C%3E%29%28%3C%3C%3C%29%29%3C%3C%29%0A%28%28%28%3E%28%3E%3E%3C%29%3E%29%28%3E%3C%3E%29%3E%29%3E%3C%29%0A%28%28%3C%3C%28%3E%28%3C%3E%3E%29%3C%29%29%28%28%3E%3C%3E%29%28%3E%3C%3C%29%3E%29%28%3C%3C%3C%29%29%0A%28%28%28%3C%3C%3C%29%3C%3E%29%28%28%3E%3E%3C%29%3C%28%3C%3E%3C%29%29%28%28%3E%3E%3E%29%3C%3C%29%29%0A%28%3E%28%3E%28%28%3E%3C%3E%29%3C%3E%29%28%3C%3E%3E%29%29%28%28%3E%3E%3C%29%28%28%3E%3C%3E%29%3C%3C%29%3C%29%29%0A%28%28%28%3E%3C%3C%29%28%3E%3C%3C%29%28%3C%3C%3E%29%29%28%3C%28%3E%3E%3C%29%28%3E%3E%3C%29%29%28%3C%3C%28%3C%3C%3E%29%29%29%0A%28%28%3C%28%3E%3C%3C%29%28%3E%28%3E%3E%3E%29%3E%29%29%28%28%3E%3E%3E%29%3E%3E%29%28%28%3C%3E%28%3E%3E%3C%29%29%3C%3C%29%29%0A%28%3C%3E%3E%29%0A%28%28%28%3C%3C%3C%29%3E%28%3C%3C%3E%29%29%28%3E%3C%3C%29%3E%29%0A%28%28%28%3E%3E%3E%29%3C%3E%29%3C%28%28%3C%3C%3C%29%3E%3E%29%29%0A%28%3E%28%3E%3E%28%3C%3C%3C%29%29%28%3E%28%28%3C%3E%3E%29%3C%3C%29%3C%29%29%0A%28%28%28%3E%3C%3E%29%28%3C%3C%3E%29%3E%29%28%3C%3C%28%3C%3C%3C%29%29%28%3C%28%3E%3E%3E%29%3C%29%29%0A%28%28%3E%3C%28%28%3E%3C%3E%29%3E%3C%29%29%28%3E%28%3E%3E%28%3E%3E%3E%29%29%28%3C%3E%3C%29%29%28%3E%3E%3E%29%29%0A%28%28%28%28%3E%3E%3C%29%3C%3E%29%28%3E%3C%3E%29%28%3E%3C%3E%29%29%28%3C%3C%28%3C%3E%3E%29%29%28%3C%3C%3E%29%29%0A%28%28%28%3E%3C%3E%29%3C%28%3C%3C%28%3C%3C%3E%29%29%29%28%28%3C%28%3C%3C%3E%29%3C%29%28%3C%3E%3C%29%3E%29%28%3E%3E%3E%29%29%0A%28%28%3C%3C%28%3C%3E%3C%29%29%28%28%28%3C%3E%3E%29%3E%3C%29%28%3E%3C%3C%29%28%3E%3C%3E%29%29%28%3C%28%3E%3C%3E%29%3E%29%29%0A%28%28%28%3E%3E%3E%29%3C%3C%29%28%3C%28%3C%3E%3C%29%3C%29%28%28%3C%3C%28%3C%3C%3C%29%29%3E%28%3E%28%3E%3C%3E%29%3C%29%29%29&amp;a=1&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Uses the same regex as tsh's Javascript solution, and replaces till a fixed point is reached.</p>
<h2>Explanation</h2>
<pre><code>&quot;\((.&gt;)?(.)(&lt;.)?\)&quot;.$2RgiH
                       g   generator:
                        i  apply the following till invariant:
&quot;\((.&gt;)?(.)(&lt;.)?\)&quot;.$2     regex replace with second capture group
                         H take last generated value
</code></pre>
","80214","","","","","2021-02-05 03:53:40","","","","0","","","","CC BY-SA 4.0"
"218678","2","","218663","2021-02-06 04:23:34","","3","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s>36</s></sup> 31 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>

<pre class=""lang-apl prettyprint-override""><code>{⊃⍪/,/{⍵@(⌽⍵=⊖)x}¨⍵}⍣⎕⊢x←2 2⍴⍳4
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qG@qp/@jtgkGXI862tP@Vz/qan7Uu0pfR7/6Ue9WB41HPXuBtO2jrmmaFbWHVgDZtY96FwM1PepaVAHUZqRg9Kh3y6PezSb/gfr/p3EZcqVxGQGxMRCbALEpAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>A dfn submission which takes the number as left argument.</p>
<p>Uses <code>⎕IO←0</code> (0-indexing).</p>
<p>The box is represented as</p>
<pre class=""lang-apl prettyprint-override""><code>01
23
</code></pre>
<p>which is then substituted exactly according to the question spec.</p>
<p>-5 bytes from Adám.</p>
<h2>Explanation</h2>
<pre class=""lang-apl prettyprint-override""><code>{⊃⍪/,/{⍵@(⌽⍵=⊖)x}¨⍵}⍣⎕⊢x←2 2⍴⍳4
                       x←2 2⍴⍳4  store 0 1 in x
                                       2 3
                    ⍣⎕⊢          apply the following n times to the value of x:
{                ¨⍵}             substitute each number ⍵ with:
      {⍵@      x}                replace the following with ⍵ in the value of x:
         (⌽⍵=⊖)                  position of ⍵, flipped diagonally
  ⍪/,/                           join all the submatrices together
 ⊃                               and remove boxing.
</code></pre>
","80214","","80214","","2021-02-08 12:27:59","2021-02-08 12:27:59","","","","1","","","","CC BY-SA 4.0"
"218705","2","","217690","2021-02-07 07:56:23","","8","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s>27 25</s></sup> 20 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>({w↓⍨←⍵=⊃w,0}¨⍞)\w←⍞
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=06guf9Q2@VHvikdtEx71brV91NVcrmNQe2jFo955mjHlYNF5AA&amp;f=AwA&amp;i=RZBbjuUgDET/WUVtp5dBeL9CAF9wsvomt6WZH8s@qrLsskJVbcQPdMVZCaqe1GsGeYNxGaMhCcsH5ZHrMcj0AR2MEFaQHILMICXH1lIPp3vxJ/sl3dXmfdJT9uz@AP6RLWrKzl17kooZa9koEccdtbUSc1nHX5lTn8j5EA/WM1yd3iPWayE4xSgfjuBSwmB9gpDL8XqMSGwRXXlMvK8Dt/xSFtag8p1wv3Nd3ZaQRMXq@HZf6@XMQ7jro@7WoDsTnJoywjMyAoNNCaVUfuVJpKZywgGfHHX/MtVXa56zGEHi6qprq5JDpbamnvsN3Xi27QCrzGVv5qjXPv6x63@oksYO9Rc&amp;r=tio&amp;l=apl-dyalog&amp;m=tradfn&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a></p>
<p>A tradfn submission which takes the two values from STDIN.</p>
<p>Inspired by coltim's K answer.</p>
<p>Uses space as the blotting character.</p>
<p>-2 and -5 bytes from Adám!</p>
<p>The expand operation <code>\</code> uses a bitmask to insert spaces between the elements of the input.</p>
<p><code>1 0 0 1 0 0/'hi' → 'h  i  '</code> </p>
<h2>Explanation</h2>
<pre><code>({w↓⍨←⍵=⊃w,0}¨⍞)\w←⍞
                 w←⍞ store target word in w
                \    expand using the following bitmask:
 {          }¨⍞      for each character of the source word:
      ⍵=⊃w,0          is the character equal to the first one in w?
                      return that
  w↓⍨←                then drop that many characters from w (0 or 1)
</code></pre>
","80214","","80214","","2021-02-09 11:42:51","2021-02-09 11:42:51","","","","0","","","","CC BY-SA 4.0"
"218712","2","","65886","2021-02-07 11:33:54","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 41 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｈ？¹⤢\ /＊¹０＜？ /∙|/╋｝ v∔↕_|__¶∔↕］_４×｝＋｝_；＋↕
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjI4JXVGRjFGJUI5JXUyOTIyJTVDJTIwLyV1RkYwQSVCOSV1RkYxMCV1RkYxQyV1RkYxRiUyMC8ldTIyMTklN0MvJXUyNTRCJXVGRjVEJTIwdiV1MjIxNCV1MjE5NV8lN0NfXyVCNiV1MjIxNCV1MjE5NSV1RkYzRF8ldUZGMTQlRDcldUZGNUQldUZGMEIldUZGNURfJXVGRjFCJXVGRjBCJXUyMTk1,i=JTVCMCUyQyUyMC0xJTJDJTIwMiUyQyUyMC0zJTJDJTIwNCU1RA__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2021-02-07 11:33:54","","","","0","","","","CC BY-SA 4.0"
"218721","2","","209020","2021-02-07 16:21:45","","1","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v2</a>, <sup><s>148 135</s></sup> 111 bytes</h1>
<pre><code>&gt; Input
&gt; &quot;_&quot;
&gt; &quot; &quot;
&gt; &quot;/&quot;
&gt; &quot;|&quot;
&gt; &quot;\\&quot;
&gt;&gt; 1⋅2
&gt;&gt; 3+7
&gt;&gt; 3⋅1
&gt;&gt; 4+9
&gt;&gt; 10+6
&gt;&gt; 5+9
&gt;&gt; 12+5
&gt;&gt; Output 8 11 13
</code></pre>
<p><a href=""https://tio.run/##K8/ILC5ILSo2@v/fTsEzr6C0hMtOQSleCUQqgEl9MFkDJmNigJSdguGj7lYjEMNY2xxMAfmGIIaJtiVY3kDbDESbQrlG2qYg2r@0BGi@goWCoaGCofH//0YGAA"" rel=""nofollow noreferrer"" title=""Whispers v2 – Try It Online"">Try it online!</a></p>
<p>This took much longer than expected to make.</p>
<p>-13 bytes from Michael Chatiskatzi.</p>
<p>-24 bytes from Leo.</p>
","80214","","80214","","2021-02-09 03:38:37","2021-02-09 03:38:37","","","","2","","","","CC BY-SA 4.0"
"218746","2","","218736","2021-02-08 02:31:13","","2","","<h1>Use <code>Then</code> to group values into an array</h1>
<p><code>Then</code> is a command which takes an indefinite number of arguments and puts them in an array:</p>
<pre><code>&gt; &quot;hello&quot;
&gt; &quot;world&quot;
&gt;&gt; Then 1 2
</code></pre>
<p>The last line here returns <code>['hello', 'world']</code>.</p>
<p>This can then be used with <code>Each</code> or <code>Select</code> to output things or modify them for something else.</p>
","80214","","","","","2021-02-08 02:31:13","","","","0","","","","CC BY-SA 4.0"
"218747","2","","204718","2021-02-08 02:43:51","","1","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v3</a>, 52 bytes</h1>
<pre><code>&gt; Input
&gt; eᵢ
&gt;&gt; ≻1
&gt;&gt; 2ᶠ3
&gt;&gt; 4ⁿ1
&gt;&gt; Output 5
</code></pre>
<p><a href=""https://repl.it/join/wpjvvcdd-razetime"" rel=""nofollow noreferrer"">Try it on repl.it!</a></p>
<p>Run with <code>python3 whispers\ v3.py euler.wisp &lt; input.txt 2&gt; /dev/null</code></p>
<p>Input is the first line in input.txt.</p>
<p>Euler digits builtin ftw!</p>
","80214","","","","","2021-02-08 02:43:51","","","","0","","","","CC BY-SA 4.0"
"218748","2","","20115","2021-02-08 03:07:50","","3","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v2</a>, <sup><s>133</s></sup>, 93 bytes</h1>
<pre><code>&gt; Input
&gt; Input
&gt; &quot;The hypotenuse of this right triangle is %.3f&quot;
&gt;&gt; 1⊿2
&gt;&gt; 3%4
&gt;&gt; Output 5
</code></pre>
<p><a href=""https://tio.run/##K8/ILC5ILSo2@v/fTsEzr6C0hAtBK4VkpCpkVBbkl6TmlRanKuSnKZQA1SsUZaZnlCiUFGUm5qXnpCoARVT1jNOUuOzsFAwfde03AjGMVU1AlH9pCdAsBdP//425TAE"" rel=""nofollow noreferrer"" title=""Whispers v2 – Try It Online"">Try it online!</a></p>
<p><del>The major part of this program is calculating the decimal point's index and truncating to 3 digits.</del> -40 bytes from Leo!</p>
","80214","","80214","","2021-02-09 02:51:02","2021-02-09 02:51:02","","","","3","","","","CC BY-SA 4.0"
"218752","2","","103756","2021-02-08 06:00:26","","1","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v3</a>, <sup><s>77</s></sup> 69 bytes</h1>
<pre><code>&gt; Input
&gt; 0
&gt;&gt; L!
&gt;&gt; … 2 1 3
&gt;&gt; L*L
&gt;&gt; Each 5 4
&gt;&gt; ∑6
&gt;&gt; Output 7
</code></pre>
<p><a href=""https://tio.run/##K8/ILC5ILSo2@v/fTsEzr6C0hMtOwYDLzk7BRxFEPmpYpmCkYKhgDBbS8gFRronJGQqmCiZg@Y6JZiDav7QEqFfB/P9/YwA"" rel=""nofollow noreferrer"" title=""Whispers v2 – Try It Online"">Try it online!</a></p>
<p>Yet another 69 byte answer thanks to Leo.</p>
","80214","","80214","","2021-02-09 02:52:13","2021-02-09 02:52:13","","","","3","","","","CC BY-SA 4.0"
"218758","2","","218714","2021-02-08 10:40:28","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 33 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ç∞♫ÑÄ‼ú╘màk■g5øg◘U½¢┴Åû)*ç╨£╨├╡óà
</code></pre>
<p><a href=""https://staxlang.xyz/#p=80ec0ea58e13a3d46d856bfe673500670855ab9bc18f96292a87d09cd0c3b5a285&amp;i=%5B+7,+5,+2,+8,+0,+2,+9,+3,+5,+1,+2+%5D%0A%5B+2,+5,+1,+11,+-1,+2,+13,+5,+1,+0,+5+%5D%0A%5B+528,+-314,+2,+999,+-666,+0,+0,+78+%5D%0A%5B+528,+-314,+2,+999,+-666,+0,+0,+79+%5D%0A%5B+528,+-314,+2,+999,+-666,+5,+-5,+42+%5D%0A%5B+-845,+2021,+269,+5,+-1707,+269,+22+%5D%0A%5B+-843,+2021,+269,+5,+-1707,+269,+22+%5D%0A%5B-54,-22,-933,544,813,4135,54,-194,544,-554,333,566,566,-522,-45,-45%5D%0A%5B95444,-22668,834967,51713,321564,-8365542,-962485,-253387,-761794,-3141592,-788112,533214,51713,885244,522814,-41158,-88659176,654211,74155,-8552445,-22222%5D%0A%5B+1,+2,+3,+9,+8,+7,+9,+8,+5,+4,+6,+0,+6,+7+%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Getting the middle two elements takes most of the space here. Reducing that would significantly improve the score.</p>
","80214","","","","","2021-02-08 10:40:28","","","","0","","","","CC BY-SA 4.0"
"218768","2","","176735","2021-02-08 16:07:17","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 11 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ô 0┤'ï╒Äì√¡
</code></pre>
<p><a href=""https://staxlang.xyz/#p=932030b4278bd58e8dfbad&amp;i=+%22843%22,3%0A+%220%22,1%0A+%221010%22,2%0A+%221010%22,3%0A+%221010%22,4%0A+%2223104441070%22,9%0A%22499102102121103%22,12%0A+%2271061%22,5%0A%22476565010684%22,11%0A+%221306%22,4%0A+%2251026221084%22,9%0A%22851089085685524%22,14%0A%22110840867780%22,11%0A+%224359893510%22,9%0A+%2299153710%22,7%0A%22886171092313495%22,14%0A+%2244%22,2%0A+%229386%22,4&amp;a=1&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>It was very interesting to find a way to outgolf the V answer.</p>
<h2>Explanation</h2>
<pre><code>|!{11rJj-!}jJ
|!            all array partitions of length n
  {       }j  first element which satisfies:
   11r        range 0-10
      J       joined with spaces
       j      split on spaces
        -     set difference with the current iteration
         !    negated
              is true?
            J join with spaces
</code></pre>
","80214","","","","","2021-02-08 16:07:17","","","","0","","","","CC BY-SA 4.0"
"218802","1","218810","","2021-02-09 09:56:24","","5","197","<p>When I was posting answers for the <a href=""https://codegolf.meta.stackexchange.com/a/19387/80214"">Husk Language of The Month thread</a>, I realized it took more time to enter them in the thread than it took to actually write the answers. So, why not automate it?</p>
<p>Write a program/function which inputs a language name, and displays all answers in that language during the current month so far)</p>
<p><a href=""https://codegolf.meta.stackexchange.com/a/20474/80214"">Sandbox</a></p>
<h1>Introduction</h1>
<p>You are to find all answers in Code Golf Stack Exchange in the current month so far, whose first non-empty line matches the following:</p>
<pre><code>#&lt;whitespace&gt;[&lt;language name&gt;(case insensitive match)]&lt;anything else&gt;
</code></pre>
<p>For example, the current month's answers should have been posted within the time frame of Nov 1 till the current date(Nov 6, as of this question's sandbox post).</p>
<p>for each answer, you must find the following:</p>
<ul>
<li>Question name</li>
<li>Answer URL</li>
<li>Answer Poster's Name</li>
<li>Answer Poster's Profile URL</li>
</ul>
<p>And format them in the following manner for Markdown:</p>
<pre><code>- [&lt;Question Name&gt;](Answer URL) by [&lt;Answer Poster's Name&gt;]
</code></pre>
<p>Once you are done listing the answers, to keep the post short, you must key in the usernames to their respective profile URLs as follows:</p>
<pre><code>- [&lt;Answer Poster's Name&gt;]:&lt;Answer Poster's Profile URL&gt;
</code></pre>
<p>This must be added at the end of the output.</p>
<h1>Output</h1>
<p>The final result should look like the following:</p>
<pre><code>- [Size up a number](http://example1.com) by [Razetime]
- [My smartphone's Phonebook](http://example2.com) by [Bubbler]
- [1,2,Fizz,4,Buzz](http://example3.com) by [Lyxal]
- [Upgoat or Downgoat?](http://example3.com) by [LegionMammal978]
- .....

[Razetime]:http://exampleA.com
[Bubbler]:http://exampleB.com
[Lyxal]:http://exampleC.com
[LegionMammal978]:http://exampleD.com
...
</code></pre>
<h1>Scoring</h1>
<p>This is <a href=""/questions/tagged/code-golf"" class=""post-tag"" title=""show questions tagged &#39;code-golf&#39;"" rel=""tag"">code-golf</a>. Shortest answer in each language wins.</p>
","80214","","","","","2021-02-15 15:07:52","Create a Language of The Month answer scraper","<code-golf><internet><stack-exchange-api>","1","6","","","","CC BY-SA 4.0"
"218826","2","","52592","2021-02-10 07:43:26","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>18 15 14</s></sup> 13 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ä╦@╥◄/J[;&amp;πi⌡
</code></pre>
<p><a href=""https://staxlang.xyz/#p=84cb40d2112f4a5b3b26e369f5&amp;i=%22CODEGOLF%22%0A%22Programming+Puzzles+%26+Code+Golf%22%0A%22NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN+BATMAN%21%22%0A%22Two+more+questions+and+I+have+bzip2+in+less+than+100+bytes%21%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>-3 bytes using a map, and a simpler algorithm.</p>
<p>-1 byte borrowing from Kevin Cruijssen's answer.</p>
<p>-1 byte by simplifying a stack operation.</p>
","80214","","80214","","2021-02-10 08:28:23","2021-02-10 08:28:23","","","","0","","","","CC BY-SA 4.0"
"218888","2","","84416","2021-02-11 12:11:30","","0","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 35 bytes</h1>
<pre><code>≔⁰ξ≔⁺θ θＦ⊖Ｌθ«¿¬⁼§θι§θ⊕ι«Ｐ✂θξ⊕ι↓≔⊕ιξ
</code></pre>
<p><a href=""https://tio.run/##ZY6xCoMwFEXn5CuK03ug0LmbYAeh7dKxdEiTqIE0MRqtUPz21FBBSs90L5wLlzes45bpEPK@V7WBfTohXXMuBLg02SWYOqSV7aCQvJNPabwUcJKm9g04RHxToiq4WA9HNzDdQ@5LI@S0rBWmWynNNleI3yU5D9qrtlPGw1UrLhdx@lOjZ0cJh8K@TGzrx18vnieEkpnOIdwStvBY4JHkHjI9hixrW15/AA"" rel=""nofollow noreferrer"">Try it online!</a> Link is to verbose version of code.</p>
<p>Input as a list of characters.</p>
","80214","","","","","2021-02-11 12:11:30","","","","0","","","","CC BY-SA 4.0"
"218920","2","","73636","2021-02-12 03:59:22","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 3 bytes</h1>
<pre><code>…fI
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HDsjTP////RxvqGIChqY4ZkDQBsw1jAQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-02-12 03:59:22","","","","0","","","","CC BY-SA 4.0"
"218926","2","","191241","2021-02-12 07:09:02","","0","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s></s></sup>5 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>××⌈∘|
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=Ozz98PRHPR2POmbUAAA&amp;f=S1Mw1DPlSlM4tN5MzxwA&amp;i=AwA&amp;r=tryAPL&amp;l=apl-dyalog&amp;m=train&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a></p>
<p>A train submission which takes a number on the right. Uses <a href=""https://codegolf.stackexchange.com/a/191248/80214"">recursive's idea.</a></p>
","80214","","","","","2021-02-12 07:09:02","","","","0","","","","CC BY-SA 4.0"
"218932","2","","204457","2021-02-12 09:40:29","","0","","<h1><a href=""https://www.dyalog.com/"" rel=""nofollow noreferrer"">APL (Dyalog Unicode)</a>, 51 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>(⌷∘'zun' 'doko'¨⍪∘?∘2⍣{(2,⍨4/1)≡¯5↑⍺}⍬)'ki-yo-shi!'
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT///qKM9/b/Go57tjzpmqFeV5qkrqKfkZ@erH1rxqHcVUMweiI0e9S6u1jDSedS7wkTfUPNR58JD600ftU181Lur9lHvGk317Ezdynzd4oxMRXWQgf/TudIB"" rel=""nofollow noreferrer"" title=""APL (Dyalog Unicode) – Try It Online"">Try it online!</a></p>
<p>Slight improvement on the other solution, since the account is deleted.</p>
","80214","","","","","2021-02-12 09:40:29","","","","0","","","","CC BY-SA 4.0"
"218937","2","","73818","2021-02-12 10:13:59","","3","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, <sup><s>13</s></sup> 10 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>⤢：⁸／ｎ！ｎ↔┼┼
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXUyOTIyJXVGRjFBJXUyMDc4JXVGRjBGJXVGRjRFJXVGRjAxJXVGRjRFJXUyMTk0JXUyNTNDJXUyNTND,i=b3ZlcmZsb3c_,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<h2>Explanation</h2>
<pre><code>⤢:⁸/n!n↔++
⤢          join input with newlines
 :         duplicate it
  ⁸        push the input again
   /       make a diagonal out of it
    n      overlap the two
     !     transpose that result
      n    overlap with the first duplicated one
       ↔   mirror it horizontally
        ++ quad-palindromize without changing characters
</code></pre>
","80214","","80214","","2021-02-12 11:32:05","2021-02-12 11:32:05","","","","0","","","","CC BY-SA 4.0"
"218941","2","","73818","2021-02-12 12:44:33","","0","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s>49</s></sup> 47 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>{(⊢⍪1↓⊖)(⊢,0 1↓⌽)⍵@(2/¨⍳a)⊢⍵@a⊢⍉⍵@a⊢''⍴⍨2/a←≢⍵}
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=q9Z41LXoUe8qw0dtkx91TdMEcXUMFMDcnr2aj3q3OmgY6R9a8ah3c6ImWOlWh0Qw3Qljqqs/6t3yqHeFkX7io7YJjzpBamoB&amp;f=Ky5JLFJQzy9LLUrLyS9XBwA&amp;i=AwA&amp;r=tryAPL&amp;l=apl-dyalog&amp;m=dfn&amp;n=star"" rel=""nofollow noreferrer"">Try it on APLgolf!</a></p>
<p>A dfn submission which takes the string as right argument.</p>
<p>-2 borrowing from Ven's answer.</p>
","80214","","80214","","2021-02-12 12:53:34","2021-02-12 12:53:34","","","","0","","","","CC BY-SA 4.0"
"218943","2","","190223","2021-02-12 13:09:32","","0","","<h1><a href=""https://github.com/dloscutoff/pip"" rel=""nofollow noreferrer"">Pip</a>, 5 bytes</h1>
<pre><code>aJW'!
</code></pre>
<p><a href=""https://tio.run/##K8gs@P8/0StcXfH///@KilxICAA"" rel=""nofollow noreferrer"" title=""Pip – Try It Online"">Try it online!</a></p>
<p>The <code>JW</code> builtin was made for challenges like this.</p>
","80214","","","","","2021-02-12 13:09:32","","","","0","","","","CC BY-SA 4.0"
"218970","2","","58381","2021-02-13 04:29:59","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 12 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ç«δv▀▼ÖP▄¶⌠&quot;
</code></pre>
<p><a href=""https://staxlang.xyz/#p=80aeeb76df1f9950dc14f422&amp;i=12%0A8%0A41%0A27%0A144%0A99%0A3"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Yet another port of the CJam answer.</p>
<p>-1 more byte if a list of integers is taken as input.</p>
","80214","","80214","","2021-02-13 06:56:05","2021-02-13 06:56:05","","","","0","","","","CC BY-SA 4.0"
"218973","2","","61666","2021-02-13 06:50:57","","2","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v3</a>, 111 bytes</h1>
<pre><code>&gt; Input
&gt; fₙ
&gt;&gt; ≺1
&gt;&gt; 2ᶠ1
&gt;&gt; 4ⁿ3
&gt; 26
&gt;&gt; 5⊥6
&gt; 97
&gt;&gt; 8+R
&gt;&gt; Each 9 7
&gt;&gt; 'R
&gt;&gt; Each 11 10
&gt;&gt; Output 12
</code></pre>
<p><a href=""https://repl.it/@razetime/Whispers-online-runner#fibabc.wisp"" rel=""nofollow noreferrer"">Try it on repl.it!</a></p>
<p>Needs to be run as <code>python3 whispers\ v3.py fibabc.wisp &lt; input.txt 2&gt; /dev/null</code> with input given on the first line of <code>input.txt</code>.</p>
<p>I think the first and last lines can be removed <a href=""https://codegolf.meta.stackexchange.com/questions/20737/can-whispers-programs-ignore-a-final-output-line"">as per the consensus here</a>, but I'm not sure.</p>
<p>8 bytes shorter than hardcoding the alphabet: <a href=""https://repl.it/@razetime/Whispers-online-runner#fibabc2.wisp"" rel=""nofollow noreferrer"">Try it on repl.it!</a></p>
","80214","","","","","2021-02-13 06:50:57","","","","1","","","","CC BY-SA 4.0"
"219004","2","","3532","2021-02-14 02:52:41","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 6 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ô°hånⁿ
</code></pre>
<p><a href=""https://staxlang.xyz/#p=93f868866efc&amp;i=515"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>-1 byte from Weijun Zhou's answer.</p>
","80214","","","","","2021-02-14 02:52:41","","","","0","","","","CC BY-SA 4.0"
"219033","2","","218978","2021-02-15 09:37:52","","1","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s></s></sup>20 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>+/1&lt;1⊥≢⍤⊣&gt;∘|∘.-⍨⍤⍸⍤⍷
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=09Y3tDF81LX0UeeiR71LHnUttnvUMaMGiPV0H/WuAAn17gCT2wE&amp;f=U8/Jz1FXSFNQLynKz4FBdS4wF1McAA&amp;i=AwA&amp;r=tryAPL&amp;l=apl-dyalog&amp;m=train&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a></p>
<p>A train submission which takes <code>b</code> on the left, and <code>a</code> on the right.</p>
<p>-2 bytes from Adám(helped trainify the function)</p>
<h2>Explanation</h2>
<pre><code>                   ⍷ boolean array where b occurs in a
                 ⍸⍤  indices of 1s in it
            ∘.-⍨⍤    all pairwise differences
           |         take the absolute value of it(vectorized)
      ≢⍤⊣            length of b        
         &gt;           greater than the absolute values?(vectorizes)
    1⊥               sum the columns of that result
  1&lt;                 are they &gt;1?                                  
+/                   sum the result
</code></pre>
","80214","","80214","","2021-02-15 09:43:51","2021-02-15 09:43:51","","","","0","","","","CC BY-SA 4.0"
"219039","2","","182797","2021-02-15 11:43:44","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>9</s></sup> 8 bytes</h1>
<pre><code>↑ƒ(+ḋ7Ẋ+
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbxGOTNLQf7ug2f7irS/v///@GRgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>There <del><em>might</em> be</del> is a shorter version using <code>fix</code>. -1 from Leo!</p>
","80214","","80214","","2021-02-16 02:26:03","2021-02-16 02:26:03","","","","1","","","","CC BY-SA 4.0"
"219046","2","","219041","2021-02-15 13:18:38","","4","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s>47 37</s></sup> 32 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>{⍺@((,⍳x)~⍸↑=⍨⍵)⊢(x←2/⌈/⍴↑⍵)↑↑⍵}
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=q37Uu8tBQ0PnUe/mCs26R707HrVNtH3Uu@JR71bNR12LNCoetU0w0n/U06H/qHcLUA4sDqTArFoA&amp;f=s1BIU3jUN9Ur2N9PPTpWncsAmR9tGKsTbRSroxBtDCJMdBRMY2PVAQ&amp;i=AwA&amp;r=tryAPL&amp;l=apl-dyalog&amp;m=dfn&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a></p>
<p>A dfn submission which takes fill element on the left, and ragged array on the right.</p>
<p>It calculates the indices of the existing elements and replaces everything else with the fill element.</p>
<p>-10, borrowing an idea from Adám's answer.</p>
<p>-5 from user.</p>
","80214","","80214","","2021-02-16 02:09:20","2021-02-16 02:09:20","","","","0","","","","CC BY-SA 4.0"
"219057","2","","219041","2021-02-15 14:36:41","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 16 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>⁸）⁸∔０；｛ＬＭ｝⁷；：＊⁸ｎ
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXUyMDc4JXVGRjA5JXUyMDc4JXUyMjE0JXVGRjEwJXVGRjFCJXVGRjVCJXVGRjJDJXVGRjJEJXVGRjVEJXUyMDc3JXVGRjFCJXVGRjFBJXVGRjBBJXUyMDc4JXVGRjRF,i=JTVCJTIyYWFhYWElMjIlMkMlMjIlMjIlMkMlMjJjJTIyJTVEJTBBJTIyeCUyMg__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<p>Takes an array of strings and a filler string as input.</p>
","80214","","","","","2021-02-15 14:36:41","","","","0","","","","CC BY-SA 4.0"
"219060","2","","219047","2021-02-15 15:03:14","","4","","<h1><a href=""https://petershaggynoble.github.io/Japt-Interpreter"" rel=""nofollow noreferrer"">Japt</a>, <Sup><s>12</s></sup> 10 <a href=""https://en.wikipedia.org/wiki/ISO/IEC_8859-1"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ÐKj +Ue3)i
</code></pre>
<p><a href=""https://petershaggynoble.github.io/Japt-Interpreter/?v=1.4.6&amp;code=0EtqICtVZTMpaQ&amp;input=MTAwMDAwMDAwMDAw"" rel=""nofollow noreferrer"">Try it</a></p>
<p>-2 bytes from AZTECCO.</p>
<p>This transpiles to the following JS:</p>
<pre><code>new Date(K.j() + U * 1e3).i()
</code></pre>
<p>where <code>K.j()</code> is the current time converted to milliseconds, <code>U</code> is the input, and <code>.i()</code> gets the year from the date constructor.</p>
","80214","","80214","","2021-02-16 04:20:44","2021-02-16 04:20:44","","","","3","","","","CC BY-SA 4.0"
"219112","2","","219109","2021-02-16 02:07:32","","6","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>16 13</s></sup> 11 bytes</h1>
<pre><code>ṁḋ↔Θ↑←¡ȯ←Lḋ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxoc7uh@1TTk341HbxEdtEw4tPLEeSPkARf///29kCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Outputs a flat boolean array.</p>
<p>-2 using the idea from Jonathan Allan's answer.</p>
<h2>Explanation</h2>
<pre><code>ṁḋ↔Θ↑←¡ȯ←Lḋ
      ¡ȯ    create an infinite list using:
         Lḋ length of binary digits
        ←   decremented  
    ↑       take the longest prefix with:
     ←       elements that aren't falsy when decremented(1)
   Θ        prepend 0 to that
  ↔         reverse
ṁḋ          convert each to binary and flatten
</code></pre>
","80214","","80214","","2021-02-16 03:04:45","2021-02-16 03:04:45","","","","0","","","","CC BY-SA 4.0"
"219115","2","","219109","2021-02-16 02:45:10","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 13 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>┴P&amp;:ë▄▒ë╙G²╟ì
</code></pre>
<p><a href=""https://staxlang.xyz/#p=c150263a89dcb189d347fdc78d&amp;i=1%0A2%0A3%0A4%0A5%0A6%0A7%0A8%0A21&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>A generator with a filter.</p>
","80214","","","","","2021-02-16 02:45:10","","","","0","","","","CC BY-SA 4.0"
"219126","2","","95409","2021-02-16 07:11:59","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>ṁȯ↔mΣC2g
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@HOxhPrH7VNyT232Nko/f///9FGOiBoAoQWsQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p><code>ṁ</code> is a lifesaver here.</p>
","80214","","","","","2021-02-16 07:11:59","","","","0","","","","CC BY-SA 4.0"
"219215","2","","122139","2021-02-17 09:11:34","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>7</s></sup> 6 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ç`5≡Tf
</code></pre>
<p><a href=""https://staxlang.xyz/#p=876035f05466&amp;i=%22Hello,+World%21%22%0A%22ABC%22%0A%22%3B%23%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","80214","","2021-04-07 12:09:44","2021-04-07 12:09:44","","","","0","","","","CC BY-SA 4.0"
"219216","2","","128895","2021-02-17 09:30:26","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 25 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ò≥◘■O║£/öτt≈K↔ì♂≈-⌂6=═°!b
</code></pre>
<p><a href=""https://staxlang.xyz/#p=95f208fe4fba9c2f94e774f74b1d8d0bf72d7f363dcdf82162&amp;i=%22Hello+world%21%22%0A%22Hello,+world%21%22%0A%224+8+15+16+23+42%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-02-17 09:30:26","","","","0","","","","CC BY-SA 4.0"
"219226","2","","219158","2021-02-17 10:35:29","","1","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, <sup><s>83 82 72</s></sup> 71 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>-&gt;n{k=(1..n).map{rand};p=k[~-s=0]/z=k.sum;[k.map{|x|s+=p*x/z;p=x/z},s]}
</code></pre>
<p><a href=""https://tio.run/##KypNqvyfZvtf1y6vOttWw1BPL09TLzexoLooMS@l1rrANju6TrfY1iBWv8o2W6@4NNc6OhssX1NRU6xtW6BVoV8FVAUka3WKY2v/FyikRZvG/gcA"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
<p>-4,-1,-6 from ASCII-only!</p>
<p>-4, shortening it further.</p>
<p>-1 more byte from ASCII-only.</p>
","80214","","80214","","2021-02-19 07:51:56","2021-02-19 07:51:56","","","","10","","","","CC BY-SA 4.0"
"219231","2","","89621","2021-02-17 11:25:58","","2","","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, 5 bytes</h1>
<pre><code>ka¦∑℅
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=&amp;code=ka%C2%A6%E2%88%91%E2%84%85&amp;inputs=&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
<p>same idea as the Pyth answer.</p>
","80214","","80214","","2021-04-09 02:21:44","2021-04-09 02:21:44","","","","3","","","","CC BY-SA 4.0"
"219245","2","","97374","2021-02-17 16:20:11","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 27 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>üµu█QZN/┴¶▬▲▌∙.h├û:╬πa⌠ú-Bq
</code></pre>
<p><a href=""https://staxlang.xyz/#p=81e675db515a4e2fc114161eddf92e68c3963acee361f4a32d4271&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Can be improved, definitely, just can't find a way to remove the register usage.</p>
<h2>Explanation</h2>
<pre><code>1AJDQ_^Y+X&quot;+-*&quot;{]xi^^%{ysl}{d}?F
1                                 push 1
 AJ                               push 10 squared
   D                              repeat the rest of the program 100 times
    Q                             print the current number
     _^                           iteration number
       Y                          store in Y
        +X                        add the two, store in X
          &quot;+-*&quot;{               F  for each of +,-,*
                ]                 convert to string
                 xi^^%            x modulo (iteration count + 2)
                      {   }   ?   if true:
                       ysl        push y and apply the operation
                           { }    else:
                            d     delete the operation
                         
                                 
</code></pre>
","80214","","80214","","2021-02-18 02:41:04","2021-02-18 02:41:04","","","","1","","","","CC BY-SA 4.0"
"219285","2","","219284","2021-02-18 06:31:09","","3","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><S>53</s></sup> 46 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>é♫▼V0⌂Ä╟ì⌡(Φzf■£┘╔╣T╘K*╪☻w²¥íÑ╧zv-¼Ö╨◘P♦ε♦íäq*
</code></pre>
<p><a href=""https://staxlang.xyz/#p=820e1f56307f8ec78df528e87a66fe9cd9c9b954d44b2ad80277fd9da1a5cf7a762dac99d0085004ee04a184712a&amp;irel=""nofollow noreferrer"">Run and debug it</a></p>
<p>I wasn't able to find an expression that matches the symbols, so those are hardcoded (and take a lot of space.)</p>
<h2>Explanation</h2>
<p><code>'?/{f{%_rh.-+I{&quot;@*&amp; ?!%/.:&quot;Vd+&quot;=+-&lt;&gt;&quot;+@}{63+}{96+}3l@!m</code></p>
<p><code>'?/</code> split on <code>?</code></p>
<p><code>{f</code> remove empty lists</p>
<p><code>{..m</code> map the strings to:</p>
<p><code>%</code> push the length of the match</p>
<p><code>_</code> push the match again</p>
<p><code>rDh</code> get the second to last character</p>
<p><code>.-+I</code> index of that in &quot;-+&quot;</p>
<p><code>@!</code> execute the corresponding block for the index:</p>
<p><code>{&quot;&lt;&gt;@*&amp; ?!%/.:&quot;Vd+&quot;=+-&quot;+@}{61+}{94+}3l</code> create a list of 3 blocks</p>
<p><code>{63+}</code> for <code>+</code>, add 63 to the length</p>
<p><code>{&quot;@*&amp; ?!%/.:&quot;Vd+&quot;=+-&lt;&gt;&quot;+@}</code> for <code>-</code>, index into <code>&lt;&gt;@*&amp; ?!%/.:0123456789=+-</code> using the length(modular)</p>
<p><code>{96+}</code> otherwise add 91</p>
","80214","","80214","","2021-02-18 08:46:12","2021-02-18 08:46:12","","","","0","","","","CC BY-SA 4.0"
"219286","2","","82815","2021-02-18 06:35:40","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 5 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>┬ΓΣ╞]
</code></pre>
<p><a href=""https://staxlang.xyz/#p=c2e2e4c65d&amp;i=1%0A2%0A3%0A4%0A5%0A6%0A7%0A8%0A9%0A10%0A11%0A12%0A13%0A14%0A15%0A16%0A17%0A18%0A19%0A20%0A21%0A22%0A23%0A24%0A25%0A26%0A27%0A28%0A29%0A30&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>6 bytes without packing.</p>
","80214","","","","","2021-02-18 06:35:40","","","","0","","","","CC BY-SA 4.0"
"219288","2","","82815","2021-02-18 06:49:58","","1","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v3</a>, 79 bytes</h1>
<pre><code>&gt; Input
&gt;&gt; 1!
&gt;&gt; 2∕R
&gt;&gt; (1]
&gt;&gt; Each 3 4
&gt;&gt; ∑5
&gt;&gt; 6⊓2
&gt;&gt; 2∕7
&gt;&gt; Output 8
</code></pre>
<p><a href=""https://tio.run/##K8/ILC5ILSo2@v/fTsEzr6C0hMvOTsFQEUQaPeqYGgRiaBjGgijXxOQMBWMFExD7UcdEUxBt9qhrshFMsTmI4V9aAjRFweL/f0MLAA"" rel=""nofollow noreferrer"" title=""Whispers v3 – Try It Online"">Try it online!</a></p>
<p>Same idea as Lynn's Jelly answer.</p>
","80214","","","","","2021-02-18 06:49:58","","","","0","","","","CC BY-SA 4.0"
"219292","2","","51471","2021-02-18 07:35:59","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 5 bytes</h1>
<pre><code>P'^)p
</code></pre>
<p><a href=""https://staxlang.xyz/#c=P%27%5E%29p&amp;i=2,%22Lorem+ipsum,+dollar+sit+amet.%22"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-02-18 07:35:59","","","","0","","","","CC BY-SA 4.0"
"219304","2","","219301","2021-02-18 10:13:34","","6","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s>7</s></sup> 6 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>⊢!1-⍨+
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=e9S1SNFQ91HvCm0A&amp;f=M1VIUzDkMgWSRgA&amp;i=AwA&amp;r=tryAPL&amp;l=apl-dyalog&amp;m=dfn&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a>, <a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=e9S1SF875lHv4kd9Ux/1bgaSAA&amp;f=AwA&amp;i=S@My5TLgSgOShmDSCAA&amp;r=tio&amp;l=apl-dyalog&amp;m=tradfn&amp;n=f"" rel=""nofollow noreferrer"">Old version(8 bytes)</a></p>
<p>-1 from rak1507.</p>
<p>A train submission which takes <code>n</code> on the left and <code>d</code> on the right.</p>
<p>Uses the combination based formula mentioned in the question comments.</p>
<p>1-indexed.</p>

<h2>Explanation</h2>
<pre><code>⊢!1-⍨+
     + n + d
  1-⍨  - 1
 !     choose
⊢      d
</code></pre>
","80214","","80214","","2021-02-18 13:15:25","2021-02-18 13:15:25","","","","1","","","","CC BY-SA 4.0"
"219309","2","","219301","2021-02-18 10:53:30","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>→!¡∫ḣ
</code></pre>
<p><a href=""https://tio.run/##ARgA5/9odXNr///ihpIhwqHiiKvhuKP///81/zI"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Same idea as my APL answer. Takes n and k, both 1 indexed, as command line args.</p>
","80214","","","","","2021-02-18 10:53:30","","","","0","","","","CC BY-SA 4.0"
"219314","2","","67860","2021-02-18 12:17:34","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 9 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>üvx`₧¥ⁿ∙√
</code></pre>
<p><a href=""https://staxlang.xyz/#p=817678609e9dfcf9fb&amp;i=9"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","66833","","2021-02-18 16:25:12","2021-02-18 16:25:12","","","","0","","","","CC BY-SA 4.0"
"219317","2","","219301","2021-02-18 13:14:07","","3","","<h1><a href=""https://github.com/cairdcoinheringaahing/Whispers"" rel=""nofollow noreferrer"">Whispers v2</a>, <sup><s>52</s></sup> 49 bytes</h1>
<pre><code>&gt; Input
&gt; Input
&gt;&gt; 1+2
&gt;&gt; ≺3
&gt;&gt; 4C2
&gt;&gt; Output 5
</code></pre>
<p><a href=""https://tio.run/##K8/ILC5ILSo2@v/fTsEzr6C0hAtO2ykYahuBqEedu4xBtIkzmOtfWgKUVzD9/9@UyxgA"" rel=""nofollow noreferrer"" title=""Whispers v2 – Try It Online"">Try it online!</a></p>
<p>Inputs the numbers from STDIN.</p>
<p>-3 bytes from  Michael Chatiskatzi.</p>
<p>If floating point output is not allowed, then <a href=""https://tio.run/##K8/ILC5ILSo2@v/fTsEzr6C0hAtBG3LZAQltIxBlomsMokydwbxHPR1mj3q6QUz/0hKgagXz//9NuYwB"" rel=""nofollow noreferrer"" title=""Whispers v2 – Try It Online"">63 bytes.</a></p>
","80214","","80214","","2021-02-21 09:30:44","2021-02-21 09:30:44","","","","1","","","","CC BY-SA 4.0"
"219388","2","","218543","2021-02-19 12:06:01","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>12</s></sup> 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>z1]Wn|uPbs2l
</code></pre>
<p><a href=""https://staxlang.xyz/#c=z1%5DWn%7CuPbs2l&amp;i=&amp;a=1&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>A bit long since the trees need to be printed as a string to be observed.</p>
<h2>Explanation</h2>
<pre><code>z1]Wn|uPbs2l
z1]            push empty list and [1] (base cases)
   W           loop forever
    n          copy the second to last element
     |u        uneval (JSON.Stringify)
       P       pop &amp; print with newline
        b      copy top two elements
         s     swap
          2l   two element list 
            
</code></pre>
","80214","","80214","","2021-02-19 12:14:15","2021-02-19 12:14:15","","","","0","","","","CC BY-SA 4.0"
"219419","2","","100411","2021-02-20 03:57:44","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 7 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ö÷e╧╤ù◘
</code></pre>
<p><a href=""https://staxlang.xyz/#p=94f665cfd19708&amp;i=%22ABCDEFGHIJKLMNOPQRSTUVWXYZ%22"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>|]miTiNt
|]m      map each suffix to:
   iT    remove iteration count elements from right
     iNt pad with iteration count number of spaces on left
</code></pre>
<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 117 bytes</h1>
<pre><code>c%{d
   xitiT|c
   {|,}20*|:xi{xitiTx%|CPFxP
   {|,}20*|:xi{xitiTx%|CPFxitiNtP
   {|,}20*|:xi{xitiTx%|CPFxitiTx%|CP
F
</code></pre>
<p><a href=""https://staxlang.xyz/#c=c%25%7Bd%0A+++xitiT%7Cc%0A+++%7B%7C,%7D20*%7C%3Axi%7BxitiTx%25%7CCPFxP%0A+++%7B%7C,%7D20*%7C%3Axi%7BxitiTx%25%7CCPFxitiNtP%0A+++%7B%7C,%7D20*%7C%3Axi%7BxitiTx%25%7CCPFxitiTx%25%7CCP%0AF&amp;i=%22ABCDEFGHIJKLMNOPQRSTUVWXYZ%21%22"" rel=""nofollow noreferrer"">Run and debug it, animated</a></p>
<p>The more fun version. Since stax supports <code>requestAnimationFrame</code> from js, <code>|,</code> and <code>|:</code> can be used to animate each step.</p>
","80214","","80214","","2021-02-20 07:28:53","2021-02-20 07:28:53","","","","0","","","","CC BY-SA 4.0"
"219422","2","","154108","2021-02-20 08:12:29","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>46</s></sup> 41 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>üîφL↑≥ª⌡↨ÄA ¡`╢Σ·TmÄ↕=≈─Xí♫αF²M☻8]▒2±(═[3
</code></pre>
<p><a href=""https://staxlang.xyz/#p=818ced4c18f2a6f5178e4120ad60b6e4fa546d8e123df7c458a10ee046fd4d02385db132f128cd5b33&amp;i=1%0A2%0A5%0A0%0A-2%0A-3%0A&amp;a=1&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p><code>|,</code> was included in a <a href=""https://github.com/tomtheisen/stax/releases/tag/v1.2.0"" rel=""nofollow noreferrer"">recent release</a>, which is great for this challenge!</p>
<p>Uses JS <code>requestAnimationFrame</code> for pausing between snips.</p>
<p>Each testcase happens continuously after the other, so if you want a more clear version, <a href=""https://staxlang.xyz/#c=c%7Ca%5E5%3Fr%7Bxs0%3FY.%3C%3D%7B%27-y*%278%2Bs%2Bx%7Ca%5E%5E%28x%7Bx%3A%2B*%7DM.%3C8.%3E8R%7B%7C,%7D9*%7C%3A%22Testcase%3A+%22pxPpFFzP%22Complete%21%22P%7B%7C,%7DAJ*&amp;i=1%0A2%0A5%0A0%0A-2%0A-3%0A&amp;m=2"" rel=""nofollow noreferrer"">try this!</a>.</p>
<p>-5 bytes from recursive. (<code>:R</code>)</p>
<h2>Explanation</h2>
<p><code>c|a^5?rFxs0?.&lt;={n'-*'8+s+x|a^^(x0&lt;{:R}M{|,}9*|:pF</code></p>
<p><code>c|a^5?</code> initial zero check:</p>
<p><code>     ?</code> if the input is truthy</p>
<p><code>|a^ </code> take abs(n) and increment</p>
<p><code>   5</code> otherwise push 5</p>
<p><code>r</code> range 0..n-1</p>
<p><code>F</code> for each value in the range,</p>
<p><code>xs0?</code> <strong>r:</strong> if input is 0, then push 0, otherwise push loop iteration no.</p>
<p><code>.&lt;={...F</code>for each value in &quot;&lt;=&quot;,</p>
<p><code>n'_*</code> repeat &quot;_&quot; r times</p>
<p><code>'8+</code> add 8 to that</p>
<p><code>s+</code> add current loop iteration to that</p>
<p><code>x|a^^</code> take abs(input) and increment twice</p>
<p><code>(</code> pad on right to that length</p>
<p><code>x0&lt;{...}M</code> if input is less than 0</p>
<p><code>:R</code> reflect the string (<code>&lt;</code> → <code>&gt;</code>)</p>
<p><code>{|,}9*</code> delay 9 frames</p>
<p><code>|:</code> output a form feed (clear screen)</p>
<p><code>p</code> print the string without newline</p>
","80214","","80214","","2021-02-21 03:00:07","2021-02-21 03:00:07","","","","0","","","","CC BY-SA 4.0"
"219445","2","","114305","2021-02-21 06:11:04","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 7 bytes</h1>
<pre><code>∫:←¹OẊ-
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HHaqtHbRMO7fR/uKtL9////9GGOqY6usY6RjqWsQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-02-21 06:11:04","","","","0","","","","CC BY-SA 4.0"
"219454","2","","135296","2021-02-21 13:54:20","","1","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 14 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>４Ｈ┐⁸ｋ⁸±＼＋⁸Ｌ１╋↶
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjE0JXVGRjI4JXUyNTEwJXUyMDc4JXVGRjRCJXUyMDc4JUIxJXVGRjNDJXVGRjBCJXUyMDc4JXVGRjJDJXVGRjExJXUyNTRCJXUyMUI2,i=JTIyY29kZSUyMGdvbGYlMjI_,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2021-02-21 13:54:20","","","","0","","","","CC BY-SA 4.0"
"219458","2","","50472","2021-02-21 16:47:42","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>5</s></sup> 4 bytes</h1>
<pre><code>Ë´Ṫ=
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//3D3oS0Pd66y/f//f7SSa3CIY4irko6SS6irj6uLUiwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-1 byte from Leo using ბიმო's answer.</p>
<h2>Explanation</h2>
<pre><code>Ë´Ṫ=
Ë    check if all the elements are equal by the following predicate:
 ´Ṫ  cartesian product with self
   = by equality
</code></pre>
","80214","","80214","","2021-02-22 06:33:05","2021-02-22 06:33:05","","","","5","","","","CC BY-SA 4.0"
"219484","2","","219468","2021-02-22 05:38:20","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 17 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>àkÑ╣±╫¬ò^Ü▌}├n╒/ñ
</code></pre>
<p><a href=""https://staxlang.xyz/#p=856ba5b9f1d7aa955e9add7dc36ed52fa4&amp;i=%5B%5D%0A%5B0%5D%0A%5B0,0%5D%0A%5B0,0,1,0,0%5D%0A%5B1,0,1,0,0,1,0,1,0,1,0,0%5D%0A%5B1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0%5D%0A%5B1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,0,1,0,0,0,0,1,0,1,0%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Input as an array of bits.</p>
<p>An almost direct translation of the reference implementation.</p>
<h2>Explanation</h2>
<pre><code>W|cO{B|csa%aa+:bsWsP
W|c                  while S is truthy:
   O                 push a 1 under it (N)
    {            W   loop forever
                     stack: [N,S]
     B               pop first bit from S and push it
                     stack: [N,S,b]
      |c             break if it's falsy
        s            swap
         a%          split the list at index N
           aa+       prepend b to the first part
              :b     convert from binary
                s    swap for the next iteration
                  sP print N after the loop ends
</code></pre>
","80214","","","","","2021-02-22 05:38:20","","","","0","","","","CC BY-SA 4.0"
"219485","2","","1294","2021-02-22 05:45:00","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 2 bytes</h1>
<pre><code>€P
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HTmoD///@X5xel/C8vSskHAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Returns index of the permutation found, or 0.</p>
","80214","","","","","2021-02-22 05:45:00","","","","0","","","","CC BY-SA 4.0"
"219509","2","","219495","2021-02-22 16:49:04","","6","","<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, 42 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>$&gt;&lt;&lt;[3/3,6/3,'miss a few',33*3,5*5*4]*&quot;, &quot;
</code></pre>
<p><a href=""https://tio.run/##KypNqvz/X8XOxibaWN9YxwyI1XMzi4sVEhXSUsvVdYyNtYx1TLVMtUxitZR0FJT@/wcA"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
<p>-4 from Jonah. Borrows from Arnauld's answer.</p>
<h1><a href=""https://www.ruby-lang.org/"" rel=""nofollow noreferrer"">Ruby</a>, <sup><s>46</s></sup> 44 bytes</h1>

<pre class=""lang-ruby prettyprint-override""><code>$&gt;&lt;&lt;""&#1;&#2;cd"".bytes.insert(2,""miss a few"")*"", ""
</code></pre>
<p><a href=""https://tio.run/##KypNqvz/X8XOxkaJkSk5RUkvqbIktVgvM684tahEw0hHKTezuFghUSEttVxJU0tJR0Hp/38A"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Try it online!</a></p>
<p>The three unprintables for codepoints 1, 2 and 3 are in the string  containing &quot;cd&quot;.</p>
<p>-2 from manatwork. <a href=""https://tio.run/##KypNqvz/v9hWiZGJOTlFSS@psiS1mKs42ijWVik3s7hYIVEhLbVciUvFzsamWEtJR0Hp/38A"" rel=""nofollow noreferrer"" title=""Ruby – Try It Online"">Other version with same bytecount</a></p>
","80214","","80214","","2021-02-23 03:27:48","2021-02-23 03:27:48","","","","4","","","","CC BY-SA 4.0"
"219552","2","","2263","2021-02-23 06:29:18","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>LU¡o§*LΣp
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3yf00ML8Q8u1fM4tLvj//7@hAQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##yygtzv6f@6ip8eGOxYYG/31CDy3MP7Rcy@fc4oL//wE"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify first 10 tests</a></p>
<h2>Explanation</h2>
<pre><code>LU¡o§*LΣp input → n
  ¡o      create an infinite list:
        p get the prime factors
      L   length
    §*    times
       Σ  sum
 U        longest unique prefix of the infinite list
L         length of the prefix
</code></pre>
","80214","","","","","2021-02-23 06:29:18","","","","0","","","","CC BY-SA 4.0"
"219594","2","","219576","2021-02-23 16:32:09","","3","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s></s></sup>8 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>⍳⎕UCS'e'
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=e9Q31dP/UdsEAwA&amp;c=e9S7@VHf1FDnYPVUdQA&amp;f=AwA&amp;i=AwA&amp;r=tryAPL&amp;l=apl-dyalog&amp;m=tradfn&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a></p>
<p>A tradfn submission which prints with space separator.</p>
","80214","","80214","","2021-02-23 17:01:03","2021-02-23 17:01:03","","","","0","","","","CC BY-SA 4.0"
"219645","2","","219631","2021-02-24 02:06:17","","8","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""noreferrer"">Stax</a>, <sup><s>6</s></sup> 5 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""noreferrer"">bytes</a></h1>
<pre><code>°º☻¿_
</code></pre>
<p><a href=""https://staxlang.xyz/#p=f8a702a85f&amp;i=1+,+%5B7,3,3,9%5D%0A1+,+%5B4,1,7,7,4,2,1%5D%0A2+,+%5B6,9,7,6,7,9,9%5D%0A2+,+%5B6,5,3,9,4,9,6,9%5D%0A1+,+%5B4,8,9,7,3,1,7,5,4,6%5D%0A1+,+%5B5,6,7,8,1,7,3,3,6,4%5D%0A2+,+%5B2,3,8,1,6,4,8,2,8,3%5D%0A1+,+%5B4,1,4,4,2,4,4,5,7,1,3%5D%0A3+,+%5B1,5,5,2,5,1,4,1,6,7,7,6,9,8,8,1,7,8,1,3,1,1,7,4%5D%0A3+,+%5B8,8,6,2,9,6,4,7,1,2,9,5,5,6,6,2,5,8,9,1,2,8,4,4,7,2,1,1%5D%0A4+,+%5B8,8,4,9,7,1,2,9,8,8,5,2,2,9,1,7,4,6,6,8,6,6,1,6,1,9,2,8,5,1,2,6,1,7,6,4,7,9%5D%0A2+,+%5B8,8,9,2,7,4,7,5,6,9,7,2,7,7,6,2,6,9,6,3,5,1,1,6,2,8,7,4,2,4,5,9,3,3,3,3,7,4,8,7,5,4,1,4,7,8%5D%0A4+,+%5B6,8,1,8,6,9,2,2,5,8,7,6,2,5,4,3,3,1,4,2,7,1,6,3,9,8,9,5,2,6,8,8,7,7,5,2,5,1,4,7,5,5,3,7,6,3,7,6,3,6,7%5D%0A2+,+%5B1,3,5,6,1,2,8,8,8,4,4,4,5,8,9,9,6,4,5,3,8,7,9,7,8,6,1,6,1,6,4,5,5,3,9,3,5,4,2,1,6,6,5,4,2,6,2,1,1,1,5,5%5D%0A9+,+%5B9,9,9,4,6,1,5,4,5,3,7,9,8,9,8,2,9,1,3,4,9,5,8,7,8,6,1,9,9,5,1,3,1,9,5,7,3,5,9,6,6,2,2,4,1,4,2,1,7,5,3,7,9,8,2,3,1,6%5D%0A5+,+%5B9,6,3,5,5,2,8,2,9,6,7,9,5,3,1,1,1,3,6,9,4,3,6,9,2,2,3,7,5,3,9,5,2,1,1,1,1,6,2,2,4,6,1,5,7,3,7,9,5,3,1,2,6,4,3,1,7,9,3,8,5,2,4,2,8,2,6,7,3,9,1,7,9,4,7,4%5D%0A8+,+%5B7,1,8,2,2,1,4,9,8,6,5,1,9,7,5,5,8,1,7,8,6,8,5,9,3,2,7,9,4,3,9,1,5,2,5,7,8,5,2,6,6,2,7,6,2,9,3,3,5,3,7,9,8,7,3,6,7,4,6,1,4,5,8,9,8,6,9,1,1,1,8,2,4,2,9,3,4,2,9,6%5D%0A11+,+%5B7,2,8,9,7,5,1,4,6,8,6,9,1,8,6,2,2,6,1,1,6,8,4,5,2,6,5,5,4,5,5,3,6,8,3,7,9,3,9,8,4,9,6,7,2,7,9,2,4,8,3,3,2,5,9,1,4,6,4,8,2,5,8,6,8,1,8,3,3,9,4,8,1,1,2,9,1,9,3,3,7%5D%0A11+,+%5B7,7,6,5,9,7,2,6,1,4,4,5,4,3,1,7,5,5,8,1,6,3,9,3,3,9,5,9,1,2,4,3,8,2,6,6,5,2,8,7,5,6,5,7,3,2,5,3,5,8,6,1,9,7,4,3,9,8,2,4,5,7,8,8,2,8,1,8,7,8,7,6,3,8,6,7,9,4,6,1,6,1,2,5,6,7,7,2,8,3,2,1,7%5D%0A7+,+%5B3,4,1,1,2,4,4,8,4,9,1,1,7,7,6,8,6,2,9,4,2,9,9,7,5,7,6,5,3,7,6,6,1,9,1,5,2,4,9,6,1,5,4,1,7,2,4,3,8,5,1,9,5,9,1,7,4,7,3,1,2,1,3,8,7,9,2,5,1,6,2,4,5,9,1,5,5,5,2,6,3,7,2,2,5,7,6,8,3,7,5,9,3,3,9%5D%0A&amp;m=2"" rel=""noreferrer"">Run and debug it</a></p>
<p>Output as a string of codepoints(since stax prints all numeric arrays as strings). <a href=""https://staxlang.xyz/#c=cua*%7CbJ&amp;i=1+,+%5B7,3,3,9%5D%0A1+,+%5B4,1,7,7,4,2,1%5D%0A2+,+%5B6,9,7,6,7,9,9%5D%0A2+,+%5B6,5,3,9,4,9,6,9%5D%0A1+,+%5B4,8,9,7,3,1,7,5,4,6%5D%0A1+,+%5B5,6,7,8,1,7,3,3,6,4%5D%0A2+,+%5B2,3,8,1,6,4,8,2,8,3%5D%0A1+,+%5B4,1,4,4,2,4,4,5,7,1,3%5D%0A3+,+%5B1,5,5,2,5,1,4,1,6,7,7,6,9,8,8,1,7,8,1,3,1,1,7,4%5D%0A3+,+%5B8,8,6,2,9,6,4,7,1,2,9,5,5,6,6,2,5,8,9,1,2,8,4,4,7,2,1,1%5D%0A4+,+%5B8,8,4,9,7,1,2,9,8,8,5,2,2,9,1,7,4,6,6,8,6,6,1,6,1,9,2,8,5,1,2,6,1,7,6,4,7,9%5D%0A2+,+%5B8,8,9,2,7,4,7,5,6,9,7,2,7,7,6,2,6,9,6,3,5,1,1,6,2,8,7,4,2,4,5,9,3,3,3,3,7,4,8,7,5,4,1,4,7,8%5D%0A4+,+%5B6,8,1,8,6,9,2,2,5,8,7,6,2,5,4,3,3,1,4,2,7,1,6,3,9,8,9,5,2,6,8,8,7,7,5,2,5,1,4,7,5,5,3,7,6,3,7,6,3,6,7%5D%0A2+,+%5B1,3,5,6,1,2,8,8,8,4,4,4,5,8,9,9,6,4,5,3,8,7,9,7,8,6,1,6,1,6,4,5,5,3,9,3,5,4,2,1,6,6,5,4,2,6,2,1,1,1,5,5%5D%0A9+,+%5B9,9,9,4,6,1,5,4,5,3,7,9,8,9,8,2,9,1,3,4,9,5,8,7,8,6,1,9,9,5,1,3,1,9,5,7,3,5,9,6,6,2,2,4,1,4,2,1,7,5,3,7,9,8,2,3,1,6%5D%0A5+,+%5B9,6,3,5,5,2,8,2,9,6,7,9,5,3,1,1,1,3,6,9,4,3,6,9,2,2,3,7,5,3,9,5,2,1,1,1,1,6,2,2,4,6,1,5,7,3,7,9,5,3,1,2,6,4,3,1,7,9,3,8,5,2,4,2,8,2,6,7,3,9,1,7,9,4,7,4%5D%0A8+,+%5B7,1,8,2,2,1,4,9,8,6,5,1,9,7,5,5,8,1,7,8,6,8,5,9,3,2,7,9,4,3,9,1,5,2,5,7,8,5,2,6,6,2,7,6,2,9,3,3,5,3,7,9,8,7,3,6,7,4,6,1,4,5,8,9,8,6,9,1,1,1,8,2,4,2,9,3,4,2,9,6%5D%0A11+,+%5B7,2,8,9,7,5,1,4,6,8,6,9,1,8,6,2,2,6,1,1,6,8,4,5,2,6,5,5,4,5,5,3,6,8,3,7,9,3,9,8,4,9,6,7,2,7,9,2,4,8,3,3,2,5,9,1,4,6,4,8,2,5,8,6,8,1,8,3,3,9,4,8,1,1,2,9,1,9,3,3,7%5D%0A11+,+%5B7,7,6,5,9,7,2,6,1,4,4,5,4,3,1,7,5,5,8,1,6,3,9,3,3,9,5,9,1,2,4,3,8,2,6,6,5,2,8,7,5,6,5,7,3,2,5,3,5,8,6,1,9,7,4,3,9,8,2,4,5,7,8,8,2,8,1,8,7,8,7,6,3,8,6,7,9,4,6,1,6,1,2,5,6,7,7,2,8,3,2,1,7%5D%0A7+,+%5B3,4,1,1,2,4,4,8,4,9,1,1,7,7,6,8,6,2,9,4,2,9,9,7,5,7,6,5,3,7,6,6,1,9,1,5,2,4,9,6,1,5,4,1,7,2,4,3,8,5,1,9,5,9,1,7,4,7,3,1,2,1,3,8,7,9,2,5,1,6,2,4,5,9,1,5,5,5,2,6,3,7,2,2,5,7,6,8,3,7,5,9,3,3,9%5D%0A&amp;m=2"" rel=""noreferrer"">Verifiable version</a></p>
<h2>Explanation</h2>
<pre><code>cua*|b
c       copy the list
 u      uniquify
  a     bring the count to the top
   *    repeat the elements n times
    |b  multiset intersect
</code></pre>
","80214","","80214","","2021-02-24 02:40:52","2021-02-24 02:40:52","","","","0","","","","CC BY-SA 4.0"
"219663","2","","219661","2021-02-24 05:00:01","","6","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>8</s></sup> 6 bytes</h1>
<pre><code>←VE¡Ẋ-
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HbhDDXQwsf7urS/f//f7ShiY6Jjq6Rji6IjAUA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Leo.</p>
<h2>Explanation</h2>
<pre><code>←VE¡Ẋ- Input: list of P(x)
   ¡Ẋ- repeatedly take deltas and put in infinite list
 V     First index where
  E    all elements are equal
←      decrement
</code></pre>
","80214","","80214","","2021-02-24 06:14:48","2021-02-24 06:14:48","","","","2","","","","CC BY-SA 4.0"
"219669","2","","219661","2021-02-24 05:43:19","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>9</s></sup> 8 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>▓&gt;ⁿⁿ∟╔♪╒
</code></pre>
<p><a href=""https://staxlang.xyz/#p=b23efcfc1cc90dd5&amp;i=%5B8,8,8%5D%0A%5B0,0,0%5D%0A%5B0,1%5D%0A%5B0,2,4,6,8%5D%0A%5B-20,-12,-6%5D%0A%5B1296,2401,4096,6561,10000%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Same idea as my Husk answer. Takes input as P(x) alone.</p>
<h2>Explanation</h2>
<pre><code>{uD}{:-gf% 
       g   generate values till:
        f  a value fails the filter
{  }       filter:
 u         uniquify the list
  D        and delete first element
    {  g   generator:
     :-    take deltas of the previous iteration
         % take the length of the generated list
</code></pre>
","80214","","80214","","2021-02-24 05:50:03","2021-02-24 05:50:03","","","","0","","","","CC BY-SA 4.0"
"219707","2","","219693","2021-02-24 10:27:59","","3","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>19</s></sup> 16 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Å;√∩b₧Aµ╗∞q«J,╕*
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8f3bfbef629e41e6bbec71ae4a2cb82a&amp;i=It+was+the+first+new+century.%0A%0AIiIIiiIIiiiI+Ii+iI+iiiI+iiii+iIi.%0A%0AI+sueD+the+airport+for+misplacing+my+Luggage.+%E2%80%93+I+lost+my+Case.%0A%0AThe+Policemen++CraCked+THE+CaSE+of+the+lost+cocaIne.%0A%0AJUST+IN+CASE.%0A%0AIf%28%211%29%7B+%2F%5ChElloBinOLIngo%7DelsE%7B+print%28+%27bOn+aPPetit%27%29%7D%0A%0AxK%2FTH%22E7k%5B%27VyO%25t%3E2%60%26%7BB9X.8%5E%24GWc%3D%21%2B%40+3Us%7D%5DJFM%29jbuI,-%3AalPw*Qvpq5zi%5CZ%28_n1dC%7E%3F%3C%3BfDAm0SR%7CeYg6%23rN4Lho%0A%0AFoo_bar%0A&amp;m=1"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Replaces each match of <code>[A-Za-z]+</code> using the ruleset.</p>
<p>-3, borrowing the untruth idea from Jonathan Allan's answer.</p>
<h2>Explanation</h2>
<pre><code>V^{c{96&lt;mr:1{]^}&amp;}R implicit input of string
V^                  regex: &quot;[A-Za-z]+&quot;
  {c{96&lt;mr:1{]^}&amp;}R replace each occurrence with the following regex:
   c                copy the match
    {96&lt;m           boolean array for uppercase letters
         r:1        reverse and take truthy indices
            {]^}&amp;   uppercase the match at those indices
</code></pre>
","80214","","80214","","2021-02-24 13:10:37","2021-02-24 13:10:37","","","","0","","","","CC BY-SA 4.0"
"219718","2","","79007","2021-02-24 13:32:30","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>#oΛtgπ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/Xzn/3OyS9PMN////N/lvDAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>#oΛtgπ
     π cartesian power n of range 1..r
#o     number of lists which satisfy
    g   adjacent elements grouped
  Λ     all the groups
   t    are non empty when popped from
</code></pre>
","80214","","","","","2021-02-24 13:32:30","","","","0","","","","CC BY-SA 4.0"
"219757","2","","138436","2021-02-25 02:18:20","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 19 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╛5%Ö←Äⁿ¿æ╔Dë!é╔J╗yì
</code></pre>
<p><a href=""https://staxlang.xyz/#p=be3525991b8efca891c944892182c94abb798d&amp;i=0%0A1%0A2%0A3%0A4%0A5%0A10&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>zipping takes a lot of bytes.</p>
","80214","","","","","2021-02-25 02:18:20","","","","0","","","","CC BY-SA 4.0"
"219781","2","","1600","2021-02-25 11:04:16","","1","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s></s></sup>108 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>{'@'@(⊂9 11○⊃⍵)⊢3⊃⍵}{p s g←⍵⋄(p+s)(s←s×0j1×¯1 1['#_'⍳g[x]])(('_#'~g[x])@(x←⊂9 11○p)⊢g)}⍣⎕⊢9J9 0J1(17 17⍴'_')
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=q1Z3UHfQeNTVZKlgaPhoevejruZHvVs1H3UtMoYwa6sLFIoV0h@1TQByHnW3aBRoF2tqFAP5xYenG2QZHp5@aL2hgmG0unK8@qPezenRFbGxmhoa6vHK6nUgjqaDRgVIM9yGApDh6Zq1j3oXP@qbCmRbelkqGHgZahiaKxiaP@rdoh6vrgkA&amp;f=AwA&amp;i=S@MyMTUAAA&amp;r=tio&amp;l=apl-dyalog&amp;m=tradfn&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a>, <a href=""https://razetime.github.io/APLgolf/?h=e9Q31dP/UdsEAwA&amp;c=q9ZQd1DXUVdW13/Uu@JR5yKjR13Nj3q3ajpoWCoYGj7qmPFoevehFY86uoCC0QYKRrGaj7oWGZorGJo/6t2iHq9eW12gUKyQ/qhtAlDBo@4WjQLtYk2NYiC/@PB0gyzDw9MPrTdUMIwuABqRHqup8ai3z/BRz171gnSgrTp16jCJ2ke9ix/1TQUabuFloWDgZfiodw0A&amp;f=AwA&amp;i=S@MyMTUAAA&amp;r=tio&amp;l=apl-dyalog&amp;m=tradfn&amp;n=f"" rel=""nofollow noreferrer"">Alternate version</a></p>
<p>A tradfn submission which takes a single number as input.</p>
","80214","","80214","","2021-02-25 11:48:05","2021-02-25 11:48:05","","","","0","","","","CC BY-SA 4.0"
"219802","2","","101289","2021-02-26 07:33:41","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 24 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ñ!Δ╚«&amp;╖ô^ô◙⌠≈%&lt;╗∞█z9ÖºOT
</code></pre>
<p><a href=""https://staxlang.xyz/#p=a521ffc8ae26b7935e930af4f7253cbbecdb7a3999a74f54&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Delays 15 frames between each change, which at default 60fps should be equal to 1/4th of a second.</p>
<h2>Explanation</h2>
<pre><code>W`lAtv&gt;!`&quot;|/-\&quot;{[+p{|,}15*|:F
W                             loop forever
 `lAtv&gt;!`                     push &quot;Loading... &quot;
         &quot;|/-\&quot;{            F for each char in &quot;|/-\&quot;
                [+p           add to Loading and print
                   {|,}15*    delay 1 frame 15 times
                          |:  clear the screen
</code></pre>
","80214","","","","","2021-02-26 07:33:41","","","","0","","","","CC BY-SA 4.0"
"219803","2","","120216","2021-02-26 08:02:55","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 18 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Θo░a↑▐»xr←9hV╣ä&amp;N╞
</code></pre>
<p><a href=""https://staxlang.xyz/#p=e96fb06118deaf78721b396856b984264ec6&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-02-26 08:02:55","","","","0","","","","CC BY-SA 4.0"
"219804","2","","109897","2021-02-26 08:08:17","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 22 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>▒4↓σ┘«☼⌡♥Åα≡♂%Ç$K¥╞▲▓►
</code></pre>
<p><a href=""https://staxlang.xyz/#p=b13419e5d9ae0ff5038fe0f00b2580244b9dc61eb210&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>delaying takes a lotta bytes.</p>
","80214","","","","","2021-02-26 08:08:17","","","","0","","","","CC BY-SA 4.0"
"219807","2","","102719","2021-02-26 08:43:10","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 38 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ç²kτ,e7rà♠Çƒ╜?║í▬u╬wπ■&amp;Jµⁿj↨▄!=╢╡═+ZWu
</code></pre>
<p><a href=""https://staxlang.xyz/#p=87fd6be72c6537728506809fbd3fbaa11675ce77e3fe264ae6fc6a17dc213db6b5cd2b5a5775&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Took some shuffling around and <code>:B</code> to beat the MATL score.</p>
<h2>Explanation</h2>
<pre><code>. *9*&quot;!1$'YKaK968&quot;%13|E:B16/WcM|)Ms{|,}6*|:m5* 
. *                                            &quot; *&quot;
   9*                                          repeat 9 times
     &quot;!1$'YKaK968&quot;%13|E                        compressed run lengths of wave
                       :B                      run length decode using the two arrays
                         16/                   split in groups of 16
                            W                  loop forever
                             c                 copy the wave
                              M|)M             shift right
                                  s            swap
                                   {|,}6*      wait 6 frames(0.1s at 60fps)
                                         m5*   pop, repeat each line 5 times and display  
</code></pre>
","80214","","","","","2021-02-26 08:43:10","","","","0","","","","CC BY-SA 4.0"
"219848","2","","63834","2021-02-26 17:32:22","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 3 bytes</h1>
<pre><code>VIm
</code></pre>
<p><a href=""https://staxlang.xyz/#c=VIm&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>the other Stax answer is invalid since it starts from zero. This is shorter, anyway.</p>
","80214","","","","","2021-02-26 17:32:22","","","","1","","","","CC BY-SA 4.0"
"219908","2","","85666","2021-02-27 13:40:25","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 7 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ë½óG╨}S
</code></pre>
<p><a href=""https://staxlang.xyz/#p=89aba247d07d53&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-02-27 13:40:25","","","","0","","","","CC BY-SA 4.0"
"219909","2","","32541","2021-02-27 14:00:37","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 18 bytes</h1>
<pre><code>mȯJ'=§eo;←osL►Lk←g
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/fEei9120PLU/OtH7VNyC/2eTRtl082kJn@//9/pcTkpMTEpCQgAQTJyUoA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>11 bytes if we ignore the exact input format and display as a list of pairs instead.</p>
","80214","","","","","2021-02-27 14:00:37","","","","1","","","","CC BY-SA 4.0"
"219941","2","","136933","2021-02-28 06:53:18","","4","","<h1><a href=""https://github.com/Lyxal/Vyxal"" rel=""nofollow noreferrer"">Vyxal</a>, <code>s</code>, 2 bytes</h1>
<pre><code>ƛṘ
</code></pre>
<p><a href=""http://lyxal.pythonanywhere.com?flags=s&amp;code=%C6%9B%E1%B9%98&amp;inputs=10&amp;header=&amp;footer="" rel=""nofollow noreferrer"">Try it Online!</a></p>
","80214","","80214","","2021-04-10 03:28:00","2021-04-10 03:28:00","","","","5","","","","CC BY-SA 4.0"
"219960","2","","219945","2021-02-28 11:22:23","","2","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 8 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｚ｛²Ｏ. ｏｏ
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjNBJXVGRjVCJUIyJXVGRjJGLiUyMCV1RkY0RiV1RkY0Rg__,v=8"" rel=""nofollow noreferrer"">Try it here!</a>, <a href=""https://dzaima.github.io/Canvas/?u=JXVGRjNBJXVGRjVCJUIyLiUyMCV1MjUxOCV1RkYwOSV1RkYzRA__,v=8"" rel=""nofollow noreferrer"">alternate version</a></p>
<p>The only reason this is shorter than charcoal is because it's got a 1-indexed iteration count.</p>
<h2>Explanation</h2>
<pre><code>Z{²O. oo
Z{       loop over the alphabet
  ²O     output the iteration number
    . o  output &quot;. &quot;
       o output the current letter     
</code></pre>
","80214","","80214","","2021-02-28 11:36:03","2021-02-28 11:36:03","","","","0","","","","CC BY-SA 4.0"
"219967","2","","219945","2021-02-28 11:43:57","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>9</sup></s> 8 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>τ┌Z*µ╝╘Q
</code></pre>
<p><a href=""https://staxlang.xyz/#p=e7da5a2ae6bcd451&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","80214","","2021-02-28 11:52:19","2021-02-28 11:52:19","","","","0","","","","CC BY-SA 4.0"
"220005","2","","31822","2021-03-01 03:11:02","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 11 bytes</h1>
<pre><code>!fo=2F≠Ẋeİp
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/XzEt39bI7VHngoe7ulKPbCj4//@/MQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>non-competing, since it takes input from arguments rather than STDIN.</p>
<p>Returns a 2-element list.</p>
<p>Interesting version using <code>Ψ</code>: <a href=""https://tio.run/##yygtzv7/P1hH20jx3Iq0fFujR50Ljmwo@P//vzEA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-03-01 03:11:02","","","","0","","","","CC BY-SA 4.0"
"220009","2","","61154","2021-03-01 07:32:34","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>11</s></sup> 8 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>┤6╧ß╡⌠░$
</code></pre>
<p><a href=""https://staxlang.xyz/#p=b436cfe1b5f4b024&amp;i=%5B%5B0,+%22Hello%22%5D,+%5B8,+%22World%22%5D,+%5B3,+%22Fizz%22%5D,+%5B5,+%22Buzz%22%5D,+%5B16,+%22PPCG%22%5D,+%5B9,+%22X%22%5D%5D%0A%5B%5B10,+%22OneLabel%22%5D%5D%0A%5B%5B0,+%22Heathrow%22%5D,+%5B2,+%22Edinburgh%22%5D,+%5B4,+%22London%22%5D,+%5B6,+%22Liverpool%22%5D,+%5B8,+%22Oxford%22%5D%5D%0A%5B%5B20,+%22alpha%22%5D,+%5B4,+%22beta%22%5D,+%5B57,+%22gamma%22%5D,+%5B3,+%22delta%22%5D,+%5B22,+%22epsilon%22%5D,+%5B32,+%22zeta%22%5D,+%5B53,+%22eta%22%5D,%5B27,+%22theta%22%5D%5D%0A%5B%5B5,+%22abc%22%5D,+%5B5,+%22d%22%5D,+%5B10,+%22abc%22%5D,+%5B127,+%22ABCDEFGHIJKLMNOPQRSTUVWXYZ%22%5D%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Takes input as a list of pairs <code>[coordinate, label]</code>. Thanks to caird coinheringaahing for the testcases.</p>
<h2>Explanation</h2>
<pre><code>zsFE'*s+|%
zs            push empty list and swap with the input
  F           for each element,
   E          push each item onto stack
    '*s+      add asterisk to label
              Stack: [index,label]
        |%    embed in the array
</code></pre>
","80214","","80214","","2021-04-07 02:25:23","2021-04-07 02:25:23","","","","0","","","","CC BY-SA 4.0"
"220010","2","","61154","2021-03-01 07:44:06","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 9 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ｈ｛｝０┘*；＋╋
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjI4JXVGRjVCJXVGRjVEJXVGRjEwJXUyNTE4KiV1RkYxQiV1RkYwQiV1MjU0Qg__,i=JTVCJTVCJTIySGVsbG8lMjIlMkMwJTVEJTJDJTVCJTIyV29ybGQlMjIlMkM4JTVEJTJDJTVCJTIyRml6eiUyMiUyQzMlNUQlMkMlNUIlMjJCdXp6JTIyJTJDNSU1RCUyQyU1QiUyMlBQQ0clMjIlMkMxNiU1RCUyQyU1QiUyMlglMjIlMkM5JTVEJTVE,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<p>Same as my Stax answer, except canvas is better at grid overlaps.</p>
","80214","","","","","2021-03-01 07:44:06","","","","0","","","","CC BY-SA 4.0"
"220067","2","","220032","2021-03-02 02:06:31","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 13 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü╩╔◘8┌╜♀ñêP=e
</code></pre>
<p><a href=""https://staxlang.xyz/#p=81cac90838dabd0ca488503d65&amp;i=3,10"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>the divisor sum part takes a lot of space due to two byte builtins.</p>
<p>Outputs the sequence for <code>m,k</code> infinitely.</p>
","80214","","","","","2021-03-02 02:06:31","","","","0","","","","CC BY-SA 4.0"
"220147","2","","67044","2021-03-03 08:09:06","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 2 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ç'
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8727&amp;i=%22abcdefghijklmnopqrstuvwxyz%22+1%0A%22Spam+spam+spam+sausage+and+spam%21%22+13&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-03-03 08:09:06","","","","2","","","","CC BY-SA 4.0"
"220163","2","","220159","2021-03-03 15:33:38","","7","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""noreferrer"">Husk</a>, 17 bytes</h1>
<pre><code>¡λVoΛoS≠⌊√M≠⁰N);0
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/qG2iocGjpsb/hxae2x2Wf252fvCjzgWPeroedczyBbEaN/hpWhv8/w8A"" rel=""noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Returns an infinite list. The header is used to take 10 elements from it so the result can be displayed.</p>
<h2>Explanation</h2>
<pre><code>¡λVoΛoS≠⌊√M≠⁰N);0 
               ;0 start with [0]
¡                 iterate on this array, appending results:
 λ            )   lambda function (argument → ⁰)
  Vo         N    first natural number where
          M≠⁰     differences with elements so far
    Λo            are all
      S≠⌊√        not square?
</code></pre>
","80214","","","","","2021-03-03 15:33:38","","","","5","","","","CC BY-SA 4.0"
"220219","2","","220211","2021-03-05 07:32:01","","2","","<h1><a href=""https://github.com/ETHproductions/japt"" rel=""nofollow noreferrer"">Japt</a>, <sup><s>19</s></sup> 12 bytes</h1>
<pre><code>K-ÐKi T)z1e3
</code></pre>
<p><a href=""https://tio.run/##y0osKPn/31v38ATvTIUQzSrDVOP//wE"" rel=""nofollow noreferrer"" title=""Japt – Try It Online"">Try it online!</a></p>
<p>does current time(in ms) - january 1 , divide by 1000 and floor.</p>
<p>-7 bytes from Shaggy and AZTECC0.</p>
","80214","","80214","","2021-03-05 08:32:06","2021-03-05 08:32:06","","","","2","","","","CC BY-SA 4.0"
"220268","2","","220260","2021-03-06 02:53:44","","5","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>Πz`^İp
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9yCqoS4IxsK/v//H22pY6ZjrmOqY6hjoWNoEAsA"" rel=""noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>Πz`^İp implicit input
 z     zip the input
    İp with the infinite list of primes, removing extras
   ^   using the power function,
  `    with flipped arguments.
Π      take its product.
</code></pre>
","80214","","","","","2021-03-06 02:53:44","","","","0","","","","CC BY-SA 4.0"
"220669","2","","95128","2021-03-14 11:23:51","","0","","<h1><a href=""https://github.com/mlochbaum/BQN"" rel=""nofollow noreferrer"">BQN</a>, 3 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>+´×
</code></pre>
<p><a href=""https://mlochbaum.github.io/BQN/try.html#code=RuKGkHsrwrTwnZWpw5fwnZWofQoy4oC/MyBGIDHigL80"" rel=""nofollow noreferrer"">Try it!</a></p>
<p>dot product</p>
","80214","","","","","2021-03-14 11:23:51","","","","0","","","","CC BY-SA 4.0"
"220755","2","","137981","2021-03-16 06:13:39","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>17</s></sup> 15 bytes</h1>
<pre><code>£moiṁsṁṠehGJC2N
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//9Di3PzMhzsbi4H44c4FqRnuXs5Gfv///zcyNLQ0NDc0NTQGMsxNjQ2NTMwsDA0MjQxNDM0MLYwMAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>1-indexed. Returns 0 if not in the sequence.</p>
<p>-2 bytes from Leo, <code>GJ</code>!</p>
","80214","","80214","","2021-03-17 05:51:31","2021-03-17 05:51:31","","","","3","","","","CC BY-SA 4.0"
"220757","2","","127187","2021-03-16 06:40:52","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 16 bytes</h1>
<pre><code>!¡λḟȯṗ+→L¹`-N);1
</code></pre>
<p><a href=""https://tio.run/##ASwA0/9odXNr/23igoHhuKMxMDD/IcKhzrvhuJ/Ir@G5lyvihpJMwrlgLU4pOzH//w"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>1-indexed.</p>
","80214","","","","","2021-03-16 06:40:52","","","","0","","","","CC BY-SA 4.0"
"220802","2","","73620","2021-03-17 02:28:16","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 18 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>é╔óó)₧ú↔u.≤∟╦Ç╟·○`
</code></pre>
<p><a href=""https://staxlang.xyz/#p=82c9a2a2299ea31d752ef31ccb80c7fa0960&amp;i=%5B1,+2,+%5B3,+%5B4,+5%5D,+6,+%5B7,+%5B8%5D,+9%5D%5D%5D%0A%5B3,+1,+%5B12,+%5B14,+%5B18%5D,+2%5D,+1%5D,+%5B%5B4%5D%5D,+5%5D%0A%5B2,+1,+%5B%5B5%5D%5D,+6%5D%0A%5B%5B54,+%5B43,+76,+%5B%5B%5B-19%5D%5D%5D%5D,+20%5D,+12%5D%0A%5B%5B%5B50%5D%5D,+%5B%5B50%5D%5D%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>I rhought I'd be able to beat pyth, but ¯\_(○-○)_/¯</p>
","80214","","","","","2021-03-17 02:28:16","","","","0","","","","CC BY-SA 4.0"
"220803","2","","143321","2021-03-17 02:45:30","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>21</s></sup> 20 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>⌐èüYΩ╜yu╝√♪╪▌yº⌐▌2Σ⌠
</code></pre>
<p><a href=""https://staxlang.xyz/#p=a98a8159eabd7975bcfb0dd8dd79a7a9dd32e4f4&amp;i=5"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Uses ETHProductions' idea.</p>
<p>-1 after changing <code>1/</code> to <code>M</code> (from recursive).</p>
","80214","","80214","","2021-03-17 05:53:20","2021-03-17 05:53:20","","","","0","","","","CC BY-SA 4.0"
"220813","2","","127393","2021-03-17 09:17:15","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 23 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü→è«wε⌠╒└I◄►¼═Öà=╬à╞⌐-Ω
</code></pre>
<p><a href=""https://staxlang.xyz/#p=811a8aae77eef4d5c0491110accd99853dce85c6a92dea&amp;i=1%0A2%0A3%0A4%0A5%0A6%0A7%0A8%0A9%0A10%0A11%0A12%0A13%0A14%0A15%0A16%0A17%0A18%0A19%0A20%0A21%0A22%0A23%0A24%0A&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>A direct implementation of the procedure.</p>
<p>Uses zeroes as placeholders till the array is fully filed, and take the last element.</p>
<h2>Explanation</h2>
<pre><code>z({c:0ni@i1&gt;s2?::{i^^&amp;F}x*H Input: x
z                           empty list
 (                          pad with x zeroes (call this S)
  {                    }x*  perform the following x times:
   c:0                      get the falsy indices
         i1&gt;  ?             if iteration index &gt;1 :
      ni@                   get nth element of S
            2               else push 2
               ::           get every nth element of the falsy indices
                 {    F     for each index:
                  i^^&amp;      replace with iteration index + 2
</code></pre>
","80214","","80214","","2021-03-17 09:26:53","2021-03-17 09:26:53","","","","0","","","","CC BY-SA 4.0"
"220816","2","","101961","2021-03-17 09:33:15","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 8 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>å\S∩♪öH╠
</code></pre>
<p><a href=""https://staxlang.xyz/#p=865c53ef0d9448cc&amp;i=1%0A8%0A15%0A20%0A80&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-03-17 09:33:15","","","","0","","","","CC BY-SA 4.0"
"221065","2","","221046","2021-03-22 13:10:24","","3","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s>9</s></sup> 7 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>-∘⌽@1 4
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=033UMeNRz14HQwUTAA&amp;f=S1MwUTBTsFAwBwA&amp;i=AwA&amp;r=tryAPL&amp;l=apl-dyalog&amp;m=train&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a></p>
<p>A function submission which accepts an array.</p>
<p>-2 bytes from rak1507.</p>
","80214","","80214","","2021-03-23 01:57:55","2021-03-23 01:57:55","","","","1","","","","CC BY-SA 4.0"
"221195","2","","221144","2021-03-24 04:15:39","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 35 bytes</h1>
<pre><code>`/yT)6bX$`p      01D`|&lt;&lt;T,/-Gk5gD8/
</code></pre>
<p><a href=""https://staxlang.xyz/#c=%60%2FyT%296bX%24%60p++++++01D%60%7C%3C%3CT,%2F-Gk5gD8%2F&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p><a href=""https://staxlang.xyz/#c=%60%2FyT%296bX%24%60p++++++0D%60%7C%3C%3CT,%2F-Gk5gD8%2F&amp;i="" rel=""nofollow noreferrer"">Remove the nineteenth byte(booooo)</a></p>
<p>The compressed literal for the whole string is &gt; 19 bytes, so it has to be split for a working solution (unless wastl finds some insane compression exploit)</p>
","80214","","","","","2021-03-24 04:15:39","","","","0","","","","CC BY-SA 4.0"
"221204","2","","221196","2021-03-24 06:05:41","","9","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>12</s></sup> 10 bytes</h1>
<pre><code>◄oa-⁰´×/ŀ→
</code></pre>
<p><a href=""https://tio.run/##ASIA3f9odXNr///il4RvYS3igbDCtMOXL8WA4oaS////MC4x/zEw"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p><code>≠</code> is absolute difference, but doesn't seem to work for floats. So <code>oa-</code> is used.</p>
<p>-2 bytes from Leo.</p>
<h2>Explanation</h2>
<pre><code>◄oa-⁰´×/ŀ→ Inputs: decimal → ⁰, max denominator → implicit
        ŀ→ range 0..denominator
     ´×/   convert all possible pairs to fractions
◄o         min by
  a-⁰      absolute difference with the decimal
</code></pre>
","80214","","80214","","2021-03-25 02:04:40","2021-03-25 02:04:40","","","","2","","","","CC BY-SA 4.0"
"221320","2","","221250","2021-03-25 09:49:52","","1","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s></s></sup>53 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>⌊/+/¨7=,¨a/⍨1=≢¨(∪+/,+⌿)¨a←⎕∘{3 3⍴7@(⍸⍵⊤⍨9/2)⊢⍺}¨⍳512
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=e9Q31dP/UdsEAwA&amp;c=AVoApf/ijIovKy/CqDc9LMKoYS/ijagxPeKJosKoKOKIqisvLCvijL8pwqhh4oaQ4o6V4oiYezMgM@KNtDdAKOKNuOKNteKKpOKNqDkvMiniiqLijbp9wqjijbM1MTI&amp;f=AwA&amp;i=TczBDYNAEEPRO43sdWZtI09DdBPqoA5KoZIQKdKOfHv68rE9n/O@RhFg0Rzb8SclkMqZi1C7JTNaBWUJwCIj/Fv7Sk2VdrXqjdKRcCPEe1alRZMSSPYqYMjg@AI&amp;r=tio&amp;l=apl-dyalog&amp;m=tradfn&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a></p>
<p>A tradfn submission which takes a flat array as input from STDIN.</p>
<p>loops over 512 combinations and finds the minimum.</p>
","80214","","","","","2021-03-25 09:49:52","","","","0","","","","CC BY-SA 4.0"
"221324","2","","221250","2021-03-25 10:19:21","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 25 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü+üF∙░╔┴!╜U╙],wøT╥B╠╓l6â°
</code></pre>
<p><a href=""https://staxlang.xyz/#p=812b8146f9b0c9c121bd55d35d2c770054d242ccd66c3683f8&amp;i=%5B9,+4,+3,+3,+4,+9,+4,+8,+4%5D%0A%5B5,+1,+3,+3,+1,+5,+1,+2,+1%5D%0A%5B3,+9,+6,+8,+5,+5,+8,+4,+0%5D%0A%5B5,+3,+5,+1,+9,+5,+3,+3,+3%5D%0A%5B8,+3,+0,+8,+0,+8,+0,+8,+4%5D%0A%5B1,+5,+2,+5,+9,+5,+6,+5,+3%5D%0A%5B3,+0,+8,+1,+8,+0,+1,+3,+8%5D%0A%5B3,+3,+0,+5,+1,+9,+9,+9,+5%5D%0A%5B2,+4,+5,+5,+3,+4,+4,+4,+8%5D%0A%5B3,+0,+3,+8,+3,+5,+8,+3,+4%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>yet another powerset answer</p>
","80214","","","","","2021-03-25 10:19:21","","","","0","","","","CC BY-SA 4.0"
"221354","2","","221344","2021-03-25 15:55:19","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>Ç≈≡ø*fáì☺○
</code></pre>
<p><a href=""https://staxlang.xyz/#p=80f7f0002a66a08d0109&amp;i=%5B0,1,2%5D,+%22cdr%22%0A%5B0,%5B1,2%5D,3%5D,+%22cadr%22%0A%5B%5B%5B%5B%5B0%5D%5D%5D%5D%5D,+%22caaaar%22%0A%5B%5D,+%22cdr%22%0A%5B%5D,+%22car%22%0Aanything,+%22cr%22%2F%22asd%22%0A%5B0%5D,+%22car%22%0A%5B0%5D,+%22cdr%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Returns a string of codepoints if array, and number if it's a number. The code can be verified here: <a href=""https://staxlang.xyz/#c=%22ahdD%22%7CtrDNdlcc%7C4%7B%7Cu%7Da%3F&amp;i=%5B0,1,2%5D,+%22cdr%22%0A%5B0,%5B1,2%5D,3%5D,+%22cadr%22%0A%5B%5B%5B%5B%5B0%5D%5D%5D%5D%5D,+%22caaaar%22%0A%5B%5D,+%22cdr%22%0A%5B%5D,+%22car%22%0Aanything,+%22cr%22%2F%22asd%22%0A%5B0%5D,+%22car%22%0A%5B0%5D,+%22cdr%22&amp;m=2"" rel=""nofollow noreferrer"">Try it</a></p>
<h2>Explanation</h2>
<pre><code>&quot;ahdD&quot;|trDl
&quot;ahdD&quot;|t    translate 'a' to 'h' and 'd'  to 'D'
        r   reverse
         D  delete first element
          l eval

checking code:
cc|4{|u}a?
cc         dup twice
  |4     ? if it's an array:
    {|u}   convert to JSON
        a  otherwise leave as is
</code></pre>
","80214","","","","","2021-03-25 15:55:19","","","","2","","","","CC BY-SA 4.0"
"222490","2","","222478","2021-03-28 03:08:44","","5","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""noreferrer"">Jelly</a>, 21 bytes, cracks <a href=""https://codegolf.stackexchange.com/a/222489/80214"">Jonathan Allan's answer</a></h1>
<pre><code>“¡ẉḟUHġ[4A»ŒVw⁾SuNXṛ⁸
</code></pre>
<p><a href=""https://tio.run/##AS4A0f9qZWxsef//4oCcwqHhuonhuJ9VSMShWzRBwrvFklZ34oG@U3VOWOG5m@KBuP//"" rel=""noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>Takes the return value of <code>time.ctime()</code>, finds <code>Su</code> in it, and negates the value. On a Sunday, this passes -1 to <code>X</code> (random number function), causing an error. Otherwise it passes 0 to <code>X</code>, not erroring. then final return value is forced to be the empty string <code>⁸</code>, so it will print nothing.</p>
","80214","","","","","2021-03-28 03:08:44","","","","0","","","","CC BY-SA 4.0"
"222497","2","","222461","2021-03-28 05:56:43","","3","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>▄πKñ╜╓♥F⌂F
</code></pre>
<p><a href=""https://staxlang.xyz/#p=dce34ba4bdd603467f46&amp;i=%5B%5B3,+2%5D,+%5B5,+1%5D,+%5B1,+3%5D,+%5B1,+3%5D,+%5B4,+3%5D,+%5B2,+5%5D,+%5B4,+3%5D,+%5B2,+4%5D,+%5B1,+3%5D,+%5B4,+1%5D%5D%0A%0A%5B%5B4,+2%5D,+%5B5,+2%5D,+%5B1,+3%5D,+%5B2,+3%5D%5D%0A%0A%5B%5B1,+1%5D,+%5B2,+2%5D,+%5B3,+3%5D,+%5B4,+4%5D,+%5B5,+5%5D%5D&amp;m=1"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>takes inputs as <code>[column, row]</code>. Based on Jonathan Allan's answer.</p>
","80214","","80214","","2021-03-28 15:24:41","2021-03-28 15:24:41","","","","0","","","","CC BY-SA 4.0"
"222588","2","","222585","2021-03-30 14:51:56","","9","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""noreferrer"">Stax</a>, 8 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""noreferrer"">bytes</a></h1>
<pre><code>ßN¶e╣╨j,
</code></pre>
<p><a href=""https://staxlang.xyz/#p=e14e1465b9d06a2c&amp;i=2%7C%3EmyFunction%28%29%0Aotherfunction%28%29%7C%3Enewfunction%28%29%7C%3Ebaz%28%29%7C%3Ebar%28%29%7C%3Efoo%28%29&amp;m=2"" rel=""noreferrer"">Run and debug it</a></p>
<h2>Explanation(unpacked)</h2>
<pre><code>.|&gt;/kNas++
.|&gt;/       split the string on &quot;|&gt;&quot;
    k      reduce the list by:
     N     push the 2nd string with the last element popped, then push the last element
      a    put the previous iteration on top of the stack
       s   swap the bracket with the prev iteration
        ++ concatenate into one string
</code></pre>
","80214","","80214","","2021-03-30 14:57:42","2021-03-30 14:57:42","","","","0","","","","CC BY-SA 4.0"
"222647","2","","65770","2021-03-31 04:16:44","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 2 bytes</h1>
<pre><code>G|
</code></pre>
<p><a href=""https://tio.run/##yygtzv5/aFtueW5w6qOmxv/uNf///4@ONtQx0DECYnMwNNAxBWIQtIzVActBIZCnawiX1jUH8o2MIWwTI7gSQ6BRxjomYMVGxiaxsQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>scan from left with or.</p>
","80214","","","","","2021-03-31 04:16:44","","","","0","","","","CC BY-SA 4.0"
"222655","2","","222652","2021-03-31 06:43:40","","3","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, 7 bytes</h1>
<pre><code>ÆF*/€Ṁ&gt;
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8//9wm5uW/qOmNQ93Ntj9///f0OC/OQA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p>Similar to Bubbler's answer. Returns a flipped boolean.</p>
<h2>Explanation</h2>
<pre><code>ÆF*/€Ṁ&lt; Main link: takes  n on the left, and B on the right
ÆF      prime factor and exponent pairs
  */€   reduce each by exponentiation
     Ṁ  maximum
      &gt; greater than B?
</code></pre>
","80214","","80214","","2021-03-31 06:46:54","2021-03-31 06:46:54","","","","1","","","","CC BY-SA 4.0"
"222686","2","","222676","2021-03-31 14:23:24","","3","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 16 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>âî}g♥▼«zΩ╥;QbB]╔
</code></pre>
<p><a href=""https://staxlang.xyz/#p=838c7d67031fae7aead23b5162425dc9&amp;i=1%0A2%0A3%0A4%0A11%0A12%0A13%0A14%0A65%0A610%0A8967%0A8039213%0A&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Based on Etheryte's observation, which shaved a off a ton of bytes. <a href=""https://codegolf.stackexchange.com/a/222687/80214"">Check out their answer!</a></p>
<h2>Explanation</h2>
<pre><code>Z{|B.11#!}{ge|B'1s+
Z                   push 0 under the input(counter)
           ge       generator: find the first n elements, return the last
          {         empty block: get the next element by incrementing
 {       }          filter:
  |B                base2 string
    .11#!           has 0 occurrences of &quot;11&quot;?
               '1s+ prepend a 1 to it(r'1+ also works for valid output)
</code></pre>
<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 29 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>é½Æ½┼≥╦◘½}○└╩►à«ôæ→¢ûU«½*≈ø»▀
</code></pre>
<p><a href=""https://staxlang.xyz/#p=82ab92abc5f2cb08ab7d09c0ca1085ae93911a9b9655aeab2af700afdf&amp;i=1%0A2%0A3%0A4%0A11%0A12%0A13%0A14%0A65%0A610%0A8967%0A8039213%0A&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Pretty big.</p>
  
","80214","","80214","","2021-04-01 02:10:58","2021-04-01 02:10:58","","","","0","","","","CC BY-SA 4.0"
"222742","2","","52577","2021-04-01 12:12:24","","1","","<h1><a href=""https://github.com/DennisMitchell/jelly"" rel=""nofollow noreferrer"">Jelly</a>, <sup><s>16</s></sup> 14 bytes</h1>
<pre><code>µṄŒrUFV€BFṾ€ø¡
</code></pre>
<p><a href=""https://tio.run/##y0rNyan8///Q1oc7W45OKgp1C3vUtMbJ7eHOfUD68I5DC///NwUA"" rel=""nofollow noreferrer"" title=""Jelly – Try It Online"">Try it online!</a></p>
<p><del>I still feel like there's some better way to do the string printing.</del></p>
<p>-2 bytes from xigoi.</p>
","80214","","80214","","2021-04-02 03:23:23","2021-04-02 03:23:23","","","","1","","","","CC BY-SA 4.0"
"222743","2","","52577","2021-04-01 12:15:14","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 12 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>î╩∩▬╒«ç╚¢↓}~
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8ccaef16d5ae87c89b197d7e&amp;i=10%0A0%0A3&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-04-01 12:15:14","","","","0","","","","CC BY-SA 4.0"
"222766","2","","111938","2021-04-02 03:56:41","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ßë♠♂æÄ|Åò▓
</code></pre>
<p><a href=""https://staxlang.xyz/#p=e189060b918e7c8f95b2&amp;i=Birthday"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-04-02 03:56:41","","","","0","","","","CC BY-SA 4.0"
"222771","2","","58615","2021-04-02 10:55:40","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 21 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>åS╬╕▌≡º$)ö;▀├Xè¶XΔ£≈♀
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8653ceb8ddf0a72429943bdfc3588a1458ff9cf70c&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Not sure why <a href=""https://github.com/tomtheisen/stax/blob/master/docs/walkthroughs/fizzbuzz.md"" rel=""nofollow noreferrer"">recursive's solution from the tutorial</a> hasn't been posted here yet. Probably the most minimal fizzbuzz possible in stax.</p>
","80214","","","","","2021-04-02 10:55:40","","","","0","","","","CC BY-SA 4.0"
"222774","2","","149196","2021-04-02 12:28:25","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 16 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>è}╘⌐ƒw┴L≤⌂IÑ═eαü
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8a7dd4a99f77c14cf37f49a5cd65e081&amp;i=12"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-04-02 12:28:25","","","","0","","","","CC BY-SA 4.0"
"222862","2","","222856","2021-04-04 12:18:38","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>mΣ¡o`ṘN↔;2
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/fc4kML8xMe7pzh96htirXR//8A"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Prints the infinite sequence. If you let it time out, you can see upto 11 terms.</p>
<h2>Explanation</h2>
<pre><code>mΣ¡o`ṘN↔;2
        ;2 start with [2]
  ¡o       create the next iteration by
       ↔   reversing it
    `Ṙ     and replicating each element(flipped arg)
      N    times each element in the natural numbers
mΣ         map each list to its sum
</code></pre>
","80214","","","","","2021-04-04 12:18:38","","","","0","","","","CC BY-SA 4.0"
"222892","2","","222882","2021-04-05 04:00:27","","5","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""noreferrer"">Husk</a>, 17 bytes</h1>
<pre><code>_-d⁰/←₁³*₁⁰d
!İ⁰L
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P1435VHjBv1HbRMeNTUe2qwFJIH8FC7FIxuAtM////@jjWP/RxvEAgA"" rel=""noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Simply uses the closed form formula from the question.</p>
<h2>Explanation</h2>
<pre><code>Helper function ₁:
!İ⁰L
   L take the length of the sequence
!İ⁰  get that entry in the powers of 10
     (this is shorter than `^10)

Main program: 
_-d⁰/←₁³*₁⁰d
       ³*₁⁰d multiply ₁(y) with int(x)
    /←₁³     divide by ₁(x) - 1   
_-d⁰         subtract from int(y)
</code></pre>
","80214","","","","","2021-04-05 04:00:27","","","","0","","","","CC BY-SA 4.0"
"222897","2","","92926","2021-04-05 07:51:47","","4","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><S>11</s></sup> 9 bytes</h1>
<pre><code>εωλ-→fṗŀ¹
</code></pre>
<p><a href=""https://tio.run/##Dc67CcJQGIDRhT7h/o/7miWklYCkEnu1EGxtnEQh2AVs4wxmkatngjMc9rs2P8dxPZ/a8vhcl9dmvdy23@n@Ps5Ta63rDCdRkIAIoogjCclIQQOqqKGOJjSjFQuYYo5FLGMFD7jgijue8IwXYujpIpmKGBKRigoa0YIJZljCKv4vRLz2/Q8"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Leo.</p>
<p>None of the testcases reach zero because the max number we can subtract from <code>n</code> can only be <code>n-1</code>. Hence, we can check insignificance instead of equality with 1.</p>
<h2>Explanation</h2>
<pre><code>εωλ-→fṗŀ¹
 ωλ       iterate on the input till fixpoint
       ŀ¹  range 0..n-1
     fṗ    filter out nonprimes
    →      last element
   -       subtract from n
ε         is fixed point insignificant? (&lt;= 1?) 
</code></pre>
","80214","","80214","","2021-04-06 03:15:11","2021-04-06 03:15:11","","","","1","","","","CC BY-SA 4.0"
"222900","2","","140498","2021-04-05 09:02:18","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 12 bytes</h1>
<pre><code>ḟo`€d666dfṗṫ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@GO@fkJj5rWpJiZmaWkPdw5/eHO1f///zc0AAIA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-04-05 09:02:18","","","","0","","","","CC BY-SA 4.0"
"222910","2","","222905","2021-04-05 16:00:09","","5","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 15 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>┼↓Φ:'ñ╪⌐ñ∟M╕LbN
</code></pre>
<p><a href=""https://staxlang.xyz/#c=%7C%5B%7Bc%7C%5B%7Bn%25%3Amn%3D%7Dj%25mu%0AJ&amp;i=%5B1%5D%0A%5B1,+1,+2,+1,+1,+2,+1%5D%0A%5B1,+2,+1,+2,+1,+2,+1,+2,+4%5D%0A%5B1,+2,+3,+4,+1,+2,+3,+1,+2,+1%5D%0A%5B4,+4,+4,+4,+4,+4,+4,+4,+4,+4%5D&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Output is as a string representing the codepoints of each period. Pretty printed with spaces for verification.</p>
<h2>Explanation</h2>
<pre><code>|[{c|[{n%:mn=}j%mu
|[                 prefixes of input
  {             m  map to
   c|[             dup and take prefixes
      {      }j    first element which satisfies:
       n%:m        when extended to current iteration length
           n=      equals the current iteration?
               %   take the length
                 u uniquify
</code></pre>
","80214","","80214","","2021-04-06 03:19:32","2021-04-06 03:19:32","","","","0","","","","CC BY-SA 4.0"
"222944","2","","222941","2021-04-06 04:51:05","","3","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 14 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╪£pÇUßi⌂Ω♫M⌂░◘
</code></pre>
<p><a href=""https://staxlang.xyz/#p=d89c708055e1697fea0e4d7fb008&amp;i=43,+%5B0,+2,+3,+6,+1,+3,+3%5D%0A%0A44,+%5B0,+2,+3,+6,+1,+3,+3%5D%0A%0A99,+%5B5,+6,+7%5D%0A&amp;m=1"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>takes inputs as <code>&lt;max denominator&gt;,&lt;continued fraction&gt;</code>.</p>
<h2>Explanation</h2>
<pre><code>|[{r{su+km{Rn^&lt;oH
|[{      m        for each prefix of the continued fraction
   r               reverse
    {   k          reduce by:
     su+            swap, reciprocal and add
          {    o  order by:
           R       denominator
            n^&lt;    lesser than 2nd input + 1 ? 
                H last element
</code></pre>
","80214","","80214","","2021-04-06 05:48:32","2021-04-06 05:48:32","","","","0","","","","CC BY-SA 4.0"
"222948","2","","6215","2021-04-06 05:54:16","","1","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL (Dyalog Extended)</a>, 7 bytes</h1>

<pre class=""lang-apl prettyprint-override""><code>⌂efract
</code></pre>
<p><a href=""https://tio.run/##SyzI0U2pTMzJT9dNrShJzUtJTfn/qG@qW9CjtgmGRhbmXEBOQACQY2zy/1FPU2paUWJyyf80oMCj3r5HXc2Petc86t1yaL3xo7aJQKXBQc5AMsTDM/i/ibFCmoKJBZcFkDI05DIFUUaGAA"" rel=""nofollow noreferrer"" title=""APL (Dyalog Extended) – Try It Online"">Try it online!</a></p>
<p>From <em>some</em> reason, Dyalog APL has a builtin for this.</p>
<p>Takes the numerator and denominator on the left and the right</p>
","80214","","","","","2021-04-06 05:54:16","","","","0","","","","CC BY-SA 4.0"
"222995","2","","222988","2021-04-07 02:19:39","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 8 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>║H┤1╫╢╘i
</code></pre>
<p><a href=""https://staxlang.xyz/#p=ba48b431d7b6d469&amp;i=0+%22This+is+a+string%22+%22That%22%0A5+%22This+is+a+string%22+%22That%22%0A14+%22This+is+a+string%22+%22That%22%0A0+%22hi%22+%22Hello+there%21%22%0A1+%22hi%22+%22Hello+there%21%22%0A0+%22over%22+%22write+multiple+times%22%0A3+%22over%22+%22write+multiple+times%22&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>input taken as <code>index, original, replacement</code>.</p>
<h2>Explanation</h2>
<pre><code>Fdix+n%%_&amp; 
F          for each char in replacement:
 d         delete current iteration
  ix+      add iteration index and input index
     n%    get original's length
       %   modulo by that
           (this is needed because &amp; extends the string when out of bounds)
        _  push current iteration value
         &amp; replace at that index
</code></pre>
","80214","","","","","2021-04-07 02:19:39","","","","0","","","","CC BY-SA 4.0"
"223004","2","","102059","2021-04-07 06:54:07","","0","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""nofollow noreferrer"">APL(Dyalog Extended)</a>, <sup><s></s></sup>13 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>+/×/¨0j1×⊆⍨⊤⎕
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=09Y/PF3/0AqDLMPD0x91tT3qXfGoa8mjvqkA&amp;f=AwA&amp;i=S@MyMTW2AAA&amp;r=tio&amp;l=apl-dyalog-extended&amp;m=tradfn&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a></p>
<p>A tradfn submission which takes a decimal number.</p>
","80214","","","","","2021-04-07 06:54:07","","","","0","","","","CC BY-SA 4.0"
"223005","2","","41719","2021-04-07 07:06:17","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 9 - 5 = 4 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü▲τ}εT├?á
</code></pre>
<p><a href=""https://staxlang.xyz/#p=811ee77dee54c33fa0&amp;i=4"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-04-07 07:06:17","","","","0","","","","CC BY-SA 4.0"
"223008","2","","156750","2021-04-07 07:13:24","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 9 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü♦╧Γ♥├eï∞
</code></pre>
<p><a href=""https://staxlang.xyz/#p=8104cfe203c3658bec&amp;i=%5B%5B%5B2,0%5D,%5B2,1%5D,%5B4,0%5D%5D,%5B%5B2,-1%5D,%5B3,0%5D,%5B0,1%5D%5D,%5B%5B4,0%5D,%5B0,-1%5D,%5B1,0%5D%5D%5D%0A%0A%5B%5B%5B1,0%5D,%5B2,0%5D%5D,%5B%5B2,0%5D,%5B1,0%5D%5D%5D%0A%0A%5B%5B%5B1,0%5D,%5B2,-3%5D%5D,%5B%5B2,3%5D,%5B1,0%5D%5D%5D%0A%0A%5B%5B%5B42,0%5D%5D%5D%0A%0A%5B%5B%5B2,0%5D,%5B2,1%5D,%5B4,0%5D%5D,%5B%5B2,-1%5D,%5B3,0%5D,%5B0,1%5D%5D,%5B%5B4,0%5D,%5B0,-1%5D,%5B1,-1%5D%5D%5D%0A%0A%5B%5B%5B0,1%5D,%5B0,2%5D%5D,%5B%5B0,2%5D,%5B0,1%5D%5D%5D%0A%0A%5B%5B%5B1,0%5D,%5B2,3%5D%5D,%5B%5B2,3%5D,%5B1,0%5D%5D%5D%0A%0A%5B%5B%5B3,2%5D%5D%5D&amp;m=1"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-04-07 07:13:24","","","","0","","","","CC BY-SA 4.0"
"223013","2","","170047","2021-04-07 08:36:59","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 6 bytes</h1>
<pre><code>►=mΠṖ2
</code></pre>
<p><a href=""https://tio.run/##yygtzv6fG5yvnaCtpKBrp6CkUfyoqbFI89C2/4@m7bLNPbfg4c5pRv///4820jHWMdEx1TGL5Yo21zECkiARYyBtDKUNdSDQCCxrpmNkYKBjCERGBlDFYO065joWOhZAEVOgQkuQApAECJoDBS2B0kAhS7AqU7D2WAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p><code>►=</code> gives -1 over the other answer.</p>
<p><code>×*</code> has too many duplicates and doesn't give the right value.</p>
","80214","","","","","2021-04-07 08:36:59","","","","0","","","","CC BY-SA 4.0"
"223019","2","","144740","2021-04-07 10:42:06","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 9 bytes</h1>
<pre><code>#ṗuṁS:Lgp
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/nhzumlD3c2Blv5pBf8///f2NDcwNDQ0swCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Slight improvement over Mr. XCoder's answer.</p>
","80214","","","","","2021-04-07 10:42:06","","","","0","","","","CC BY-SA 4.0"
"223021","2","","140292","2021-04-07 10:52:29","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 7 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ê┬|Y¶à6
</code></pre>
<p><a href=""https://staxlang.xyz/#p=88c27c59148536&amp;i=000000+blah+blah%0A000001*+apples%0A000002+oranges%3F%0A000003*+yeah,+oranges.%0A000*04+love+me+some+oranges"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>m6%B42=C
m        map each line:
 6%      split at index 6, push both parts
   B     uncons, pop and push first element
    42=C if equal to 42, cancel
</code></pre>
","80214","","","","","2021-04-07 10:52:29","","","","0","","","","CC BY-SA 4.0"
"223031","2","","194846","2021-04-07 15:45:58","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 11 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ùivK‼9⌂m¬╚─
</code></pre>
<p><a href=""https://staxlang.xyz/#p=9769764b13397f6daac8c4&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-04-07 15:45:58","","","","0","","","","CC BY-SA 4.0"
"223072","2","","87064","2021-04-08 05:52:43","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 5 bytes</h1>
<pre><code>VAcKT
</code></pre>
<p><a href=""https://staxlang.xyz/#c=VAcKT&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>VAcKT
VA    uppercase alphabet
  c   copy
   K  cross-product map short-form(displays with newlines):    
    T  max of two values
</code></pre>
","80214","","","","","2021-04-08 05:52:43","","","","0","","","","CC BY-SA 4.0"
"223082","2","","199753","2021-04-08 08:54:32","","2","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 11 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>û╟;±å↕êg╥σç
</code></pre>
<p><a href=""https://staxlang.xyz/#p=96c73bf186128867d2e587&amp;i=%22GNU%27s+Not+Unix%22,0%0A%22GNU%27s+Not+Unix%22,2%0A%22YOPY+Own+Personal+YOPY%22,1%0A%22YOPY+Own+Personal+YOPY%22,2%0A%22YourYOPY+Own+Personal+YOPY%22,2%0A&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Regex is pretty nice.</p>
<h2>Explanation</h2>
<pre><code>D.\bxjMh+x:{R X → input
D             do the following n times, with the first input on stack
 .\b          push &quot;\b&quot; (word boundary)
    xj        split X on spaces
      M       transpose
       h      take first row to get abbreviation
        +     add that to the boundary
         x:{  push X, embedded in braces
            R replace matches of the created regex with &quot;(X)&quot;
</code></pre>
","80214","","80214","","2021-04-09 15:06:08","2021-04-09 15:06:08","","","","0","","","","CC BY-SA 4.0"
"223085","2","","19925","2021-04-08 09:43:03","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>12</s></sup> 8 bytes</h1>
<pre><code>#εkOmwt¶
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/X/nc1mz/3PKSQ9v@//9vymWuYKZgymWqAKS5LBSMFCy5jBSMFUyApImCMQA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-4 bytes from Leo.</p>
","80214","","80214","","2021-04-08 10:14:13","2021-04-08 10:14:13","","","","2","","","","CC BY-SA 4.0"
"223088","2","","242","2021-04-08 10:23:33","","1","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 14 bytes</h1>
<pre><code>:g/^/m0
:%!rev
</code></pre>
<p><a href=""https://tio.run/##K/v/3ypdP04/14DLSlWxKLXs///A0szkbIWkovzyPIW0/Aouj1SFrNLcgtQUhfyy1CKFkoxUhZzEqkqFlPx0AA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>reverses the entire buffer by reversing each line, and then reversing the order.</p>
<p><a href=""https://vim.fandom.com/wiki/Reverse_order_of_lines"" rel=""nofollow noreferrer"">The first line comes from here.</a></p>
<p><code>:%!rev</code> applies bash's <code>rev</code> command to each line.</p>
","80214","","","","","2021-04-08 10:23:33","","","","0","","","","CC BY-SA 4.0"
"223090","2","","181958","2021-04-08 11:07:51","","3","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, <sup><s>43 30</s></sup> 29 bytes</h1>
<pre><code>qqhYp:s/./*&amp;/g
x0C&lt;C-r&gt;=&lt;C-r&gt;&quot;
&lt;esc&gt;@qq@q
</code></pre>
<p><a href=""https://tio.run/##K/v/v7AwI7LAqlhfT19LTT@dq8LA2cZZt8jOFkwqcdmkFifbORQWOhT@/29kDgYWYGBp@V@3DAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>-13 bytes from DJMcMayhem. <a href=""https://codegolf.stackexchange.com/a/223102/80214"">Go upvote their answer!</a></p>
<p>-1 byte from user41805.</p>
<p>Takes advantage of the fact that this only stops on single digit numbers.</p>
<h2>Explanation</h2>
<pre><code>qqhYp:s/./*&amp;/g
qq                  create a macro @q:
  l                  move one char right
                     this is the break condition, since you cant 
                     move to the right from a single digit
   Yp                duplicate the current line
     :s/./*&amp;/g       add &quot;*&quot; before each digit

x0C&lt;C-r&gt;=&lt;C-r&gt;&quot;     
x                    delete first char
 0C                  cut the current line and store in &quot; register
   &lt;C-r&gt;=            evaluate the following string:
         &lt;C-r&gt;&quot;      the value in &quot; register
                     and paste in current line
 
@qq@q
@q                   recursively call macro
  q                 close macro
   @q               call macro q

</code></pre>
","80214","","80214","","2021-04-09 11:15:05","2021-04-09 11:15:05","","","","1","","","","CC BY-SA 4.0"
"223119","2","","52946","2021-04-09 01:46:13","","4","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, <Sup><s>16</s></sup> 14 bytes</h1>
<pre><code>qq:s/.^H
@qq@q
</code></pre>
<p><a href=""https://tio.run/##JcIxCoAwDAXQ3VP8zUV0dypOXb2AUCRqQBvThl4/DvJec1ed6zRusQuqQd0XQuadYAK7uOIQubf4OynbTU/KAy7qKxpXNs4njiIPdimvlGSEuI4f"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>similar to sed, but uses Vim's recursion.</p>
","80214","","80214","","2021-04-12 05:49:48","2021-04-12 05:49:48","","","","2","","","","CC BY-SA 4.0"
"223121","2","","63307","2021-04-09 02:21:06","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>#S≡Γ·…→Q
</code></pre>
<p><a href=""https://tio.run/##AR8A4P9odXNr//8jU@KJoc6TwrfigKbihpJR////bmF0dXJl"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>#S≡Γ·…→Q
       Q all continuous sublists
#        number of sublists which satisfy:
 S≡      has the same shape and distribution of truthy/falsy values as: 
   Γ·…→  the range between its first and last character?
</code></pre>
","80214","","","","","2021-04-09 02:21:06","","","","2","","","","CC BY-SA 4.0"
"223122","2","","62752","2021-04-09 03:06:18","","0","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, <sup><s>41</s></sup> 40 bytes</h1>
<pre><code>qqhYp$x@qq@qo&lt;esc&gt;j$@qo&lt;esc&gt;:%!awk 'a[$0]++'
jdG
</code></pre>
<p><a href=""https://tio.run/##K/v/v7AwI7JApcKhsNChMN8mtTjZLksFxrJSVUwsz1ZQT4xWMYjV1lbnykpx//8/JbUgsagkNzWvhAvC/K9bBgA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>No regex.</p>
<p>Takes the strings on two separate lines. The awk command is from <a href=""https://stackoverflow.com/a/26982021/4568534"">here.</a></p>
<p>Once the matching prefixes are found, we delete everything except the first line.</p>
","80214","","80214","","2021-04-09 03:15:41","2021-04-09 03:15:41","","","","0","","","","CC BY-SA 4.0"
"223127","2","","65549","2021-04-09 05:53:17","","2","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, <sup><s>35</s></sup> 29 bytes</h1>
<pre><code>C0&lt;esc&gt;qqy$V!tr 01 10
P|q@-@q@-lD
</code></pre>
<p><a href=""https://tio.run/##K/v/39nAJrU42a6wsFIlTLGkSMHAUMHQgCugptBB1wGIc1z@/zcy@K9bBgA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>-6 bytes from Leo.</p>
<p>Prints the first <span class=""math-container"">\$n\$</span> elements.</p>
<p>The sequence is basically a string replacement and append, so it does that <span class=""math-container"">\$n\$</span> times using <code>tr</code> and then truncates the sequence to <span class=""math-container"">\$n\$</span> digits.</p>
","80214","","80214","","2021-04-09 07:24:57","2021-04-09 07:24:57","","","","2","","","","CC BY-SA 4.0"
"223143","2","","219576","2021-04-09 12:03:17","","0","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 30 bytes</h1>
<pre><code>i00&lt;esc&gt;&lt;C-a&gt;hxpi0&lt;esc&gt;0&quot;aDi0&lt;esc&gt;qqYp&lt;C-a&gt;q@a@qdd
</code></pre>
<p><a href=""https://tio.run/##K/v/P9PAwCa1ONnOxlk30S6joiATwjVQSnSBMgsLIwvAsoUOiQ6FKSn////XLQMA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>can definitely be improved.</p>
","80214","","","","","2021-04-09 12:03:17","","","","0","","","","CC BY-SA 4.0"
"223163","2","","90438","2021-04-09 16:43:40","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 22 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>à╝á■╬h½₧£Hδuóß►Δδ£ƒ┐#R
</code></pre>
<p><a href=""https://staxlang.xyz/#p=85bca0fece68ab9e9c48eb75a2e110ffeb9c9fbf2352&amp;i=%2F%5C%5C%5C%0A%2F%2F%5C%5C%2F%2F%2F%5C%2F%5C%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%5C&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-04-09 16:43:40","","","","0","","","","CC BY-SA 4.0"
"223196","2","","85","2021-04-10 07:26:59","","1","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 32 bytes</h1>
<pre><code>i1
1&lt;esc&gt;qqkyjGp:s:\n:+
C&lt;C-r&gt;=&lt;C-r&gt;&quot;
&lt;esc&gt;@qq@q
</code></pre>
<p><a href=""https://tio.run/##K/v/P9OQy9AmtTjZrrAwuzLLvcCq2Comz0qby9nGWbfIzhZMKnGBVTgUFjoU/v//X7cMAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">(don't)Try it online!</a></p>
<p>Prints the sequence forever.</p>
<p>Output is not visible on TIO, so here's the first 99 iterations: <a href=""https://tio.run/##K/v/P9OQy9AmtTjZrrAwuzLLvcCq2Comz0qby9nGWbfIzhZMKnFBVFhaOhT@//9ftwwA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Last accurate value is <span class=""math-container"">\$7540113804746346429\$</span> after which it exceeds the integer limit.</p>
","80214","","","","","2021-04-10 07:26:59","","","","0","","","","CC BY-SA 4.0"
"223205","2","","125237","2021-04-10 11:08:39","","2","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 34 bytes</h1>
<pre><code>C&lt;C-r&gt;=sqrt(&lt;C-r&gt;"")
&lt;esc&gt;:s/.\+\.0\n
:s/.\+/1

</code></pre>
<p><a href=""https://tio.run/##K/v/39nGWbfIzra4sKhEA8xU0uSySS1OtrMq1teL0Y7RM4jJ44Kw9Q25/v83NPivWwYA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Returns empty string for a square, <code>1</code> for non-square.</p>
<h2>Explanation</h2>
<pre><code>C&lt;C-r&gt;=sqrt(&lt;C-r&gt;&quot;)
C                   cut the input line, enter insert mode
 &lt;C-r&gt;=             evaluate the following math command:
       sqrt(      ) square root of
            &lt;C-r&gt;&quot;  cut input line in register &quot;

&lt;esc&gt;:s/.\+\.0\n/
&lt;esc&gt;               exit insert mode
     :s/.\+\.0\n/   remove instance of &lt;digits&gt;.0 
                    this removes a perfect square root.

:s/.\+/1            replace any other non-newline chars left with
                    a single 1.
</code></pre>
","80214","","80214","","2021-04-11 15:19:37","2021-04-11 15:19:37","","","","0","","","","CC BY-SA 4.0"
"223220","2","","199995","2021-04-10 16:56:36","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>9</s></sup> 7 bytes</h1>
<pre><code>ḟoΛεd∫∞
</code></pre>
<p><a href=""https://tio.run/##ARkA5v9odXNr///huJ9vzpvOtWTiiKviiJ7///8y"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>-2 bytes from Leo.</p>
","80214","","80214","","2021-04-11 04:18:59","2021-04-11 04:18:59","","","","2","","","","CC BY-SA 4.0"
"223260","2","","223255","2021-04-11 12:02:24","","8","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""noreferrer"">Husk</a>, 10 bytes</h1>
<pre><code>►ȯLU¡oΠd↔ŀ
</code></pre>
<p><a href=""https://tio.run/##AR0A4v9odXNr///ilrrIr0xVwqFvzqBk4oaUxYD///81MA"" rel=""noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>►ȯLU¡oΠd↔ŀ
        ↔ŀ reverse the range 0..n-1
►ȯ         max-by, returning the last maximal element for the following:
    ¡o      create an infinite list using:
      Πd     product of digits.
   U        longest unique prefix
  L         take its length  
</code></pre>
","80214","","","","","2021-04-11 12:02:24","","","","2","","","","CC BY-SA 4.0"
"223272","2","","120897","2021-04-11 15:20:58","","2","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 20 bytes</h1>
<pre><code>:s/-
C&lt;C-r&gt;=strlen(&lt;C-r&gt;&quot;)
&lt;esc&gt;
</code></pre>
<p><a href=""https://tio.run/##K/v/36pYX5fL2cZZt8jOtrikKCc1TwPMUdLkskktTrb7/1/X3MLyv24ZAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Remove minuses(if any), cut the line, and get its length.</p>
<p>Not sure if I need the <code>&lt;esc&gt;</code> at the end.</p>
","80214","","","","","2021-04-11 15:20:58","","","","1","","","","CC BY-SA 4.0"
"223293","2","","93223","2021-04-12 04:34:24","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 4 bytes</h1>
<pre><code>Ḟ·+\
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//@GOeYe2a8f8//8/2kTHSMdQxxiIjWIB"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>pretty simple with <code>TNum</code> being a rational type.</p>
","80214","","","","","2021-04-12 04:34:24","","","","0","","","","CC BY-SA 4.0"
"223294","2","","48401","2021-04-12 05:25:21","","1","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 11 unique characters, N=6</h1>
<pre><code>irow␛␛
cdddd␛
o␛i␛␛␛
l␛␛a␛␛
␛kdd␛␛
␛iblk␛
</code></pre>
<p><a href=""https://tio.run/##K/v/P7Mov9wmtTjZDkxwJacAAYSZD6YyEZIQ4RwEOxFJGExmQ/UiCWUm5WSDGf///9ctAwA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>lot of escapes here. N=5 might be achievable, but I can't see a way to do it without increasing the unique characters.</p>
","80214","","","","","2021-04-12 05:25:21","","","","0","","","","CC BY-SA 4.0"
"223317","2","","223314","2021-04-12 14:54:05","","4","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 23 bytes</h1>
<pre><code>L◄Lfo=⁰Σ↑o≤⁰LṖƒ(+İ€m*10
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/3@fR9BaftHzbR40bzi1@1DYx/1HnEiDb5@HOaccmaWgf2fCoaU2ulqHB////jQwA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Extremely slow past 11.</p>
<h2>Explanation</h2>
<pre><code>L◄Lfo=⁰Σ↑o≤⁰LṖƒ(+İ€m*10
              ƒ(        create an infinite list using:
                 İ€     currency denomination builtin: [1,1/2,1/5,...200]
                +       plus
                   m*10 the input mapped to *10
                        this gives [1,1/2,...100] + 10*([1,1/2,...100] + (10*[1,1/2,...100]...))
             Ṗ          powerset(unordered)
        ↑o≤⁰L           take all sequences which have length ≤ input
                        this makes sure everything till [1]*n is in the list
   fo=⁰Σ                filter out the ones which do not sum to the input
 ◄L                     maximum element by length
L                       take the length
</code></pre>
","80214","","","","","2021-04-12 14:54:05","","","","4","","","","CC BY-SA 4.0"
"223329","2","","170615","2021-04-12 15:59:53","","1","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 105 bytes</h1>
<pre><code>""aDiaibgyor&lt;esc&gt;0vg_y$@ap0l@alhd$:s/a/ v/g
qqYP0xjYP!!rev
gJkhq2@a@qylpp02ld$0VG:center&lt;c-r&gt;=2*(&lt;c-r&gt;a+ceil(1+&lt;c-r&gt;a/7))

</code></pre>
<p><a href=""https://tio.run/##K/v/XynRJTMxMym9Mr/IJrU42c6gLD2@UsUhscAgxyExJyNFxapYP1FfoUw/nauwMDLAoCIrMkBRsSi1jCvdKzuj0Mgh0aGwMqegwMAoJ0XFIMzdKjk1ryS1yCZZt8jO1khLA8xI1E5OzczRMNSG8PTNNTW5/v83Mv2vWwYA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>There's many possible saves here, but for now I'm just happy I got it working.</p>
","80214","","","","","2021-04-12 15:59:53","","","","0","","","","CC BY-SA 4.0"
"223334","2","","68022","2021-04-12 17:03:18","","0","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 14 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>ü┴(gÇ%╩[↑÷&gt;7♫░
</code></pre>
<p><a href=""https://staxlang.xyz/#p=81c128678025ca5b18f63e370eb0&amp;iamp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
","80214","","","","","2021-04-12 17:03:18","","","","0","","","","CC BY-SA 4.0"
"223369","2","","223366","2021-04-13 08:41:02","","4","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 27 bytes</h1>
<pre><code>föΛo§=oΠ←od→C2§e←→X4dfo=7LN
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P@3wtnOz8w8tt80/t@BR24T8lEdtk5yNDi1PBXKAzAiTlLR8W3Mfv///AQ"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>returns the list of all meeker numbers. It's horribly inefficient, so <a href=""https://tio.run/##yygtzv7//1HbxLTD287Nzj@03Db/3IJHbRPyUx61TXI2OrQ8FcgBMiNMUh41NXIBFebbmvscWggUMjQAg////xsaAAA"" rel=""nofollow noreferrer"">here's a version which starts from 1e7, and shows the first n values.</a></p>
<p><strong>EDIT:</strong> corrected the answer after Dominic Van Essen found a bug.</p>
","80214","","80214","","2021-04-13 15:32:04","2021-04-13 15:32:04","","","","6","","","","CC BY-SA 4.0"
"223388","2","","173038","2021-04-13 12:40:53","","1","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 84 bytes</h1>
<pre><code>:sort
Go&lt;c-r&gt;=(line('$')-1)/2
&lt;esc&gt;dd@&quot;kk0vg_&quot;ayGqq0C&lt;c-r&gt;=abs(&lt;c-r&gt;&quot;-&lt;c-r&gt;a)
&lt;esc&gt;k@qq@q:%s/\n/+
$x0C&lt;c-r&gt;=&lt;c-r&gt;&quot;
&lt;esc&gt;
</code></pre>
<p><a href=""https://tio.run/##K/v/36o4v6iEyz3fJlm3yM5WIyczL1VDXUVdU9dQU9@Iyya1ONkuJcVBKTvboCw9Ximx0r2w0MAZojgxqVgDzFLSBVOJmhD12Q6FhQ6FVqrF@jF5@tpcKhUwDRDFEEX//5tyWXAZGnEZcxkBGSZcpv91ywA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p><code>&lt;c-r&gt;</code> is very helpful in finding the median and the whole calculation in general.</p>
","80214","","","","","2021-04-13 12:40:53","","","","0","","","","CC BY-SA 4.0"
"223438","2","","129259","2021-04-14 04:17:01","","2","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 62 bytes</h1>
<pre><code>YpC&lt;c-r&gt;=strlen('&lt;c-r&gt;&quot;')
&lt;esc&gt;jYp&lt;c-x&gt;&quot;aDkk:s:\n:/
C&lt;c-r&gt;=&lt;c-r&gt;&quot;
&lt;esc&gt;&quot;bDkkqq@blha
&lt;esc&gt;q@a@q
</code></pre>
<p><a href=""https://tio.run/##K/v/P7LA2SZZt8jOtrikKCc1T0MdzFNS1@SySS1OtsuKLAAKVNgpJbpkZ1sVW8XkWelzQXVAVELUKSUB5QsLHZJyMhIhIoUOiQ6F//97pObk5OsolOcX5aQocpn81y0DAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>takes input as 2 lines, returns the divisions on separate lines.</p>
<p><code>a</code> is useful here to append a newline after the current character.</p>
","80214","","","","","2021-04-14 04:17:01","","","","0","","","","CC BY-SA 4.0"
"223461","2","","223452","2021-04-14 09:56:24","","6","","<h1><a href=""https://github.com/abrudz/dyalog-apl-extended"" rel=""noreferrer"">APL(Dyalog Extended)</a>, <sup><s></s></sup>12 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""noreferrer"">SBCS</a></sup></h1>
<pre><code>{⍎⊃,/⍕¨⍭⍵}⍣=
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=q37U2/eoq1lH/1Hv1EMrHvWufdS7tfZR72JbAA&amp;f=AwA&amp;i=S1MwNOBKUzACYmMgNgFiUyA2A2JzAA&amp;r=tio&amp;l=apl-dyalog-extended&amp;m=dfn&amp;n=f"" rel=""noreferrer"">Try it on APLgolf!</a></p>
<p>A dfn submission which takes a single argument.</p>
","80214","","","","","2021-04-14 09:56:24","","","","1","","","","CC BY-SA 4.0"
"223473","2","","204969","2021-04-14 11:34:20","","2","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 18 bytes</h1>
<pre><code>f:i*60&lt;Esc&gt;lr+0C&lt;c-r&gt;=&lt;c-r&gt;&quot;
&lt;Esc&gt;
</code></pre>
<p><a href=""https://tio.run/##K/v/P80qU8vMwMa1ONkup0jbwNkmWbfIzhZMKnGBhf//NzC0srT8r1sGAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
","80214","","","","","2021-04-14 11:34:20","","","","0","","","","CC BY-SA 4.0"
"223531","2","","223527","2021-04-15 05:17:12","","8","","<h1><a href=""https://dyalog.com"" rel=""noreferrer"">APL(Dyalog Unicode)</a>, <sup><s>8</s></sup> 6 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""noreferrer"">SBCS</a></sup></h1>
<pre><code>/⍨∘~∘≠
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=AwA&amp;c=03/Uu@JRx4w6IH7UuQAA&amp;f=rY4xCsJAEEV7T2EXhS9mZnY3CbmBhRaWIa0eQqyEgAFFC3ux8gJewKPsSfwJsbGWgWX2/fnzZxubyy6eb4v1ahnbw2Y@9O9nUiaTeLzHtontYxpPr/0oNtcthUqgMDh4BGTIUdRl1REj8eRGKnUy7iZZVHtHT5Sd9kSGmZkgJRQ15wOV/t89w4afLEgKoZcOgziIhwQIE3NIAeUuehhiUAf10ADNoDm0gKUwgXElr@WhHhZgGSyHFXDp97D/VZ18AA&amp;i=AwA&amp;r=tryAPL&amp;l=apl-dyalog-extended&amp;m=train&amp;n=f"" rel=""noreferrer"">Try it on APLgolf!</a></p>
<p>A function submission which takes L1 on the left and L2 on the right.</p>
<p>-2 bytes from Bubbler.</p>
<h2>Explanation</h2>
<pre><code>/⍨∘~∘≠
/⍨     remove elements from L! identified by:
   ~   the bitwise negation of
     ≠ unique mask of L2
</code></pre>
","80214","","80214","","2021-04-15 05:33:26","2021-04-15 05:33:26","","","","2","","","","CC BY-SA 4.0"
"223624","2","","223590","2021-04-16 02:20:06","","3","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, <sup><S>38</s></sup> 30 bytes</h1>
<pre><code>&quot;aD@aO0&lt;ESC&gt;V{g&lt;C-A&gt;V}JqqYpdw$pq@a@qdk
</code></pre>
<p><a href=""https://tio.run/##K/v/XynRxSHR38DGNdjZLqw63cZZ19EurNarsDCyIKVcpaDQIdGhMCX7/39jg/@6ZQA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Input as a single number.</p>
<p>Range creating script taken from Leo's <a href=""https://codegolf.stackexchange.com/a/223249/80214"">Range, Reverse, Sum</a> answer.</p>
<p>-8 bytes from Leo using <code>J</code>.</p>
<p>Fixed the problem with multidigit numbers.</p>
<h2>Explanation</h2>
<pre><code>&quot;aD@aO0&lt;ESC&gt;V{g&lt;C-A&gt;V}J
&quot;aD                          delete first line and store in register a
   @aO0&lt;ESC&gt;                 print 0 on a newline a times
            V{g&lt;C-A&gt;         convert the zeroes to a range
                    V}J      select all, join with spaces

$xqqYp2x$pq@a@qdk
$x                           remove the last space
  qq                         start macro q:
    Yp                        duplicate current line
      dw                      remove first word (number + space)
        $p                    paste at the end
          q                  end macro
           @a@q              replay macro a times
               dk            delete last two extra iterations
</code></pre>
","80214","","80214","","2021-04-16 03:40:19","2021-04-16 03:40:19","","","","4","","","","CC BY-SA 4.0"
"223627","2","","223564","2021-04-16 02:35:01","","3","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 8 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>É3º╩(\╝░
</code></pre>
<p><a href=""https://staxlang.xyz/#p=9033a7ca285cbcb0&amp;i=1%0A2%0A8%0A9%0A11%0A20%0A43%0A134%0A3492%0A3493%0A65595&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>wi;i<span class=""math-container"">\$e|p!
w          while
   |p! end result is not prime, do:
 i          push index
  ;i        push input and index again
\$</span>      stringify
      e     convert to int
           final index is implicitly output
</code></pre>
","80214","","","","","2021-04-16 02:35:01","","","","0","","","","CC BY-SA 4.0"
"223640","2","","47128","2021-04-16 06:25:56","","1","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 18 + 51 = 69 bytes</h1>
<h2>Encoder, 18 bytes</h2>
<pre><code>o&lt;esc&gt;kqqlxjpkl@qq@qgJ
</code></pre>
<p><a href=""https://tio.run/##K/v/P98mtTjZLruwMKciqyA7x6Gw0KEw3ev/f4/UnJx8hfD8opyU/7plAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Moves every other character to the next line, and joins the two.</p>
<h2>Decoder, 51 bytes</h2>
<pre><code>YpC&lt;c-r&gt;=strlen('&lt;c-r&gt;&quot;')/2+1
&lt;esc&gt;Dk@&quot;li
&lt;esc&gt;jdd{qqld$}o&lt;esc&gt;pk0@qq@q
</code></pre>
<p><a href=""https://tio.run/##K/v/P7LA2SZZt8jOtrikKCc1T0MdzFNS19Q30jbkskktTrZzyXZQysmEsLNSUqoLC3NSVGrzwfyCbAOHwkKHwv//PXLyw4tSUnMU8nP@65YBAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Uses a recursive macro to delete till the end and use it as a flatten-transpose. This took a while to figure out.</p>
","80214","","","","","2021-04-16 06:25:56","","","","1","","","","CC BY-SA 4.0"
"223664","2","","62732","2021-04-16 16:15:33","","0","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, <Sup><s>18</s></sup> 13 bytes</h1>
<pre><code>xqqp/1
@qq@qx
</code></pre>
<p><a href=""https://tio.run/##K/v/v6KwsEDfkMuhsNChsOL/fwMA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Somehow, there was no existing vim answer for this. I was happy to oblige.</p>
<p>-5 bytes from Aaron Miller.</p>
<h2>Explanation</h2>
<pre><code>xqqp/1
x      delete the input char 
 qq      start macro q
   p     paste the input
    /1   find 1 (exits if 0 isn't matched)

@qq@qx    
@q       recursively call macro q
  q    end macro q
   @q  call macro q
     x delete last char (never gets executed in the case of 1)
</code></pre>
","80214","","80214","","2021-04-17 02:34:26","2021-04-17 02:34:26","","","","5","","","","CC BY-SA 4.0"
"223699","2","","223676","2021-04-17 03:53:32","","5","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, <sup><s>81 79</s></sup> 70 bytes</h1>
<pre><code>""aD@ai0
&lt;esc&gt;V{g&lt;c-a&gt;{dd}dkqqC&lt;c-r&gt;=!(&lt;c-r&gt;a%&lt;c-r&gt;"")*&lt;c-r&gt;""
&lt;esc&gt;k@qq@q:%s/\n/+
$x0C&lt;c-r&gt;=&lt;c-r&gt;a/(&lt;c-r&gt;"")

</code></pre>
<p><a href=""https://tio.run/##K/v/XynRxSEx04DLJrU42S6sOt0mWTfRrjolpTYlu7DQGcgrsrNV1ADTiapgSklTC0JD9GQ7FBY6FFqpFuvH5Olrc6lUGEB1QfToa0A1cf3/b2T4X7cMAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Uses the observation in <a href=""https://codegolf.stackexchange.com/a/223678/80214"">rak1507's Jelly answer.</a></p>
<p>-2 bytes from kops.</p>
<p>-9 more bytes from kops, removing the entire third line!</p>
","80214","","80214","","2021-04-17 06:51:10","2021-04-17 06:51:10","","","","3","","","","CC BY-SA 4.0"
"223700","2","","190579","2021-04-17 04:41:48","","1","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 93 bytes</h1>
<pre><code>:s/1\n/a
D@""i1 &lt;esc&gt;
qqYplllA]&lt;esc&gt;0i[&lt;esc&gt;:s/\(\d\+\) \(\d\+\) /\1+\2,/g
C&lt;c-r&gt;=&lt;c-r&gt;""
&lt;Esc&gt;&lt;c-o&gt;V}J0i &lt;esc&gt;@qq@qdd:s/ i1/1

</code></pre>
<p><a href=""https://tio.run/##K/v/36pY3zAmTz@Ry8VBKdNQwSa1ONmOq7AwsiAnJ8cxFsw1yIwG00ClMRoxKTHaMZoKcIZ@jKF2jJGOfjqXs02ybpGdLZhU4rJxBeoAsvPtwmq9DDIhBjsUFjoUpqQADVLINNQ35Pr/39Tsv24ZAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Special casing 1 for <code>&lt;c-o&gt;</code> was a bit annoying, but the rest plays out smoothly.
Possible byte saves can be in the large regex, and maybe removing the 1 special case.</p>
<p>Outputs as space separated lists.</p>
","80214","","","","","2021-04-17 04:41:48","","","","0","","","","CC BY-SA 4.0"
"223708","2","","86880","2021-04-17 12:11:07","","1","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 17 bytes</h1>
<pre><code>!¡λṁ!¹m≠→L¹↑_2)ḋ3
</code></pre>
<p><a href=""https://tio.run/##ASoA1f9odXNr//8hwqHOu@G5gSHCuW3iiaDihpJMwrnihpFfMinhuIsz////MTU"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>Feels too long. I'll post something with <code>fix</code> soon.</p>
","80214","","","","","2021-04-17 12:11:07","","","","0","","","","CC BY-SA 4.0"
"223812","2","","223756","2021-04-19 03:12:28","","2","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 54 bytes</h1>
<pre><code>YpC&lt;c-r&gt;=strlen('&lt;c-r&gt;&quot;')/2
&lt;esc&gt;DkA &lt;esc&gt;0@&quot;li
&lt;esc&gt;$@&quot;hi
&lt;Esc&gt;:%!rev
gJgJF x
</code></pre>
<p><a href=""https://tio.run/##K/v/P7LA2SZZt8jOtrikKCc1T0MdzFNS19Q34rJJLU62c8l2VAAzDByUcjIhYioOShlApiuQaaWqWJRaxpXule7lplDx/39@Xn5uYkl@QX5qZuJ/3TIA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>The 'no whitespace' guarantee helped a lot with writing this solution.</p>
<h2>Explanation</h2>
<pre><code>YpC&lt;c-r&gt;=strlen('&lt;c-r&gt;&quot;')/2
Yp                          copy input to new line
  C                         cut and open insert mode
   &lt;c-r&gt;=strlen('&lt;c-r&gt;&quot;')/2 set the line to half of input length
                            call this k

&lt;esc&gt;DkA &lt;esc&gt;0@&quot;li         
&lt;esc&gt;                       exit insert mode
     D                      delete the number k(and copy)
      k                     move to the input
       A &lt;esc&gt;              insert a space at the end
              0@&quot;l          move right k times from the start
                  i         insert a newline

&lt;esc&gt;$@&quot;hi
     $@&quot;hi                  do the same thing, except from the right

&lt;esc&gt;:%!rev                 reverse all lines

gJgJF x                     
gJgJ                        join the three lines
    F                       navigate to the previous space
      x                     delete it
</code></pre>
","80214","","","","","2021-04-19 03:12:28","","","","0","","","","CC BY-SA 4.0"
"223816","2","","223792","2021-04-19 04:02:13","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 5 bytes</h1>
<pre><code>ġo=1≠
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//8jCfFvDR50L/v//H22oY6RjrGOqYwbEJkBoGAsA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>group on absolute difference = 1.</p>
","80214","","","","","2021-04-19 04:02:13","","","","0","","","","CC BY-SA 4.0"
"223817","2","","180509","2021-04-19 04:14:52","","2","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, 3 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>［］─
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=JXVGRjNCJXVGRjNEJXUyNTAw,i=SGVsbG8_,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
","80214","","","","","2021-04-19 04:14:52","","","","0","","","","CC BY-SA 4.0"
"223842","2","","223789","2021-04-19 10:34:27","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 7 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>üu§└ÿà♦
</code></pre>
<p><a href=""https://staxlang.xyz/#p=817515c0988504&amp;i=15"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p><del>TIL that <code>|M</code> returns infinity for empty lists</del>. Found a method without <code>|M</code>.</p>
","80214","","","","","2021-04-19 10:34:27","","","","0","","","","CC BY-SA 4.0"
"223900","2","","223881","2021-04-20 02:43:42","","4","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 7 bytes</h1>
<pre><code>n!aa!a!
</code></pre>
<p><a href=""https://staxlang.xyz/#c=%7B%22Code%3A%22d%0An%21aa%21a%21%0A%7DY%0A%22Testcases%22d%0A%7B-%7D+2N+%7BJ%7D+2+y%21P%0A%7BH%2B%7D+5+%7B%3At%7D+9+y%21P&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>A full program which can be executed as a block as well.</p>
<p>accepts the arguments as <code>g x f y</code>.</p>
","80214","","","","","2021-04-20 02:43:42","","","","7","","","","CC BY-SA 4.0"
"224023","2","","224019","2021-04-21 02:57:09","","6","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>11</s></sup> 9 bytes</h1>
<pre><code>€ΣTC3ṫ100
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//1HTmnOLQ5yNH@5cbWhg8P8/AA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##AUYAuf9odXNr/20oUysoKyIgLT4gInPigoFyKSnCtv/igqzOo1RDM@G5qzEwMP///zU5Cjg5CjE2CjI2CjYzCjQ1CjkxCjE4CjE5"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify all tests</a></p>
<p>-2 bytes, borrowing Unrelated String's idea.</p>
<h2>Explanation</h2>
<pre><code>€ΣTC3ṫ100
     ṫ100 [100..1]
   C3     slices of 3
  T       transpose
 Σ        join
€         index of input
</code></pre>
","80214","","80214","","2021-04-21 04:04:42","2021-04-21 04:04:42","","","","0","","","","CC BY-SA 4.0"
"224028","2","","224000","2021-04-21 03:53:47","","2","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 10 bytes</h1>
<pre><code>:sor u
Gd{
</code></pre>
<p><a href=""https://tio.run/##K/v/36o4v0ihlMs9pfr/f0MuCDT5r1sGAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Input as a list of lines. Outputs a falsy value (Empty output) for all items equal, and outputs a number otherwise.</p>
<p>Gets the unique lines, goes to the last line and deletes till the beginning.</p>
","80214","","","","","2021-04-21 03:53:47","","","","0","","","","CC BY-SA 4.0"
"224030","2","","224029","2021-04-21 04:26:15","","6","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, <sup><s>43 41</s></sup> 40 bytes</h1>
<pre><code>`JD;&quot;¦$&quot;ṁ?Iȯ:'^`J&quot;{}&quot;ṁos€&quot;¹²³⁴⁵⁶⁷⁸⁹&quot;Λ√ġ√
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P8HLxVrp0DIVpYc7G@09T6y3Uo9L8FKqrgXx84sfNa1ROrTz0KZDmx81bnnUuPVR47ZHjdsfNe541LhT6dzsRx2zjiwEEv///684tKmy6tAmAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>The superscripts are 1 byte each since they're in Husk's codepage.</p>
<p>I wanted to replace <code>+₁+₁</code> with <code>S+`+&quot;¦$&quot;</code> but it didn't work for some reason.. :(</p>
<p>-2 bytes borrowing the indexing idea from hyper-neutrino.</p>
<p>-1 byte from Leo.</p>
<h2>Explanation</h2>
<pre><code>`JD;&quot;¦$&quot;ṁ?Iȯ`:'}+&quot;^{&quot;ṁos€&quot;¹..⁹&quot;Λ√ġ√
                              ġ√ group on alphabets
     ṁ                           map and concatenate with:
      ?                            if:
                            Λ√      the group is alphabetical
       I                             leave as is
        ȯ`:'}+&quot;^{&quot;ṁos€&quot;¹..⁹&quot;        otherwise:
                  ṁȯ                  map and concat each char to:
                     €&quot;¹..⁹&quot;           index in ¹..⁹(0 if not present)
                    s                  cast to string
             +&quot;^{&quot;                    prepend &quot;^{&quot;
         `:'}                         append '{'
`JD;&quot;¦$&quot;                            surround the final string with &quot;\$&quot;
                     
</code></pre>
","80214","","80214","","2021-04-21 11:49:51","2021-04-21 11:49:51","","","","0","","","","CC BY-SA 4.0"
"224202","2","","224195","2021-04-22 15:37:58","","6","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, <sup><s>33 26</s></sup> 25 bytes</h1>
<pre><code>qqjYkPJr-0C&lt;c-r&gt;=&lt;c-r&gt;&quot;
&lt;Esc&gt;j@qq@qdd
</code></pre>
<p><a href=""https://tio.run/##K/v/v7AwKzI7wKtI18DZJlm3yM4WTCpx2bgWJ9tlORQWOhSmpPz/b8Bl@F@3DAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Input as a newline separated list of integers.</p>
<p>-7 bytes from kops.</p>
<p>-1 more byte from kops.</p>
<h2>Explanation</h2>
<pre><code>qqjYpkk:s/\n/-
qq             start macro q
  jYp          go down and duplicate the second line from the cursor
     kk        move back to the original position
       :s/\n/- replace newline with -
               Current Line: n1-n2

C&lt;c-r&gt;=-(&lt;c-r&gt;&quot;) 
C                cut current line, enter insert mode
 &lt;c-r&gt;=          evaluate the following
       -(&lt;c-r&gt;&quot;) negate n1-n2

&lt;Esc&gt;j@qq@qdd
&lt;Esc&gt;         exit insert mode
     j        go 1 step down to the next values
      @qq     recursively call macro q and end macro
         @q   call macro q
           dd delete last extra line
</code></pre>
","80214","","80214","","2021-04-23 05:41:32","2021-04-23 05:41:32","","","","3","","","","CC BY-SA 4.0"
"224245","2","","224235","2021-04-23 06:19:44","","3","","<h1><a href=""https://dyalog.com"" rel=""nofollow noreferrer"">APL(Dyalog Unicode)</a>, <sup><s>149</s></sup> 147 bytes <sup><a href=""https://github.com/abrudz/SBCS"" rel=""nofollow noreferrer"">SBCS</a></sup></h1>
<pre><code>p v o g←(1 1)(0 1)⍬⎕
l←{v⊢←0 ¯1}
r←{v⊢←0 1}
u←{v⊢←¯1 0}
d←{v⊢←1 0}
b←{o,←⊂p⋄p+←v⋄p⊢←1+(⍴g)|p-1}
{o∊⍨⊂p:'T'⋄'.'=⍨x←p⌷g:b⍵⋄x∊⎕A:x⋄⍎x,'⍵⋄b⍵'}⍣{⊃⍵∊⎕A}0
</code></pre>
<p><a href=""https://razetime.github.io/APLgolf/?h=e9Q7V8HOJq5MWeFR2ySFopzSlCQA&amp;c=K1AoU8hXSH/UNkHDUMFQU8MASDzqXfOobypXDlCwuuxR1yIgbaBwaL1hLVcRihBQoBRJAKhCwaCWKwVJCCyQBBLI1wGSj7qaCh51txRoA9llIAZUlbbGo94t6Zo1BbpAI6vzH3V0PepdAVJspR6iDlSnrqduCxSpAKoteNSzPd0q6VHvVqB4BUhl31RHqwog51FvX4WOOkQCJK9e@6h3cfWjrmaQEERdrQEA&amp;f=AwA&amp;i=S@N61DZRvUgPCFL01BXUQQw9RwjLCcSGiYFYj3rnKjhypUG1pCBpKYJoyUFoKUVocYJqQTIORDk6IXggZSGZqVCFYGMdndAsTIFqdEqCmwBllBZhtay0FGZhjmMRlFmqBzMmx6lID2ZQCrIPEe6A@K9IzxFkR44TXBoA&amp;r=tio&amp;l=apl-dyalog&amp;m=tradfn&amp;n=f"" rel=""nofollow noreferrer"">Try it on APLgolf!</a></p>
<p>A tradfn submission which takes the grid as a character matrix. I'm sure there's multiple places to improve this.</p>
<p><code>&gt;&lt;^v# → rludb</code> and the rest of the instructions <code>.AB</code> remain the same.</p>
<p><a href=""https://staxlang.xyz/#c=L%7B%22%3Er%3Cl%5Euvd%23b%22%7Ct%27%27%7CSmJ%27%E2%86%91s%2B&amp;i=...%5E%5E...%0A..%3CA%3E...%0A.%5E.v....%0A%3CB%3E.....%0A.v......"" rel=""nofollow noreferrer"">Here's a testcase converter, in case there are other inputs.</a></p>
","80214","","80214","","2021-04-24 02:36:09","2021-04-24 02:36:09","","","","4","","","","CC BY-SA 4.0"
"224313","1","","","2021-04-24 12:12:05","","12","143","<p><a href=""https://mlochbaum.github.io/BQN/try.html"" rel=""noreferrer"">Marshall Lochbaum's online BQN REPL</a> has an interesting(and aesthetically pleasing) method of displaying arrays. Your task is to implement a version with simpler rules.</p>
<pre><code>[2,[3],4,[[[6,[5],7]]]]
</code></pre>
<p>becomes:</p>
<pre><code>┌─                                 
· 2 ┌·    4 ┌·                     
    · 3     · ┌·                   
        ┘     · ┌─                 
                · 6 ┌·    7        
                    · 5            
                        ┘          
                            ┘      
                              ┘    
                                ┘  
                                  ┘
</code></pre>
<h2>Rules for drawing</h2>
<ul>
<li>A singleton array has</li>
</ul>
<pre><code>┌· 
·
</code></pre>
<p>as its top left corner.</p>
<ul>
<li>A non-singleton array has</li>
</ul>
<pre><code>┌─  
·
</code></pre>
<p>as its top left corner.</p>
<p>(In the actual BQN, this is used for rank-0, or &quot;unit&quot; arrays)</p>
<ul>
<li>All arrays have</li>
</ul>
<pre><code>┘
</code></pre>
<p>as their bottom right corner.</p>
<ul>
<li>Each element at a certain depth will be displayed at the same depth vertically.
For example, 2 and 4 are displayed 1 unit from the top since they are at depth 1.</li>
<li>Each further level of nesting depth moves 1 unit down in depth.</li>
<li>Numbers next to each other will be separated by a single space.</li>
</ul>
<h2>Other details</h2>
<ul>
<li>You may take a ragged numeric array in any way your language supports.</li>
<li>The input will only consist of integers and nested arrays containing integers.</li>
<li>If your language does not support arrays with depth, you may take a string/other equivalent that your language supports.</li>
<li>If your language's codepage does not contain the characters <code>┌ · ─ ┘</code>, you can count them as 1 byte.</li>
<li>This is <a href=""/questions/tagged/code-golf"" class=""post-tag"" title=""show questions tagged &#39;code-golf&#39;"" rel=""tag"">code-golf</a>. Shortest answer in each language wins.</li>
<li>Since bacon strips are thin, your code must be thin and small as well.</li>
</ul>
","80214","","","","","2021-04-24 16:59:14","Pretty-print my BQN Arrays","<code-golf><ascii-art>","1","5","","","","CC BY-SA 4.0"
"224347","2","","6600","2021-04-25 05:22:59","","0","","<h1><a href=""https://github.com/somebody1234/Charcoal"" rel=""nofollow noreferrer"">Charcoal</a>, 14 bytes</h1>
<pre><code>ＦＳ≡ι(«↘»)«↗»«ι
</code></pre>
<p><a href=""https://tio.run/##VY49C8IwFEXn9lc8Mr03dPBraVcXB0EUJ3EIMW2CsQlp2g7S3x5jEaHjvffAuUJxLyw3MdbW46F1fbgEr9sGiaAbdRAKNcE7zzLBOwkMWTmn7GgHieXeju1ZNypQlcrpj9ESu7ol9JA17034MackDElT5fM8xXhjiCtYE24At7AjeFmbDqEGNPqJQknvtexIAo7Wqu9I7B4LM8SicE40Hw"" rel=""nofollow noreferrer"">Try it online!</a> Link is to verbose version of code.</p>
","80214","","","","","2021-04-25 05:22:59","","","","0","","","","CC BY-SA 4.0"
"224378","2","","224365","2021-04-25 13:17:12","","5","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""noreferrer"">V (vim)</a>, 80 bytes</h1>
<pre><code>iMin&lt;Esc&gt;:r!echo $RANDOM
C&lt;c-r&gt;=&lt;c-r&gt;&quot;%10000
&lt;esc&gt;:s/^0\n/ce
:s/\d\+/ec
kgJAraft
</code></pre>
<p><a href=""https://tio.run/##K/v/P9M3M8/GtTjZzqpIMTU5I19BJcjRz8Xfl8vZJlm3yM4WTCqpGhoAAZdNKkhhsX6cQUyefnIqF5AZkxKjrZ@azJWd7uVYlJhW8v//f90yAA"" rel=""noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>Generate a random no. in 0-9999, and then replace 0 with ce and anything else with ec.</p>
","80214","","","","","2021-04-25 13:17:12","","","","2","","","","CC BY-SA 4.0"
"224435","2","","224401","2021-04-26 05:21:04","","3","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 14 bytes</h1>
<pre><code>←t↓≠⁰mois∫m□İ\
</code></pre>
<p><a href=""https://tio.run/##ASUA2v9odXNr///ihpB04oaT4omg4oGwbW9pc@KIq23ilqHEsFz///8x"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a> or <a href=""https://tio.run/##yygtzv4fkqsREqKuoAmkDy1PLdbQVlJ41DZJQan4UVOjpub/R20TSh61TX7UueBR44bc/MziRx2rcx9NW3hkQ8z///@jDXVMdUwsdYwMTHVMjcwsdUyNgYSRmZmZhaGOoYG5uTlQ0tLc3MLQBMi3NLMwNgJKG1uaGJtbWFjGAgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Verify all testcases</a></p>
<h2>Explanation</h2>
<pre><code>←t↓≠⁰mois∫m□İ\
            İ\ infinite list [1,1/2,1/3,...
          m□   map to squares
         ∫     cumulative sum
     mo        map to
       is      first integer in string representation
               (gets numerator)
  ↓            drop elements till
   ≠⁰          input is reached
 t             remove first item
←              take the first item
</code></pre>
","80214","","66833","","2021-04-26 11:27:06","2021-04-26 11:27:06","","","","0","","","","CC BY-SA 4.0"
"224438","2","","224401","2021-04-26 06:18:38","","3","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 15 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>┬Z°#¡Lk╢╙°m╕%ºb
</code></pre>
<p><a href=""https://staxlang.xyz/#p=c25af823ad4c6bb6d3f86db825a762&amp;i=1%0A5%0A49%0A205%0A5269%0A5369%0A266681%0A1077749%0A9778141%0A1968329%0A239437889&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Reduced from 22 with help from recursive.</p>
<h2>Explanation</h2>
<pre><code>{iiGx=!w^G}Z{Ju+Fr
{      w           while result is falsy:
 ii                push iteration index twice
   G               GoTo unclosed curly brace
          }        label:
           Z       push a zero under the index
            {   F  for 1..i
             Ju+   square, invert, add
                   return to GoTo
                 r get numerator
    x=!            is it equal to the input?
        ^          if so, increment
         G         and GoTo label
</code></pre>
","80214","","","","","2021-04-26 06:18:38","","","","0","","","","CC BY-SA 4.0"
"224462","2","","106149","2021-04-26 15:37:42","","0","","<h1><a href=""https://mlochbaum.github.io/BQN/"" rel=""nofollow noreferrer"">BQN</a>, 20 bytes</h1>
<pre><code>{2÷˜(≠𝕩)⊑»+˝˘2↕2/∧𝕩}
</code></pre>
<p><a href=""https://mlochbaum.github.io/BQN/try.html#code=TWVkaWFu4oaQezLDt8ucKOKJoPCdlakp4oqRwrsry53LmDLihpUyL+KIp/Cdlal9Ck1lZGlhbsKo4p+oIOKfqDEsNCwzLDLin6kK4p+oMSwyLDMsNCw1LDYsNyw4LDnin6kK4p+oMS41LDEuNSwxLjUsMS41LDEuNSwxLjUsMS41LDEuNSwxLjUsLTUsMTAwMDAwLDEuMywxLjTin6kK4p+oMS41LDEuNSwxLjUsMS41LDEuNSwxLjUsMS41LDEuNSwxLjUsMS41LC01LDEwMDAwMCwxLjMsMS404p+pCuKfqQ=="" rel=""nofollow noreferrer"">Try it!</a></p>
","80214","","","","","2021-04-26 15:37:42","","","","0","","","","CC BY-SA 4.0"
"224516","2","","224496","2021-04-27 04:10:47","","3","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 8 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>πdµ∞╔▓|▒
</code></pre>
<p><a href=""https://staxlang.xyz/#p=e364e6ecc9b27cb1&amp;i=%5B1,2,3,4,5%5D,1%0A%5B1,2,3,4,5%5D,57%0A%5B1,2,3,4,5%5D,254%0A%5B1,2,3,4,5%5D,100%0A%5B1,2,3,4,5%5D,107%0A%5B1,+2,+4,+6,+8%5D,58%0A%5B1,+2,+4,+6,+8%5D,71%0A%5B1,+2,+4,+6,+8%5D,255%0A%5B7%5D,49&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<h2>Explanation</h2>
<pre><code>WcEx-!CVB+
W          loop forever
 c         copy c
  E        get digits
   x       push D
    -      set difference
     !C    if empty, break out of the loop
       VB+ else add 256   
</code></pre>
","80214","","","","","2021-04-27 04:10:47","","","","0","","","","CC BY-SA 4.0"
"224519","2","","224476","2021-04-27 05:17:35","","2","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 140 bytes</h1>
<pre><code>o&lt;esc&gt;qq15wlh0y15wO&lt;esc&gt;pj0d3w@qqdk@qqt:s/ /\r/g
&lt;c-o&gt;:.,.4$sor n
:.,.4j
d3w$3bhd$:s/ /+/g
C&lt;c-r&gt;=(&lt;c-r&gt;&quot;)/3
&lt;esc&gt;k0@tq@t:%s/^\n
:sor n
{0C&lt;c-r&gt;=printf(&quot;%.2f&quot;,&lt;c-r&gt;&quot;)
&lt;esc&gt;o&lt;esc&gt;d}
</code></pre>
<p><a href=""https://tio.run/##LY5dbsIwEITfcworChJVYbPx2o4T0ShSD9ALoD5ASilUhPwIVFU9e7rr8DJrzX4z3ts0tZuPYV91XWbv30f84fEWnOsJG7rXXdecWcZySFW67dPPaLNft1UJKzDJ0PbqEoX3KWI6od2xSQL6zOQro331sgwjfkopCs1nrMeuHsvFkL5vOT63/OIDv/Zfl/GwjBegD/HqkZ2T863N3zTpAihXlENmlbbgCqUNECr2vVFkwPOWQBtRykQdKZ0DGmGyoI63GTgrvtGKEDJmfOA1WBR1/HZAXnyH0uPDjwWKIykHGEjDpAWy0mxyaUYtjFxiAf20vv0D"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>I was lucky that vim had <code>printf</code> for this challenge, I'd finished most of it before I realized the output spec (phew)</p>
","80214","","","","","2021-04-27 05:17:35","","","","2","","","","CC BY-SA 4.0"
"224574","2","","224562","2021-04-28 03:48:23","","4","","<h1>Day 0. <a href=""https://github.com/bforte/nameless-lang"" rel=""nofollow noreferrer"">nameless language</a>, 0 bytes</h1>
<pre><code></code></pre>
<p><a href=""https://tio.run/##y0vMTc1JLS7@DwQA"" rel=""nofollow noreferrer"" title=""nameless language – Try It Online"">Try it online!</a></p>
<p>Line for next day: <code>Juno was mad, He knew he'd been had, So he shot at the sun with a gun</code>, <a href=""https://www.youtube.com/watch?v=I8sUC-dsW8A"" rel=""nofollow noreferrer"">Link</a></p>
","80214","","","","","2021-04-28 03:48:23","","","","1","","","","CC BY-SA 4.0"
"224589","2","","95035","2021-04-28 11:28:09","","2","","<h1><a href=""https://github.com/nxadm/rakudo-pkg"" rel=""nofollow noreferrer"">Raku</a>, <Sup><s>17</s></sup> 15 bytes</h1>

<pre class=""lang-perl6 prettyprint-override""><code>(),{|$_,$_}...*
</code></pre>
<p><a href=""https://tio.run/##K0gtyjH7/z@3UsEh0VZDU6e6RiVeRyW@Vk9PT8v6f3EiSDw6PbUk9r8pAA"" rel=""nofollow noreferrer"" title=""Perl 6 – Try It Online"">Try it online!</a></p>
<p>An anonymous lazy list. You can assign it to a variable like:</p>
<p><code>my @list = (),{|$_,$_}...* ;</code></p>
<p>and access it with <code>@list[n]</code>.</p>
","80214","","80214","","2021-04-29 07:05:40","2021-04-29 07:05:40","","","","0","","","","CC BY-SA 4.0"
"224591","2","","67346","2021-04-28 12:51:36","","2","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 15 bytes</h1>
<pre><code>ω(m?!2▲!2X3`:0Θ
</code></pre>
<p><a href=""https://tio.run/##yygtzv7//3ynRq69otGjaZsUjSKME6wMzs34//9/tLmOgY4xEMOgBRBb6hjGAgA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<h2>Explanation</h2>
<pre><code>ω(m?!2▲!2X3`:0Θ
ω(              iterate until fixed point:
           `:0Θ prepend and append 0
         X3     take overlapping segments of 3 elements
  m             map to:
   ?   !2        if second element is truthy:
    !2            leave as is
      ▲           else take maximum
    
</code></pre>
","80214","","","","","2021-04-28 12:51:36","","","","0","","","","CC BY-SA 4.0"
"224626","2","","224621","2021-04-29 04:02:46","","18","","<h1>Max</h1>
<p>Max.</p>
<pre><code>{
    name: &quot;Max&quot;,
    max: &quot;max&quot;,
    run:(max)=&gt; Math.max(...max)
}
</code></pre>
","80214","","","","","2021-04-29 04:02:46","","","","4","","","","CC BY-SA 4.0"
"224642","2","","195807","2021-04-29 11:16:09","","0","","<h1><a href=""https://github.com/barbuz/Husk"" rel=""nofollow noreferrer"">Husk</a>, 8 bytes</h1>
<pre><code>mṠ,oL←kL
</code></pre>
<p><a href=""https://tio.run/##yygtzv7/P/fhzgU6@T6P2iZk@/z//z9ayTk/JVVJR8k9PycNSCXmpQBJoFhmXjqIkZGYk5Oal55aDOT4ppYkKsUCAA"" rel=""nofollow noreferrer"" title=""Husk – Try It Online"">Try it online!</a></p>
<p>so close..</p>
","80214","","","","","2021-04-29 11:16:09","","","","0","","","","CC BY-SA 4.0"
"224644","2","","116110","2021-04-29 11:21:33","","0","","<h1><a href=""https://github.com/dzaima/Canvas"" rel=""nofollow noreferrer"">Canvas</a>, <sup><s>8</s></sup> 7 <a href=""https://github.com/dzaima/Canvas/blob/master/files/chartable.md"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>+×：⤢ｎ！┼
</code></pre>
<p><a href=""https://dzaima.github.io/Canvas/?u=KyVENyV1RkYxQSV1MjkyMiV1RkY0RSV1RkYwMSV1MjUzQw__,i=NQ__,v=8"" rel=""nofollow noreferrer"">Try it here!</a></p>
<p>-1 byte from hakr14.</p>
","80214","","80214","","2021-04-30 02:01:48","2021-04-30 02:01:48","","","","2","","","","CC BY-SA 4.0"
"224734","2","","224730","2021-04-30 05:05:58","","4","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, <sup><s>13 11</s></sup> 10 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>╨¬ª₧}ÄM☻☻.
</code></pre>
<p><a href=""https://staxlang.xyz/#p=d0aaa69e7d8e4d02022e&amp;i=0,%5B345%5D%0A6+,%5B2%5D%0A6+,%5B2,4%5D%0A30,+%5B2,3%5D%0A10,+%5B9,2%5D%0A20,%5B3,4,5%5D%0A&amp;m=2"" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>Having another stack based language to compete with gave some golfing motivation.</p>
<h2>Explanation</h2>
<pre><code>n^*{|%mr$A|b
n^*               repeat bases X+1 times
   {  m           map to 
    |%            divmod(puts quotient on stack for next iteration)
       r          reverse
        $         join to string
         A|b      interpret as base 10
</code></pre>
","80214","","80214","","2021-04-30 12:03:04","2021-04-30 12:03:04","","","","0","","","","CC BY-SA 4.0"
"224749","2","","93441","2021-04-30 06:16:34","","1","","<h1><a href=""https://github.com/DJMcMayhem/V"" rel=""nofollow noreferrer"">V (vim)</a>, 18 bytes</h1>
<pre><code>i0&lt;esc&gt;qqYp&lt;c-a&gt;Yi-&lt;esc&gt;p@qq@q
</code></pre>
<p><a href=""https://tio.run/##K/v/P9PAJrU42a6wMLLAJlk30S4yUxcsUOBQWOhQ@P//f90yAA"" rel=""nofollow noreferrer"" title=""V (vim) – Try It Online"">Try it online!</a></p>
<p>a small improvement by shuffling around the loop and removing the 1 from James' answer.</p>
","80214","","","","","2021-04-30 06:16:34","","","","0","","","","CC BY-SA 4.0"
"224756","2","","120796","2021-04-30 07:41:43","","1","","<h1><a href=""https://github.com/tomtheisen/stax"" rel=""nofollow noreferrer"">Stax</a>, 7 <a href=""https://github.com/tomtheisen/stax/blob/master/docs/packed.md#packed-stax"" rel=""nofollow noreferrer"">bytes</a></h1>
<pre><code>â─$∩√Öu
</code></pre>
<p><a href=""https://staxlang.xyz/#p=83c424effb9975&amp;i="" rel=""nofollow noreferrer"">Run and debug it</a></p>
<p>same idea as 05AB1E, but Stax has more convenient output here :)</p>
<h2>Explanation</h2>
<pre><code>Wi^p&quot;+1/
W        loop forever
 i^      increment counter
   p     print without newline
    &quot;+1/ print &quot;+1/&quot; without newline
</code></pre>
","80214","","","","","2021-04-30 07:41:43","","","","0","","","","CC BY-SA 4.0"